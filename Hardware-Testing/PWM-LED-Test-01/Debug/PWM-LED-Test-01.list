
C:\eYSIP-2017\Code\PWM-LED-Test-01\Debug\PWM-LED-Test-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080014bc  080014bc  000114bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080014e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  20000004  080014e8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000118  080014e8  00020118  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e2bd  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c58  00000000  00000000  0002e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048d6  00000000  00000000  0002ff42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000650  00000000  00000000  00034818  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a00  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003b56  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a53  00000000  00000000  000393be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003be11  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001204  00000000  00000000  0003be90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080014a4 	.word	0x080014a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080014a4 	.word	0x080014a4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000150:	f000 fcf6 	bl	8000b40 <HAL_RCC_GetHCLKFreq>
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f888 	bl	8000270 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f842 	bl	80001f0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}

08000170 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_Init+0x20>)
{
 8000172:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000176:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017e:	f000 f825 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000182:	2000      	movs	r0, #0
 8000184:	f7ff ffe2 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 8000188:	f001 f84e 	bl	8001228 <HAL_MspInit>
}
 800018c:	2000      	movs	r0, #0
 800018e:	bd08      	pop	{r3, pc}
 8000190:	40022000 	.word	0x40022000

08000194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000194:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <HAL_IncTick+0xc>)
 8000196:	6813      	ldr	r3, [r2, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000020 	.word	0x20000020

080001a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <HAL_GetTick+0x8>)
 80001a6:	6818      	ldr	r0, [r3, #0]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000020 	.word	0x20000020

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b0:	b513      	push	{r0, r1, r4, lr}
 80001b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001b4:	f7ff fff6 	bl	80001a4 <HAL_GetTick>
 80001b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ba:	f7ff fff3 	bl	80001a4 <HAL_GetTick>
 80001be:	9b01      	ldr	r3, [sp, #4]
 80001c0:	1b00      	subs	r0, r0, r4
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d3f9      	bcc.n	80001ba <HAL_Delay+0xa>
  {
  }
}
 80001c6:	b002      	add	sp, #8
 80001c8:	bd10      	pop	{r4, pc}
	...

080001cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001da:	041b      	lsls	r3, r3, #16
 80001dc:	0c1b      	lsrs	r3, r3, #16
 80001de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001e8:	60d3      	str	r3, [r2, #12]
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f2:	b530      	push	{r4, r5, lr}
 80001f4:	68dc      	ldr	r4, [r3, #12]
 80001f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000200:	2b04      	cmp	r3, #4
 8000202:	bf28      	it	cs
 8000204:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000208:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020c:	bf98      	it	ls
 800020e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	fa05 f303 	lsl.w	r3, r5, r3
 8000214:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	bf88      	it	hi
 800021a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	4019      	ands	r1, r3
 800021e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000220:	fa05 f404 	lsl.w	r4, r5, r4
 8000224:	3c01      	subs	r4, #1
 8000226:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000228:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022a:	ea42 0201 	orr.w	r2, r2, r1
 800022e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	bfaf      	iteee	ge
 8000234:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	4b06      	ldrlt	r3, [pc, #24]	; (8000254 <HAL_NVIC_SetPriority+0x64>)
 800023a:	f000 000f 	andlt.w	r0, r0, #15
 800023e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	bfa5      	ittet	ge
 8000242:	b2d2      	uxtbge	r2, r2
 8000244:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800024e:	bd30      	pop	{r4, r5, pc}
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	e000ed14 	.word	0xe000ed14

08000258 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000258:	2301      	movs	r3, #1
 800025a:	0942      	lsrs	r2, r0, #5
 800025c:	f000 001f 	and.w	r0, r0, #31
 8000260:	fa03 f000 	lsl.w	r0, r3, r0
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <HAL_NVIC_EnableIRQ+0x14>)
 8000266:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100

08000270 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000270:	3801      	subs	r0, #1
 8000272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000276:	d20a      	bcs.n	800028e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000288:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800028e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000e010 	.word	0xe000e010
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800029e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	bf0c      	ite	eq
 80002a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002a8:	f022 0204 	bicne.w	r2, r2, #4
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	4770      	bx	lr
 80002b0:	e000e010 	.word	0xe000e010

080002b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002b4:	4770      	bx	lr

080002b6 <HAL_SYSTICK_IRQHandler>:
{
 80002b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002b8:	f7ff fffc 	bl	80002b4 <HAL_SYSTICK_Callback>
 80002bc:	bd08      	pop	{r3, pc}
	...

080002c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002c4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002c6:	4616      	mov	r6, r2
 80002c8:	4b65      	ldr	r3, [pc, #404]	; (8000460 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ca:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000470 <HAL_GPIO_Init+0x1b0>
 80002ce:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000474 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 80002d2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d6:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80002d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002dc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002e0:	45a0      	cmp	r8, r4
 80002e2:	d17f      	bne.n	80003e4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002e4:	684d      	ldr	r5, [r1, #4]
 80002e6:	2d12      	cmp	r5, #18
 80002e8:	f000 80af 	beq.w	800044a <HAL_GPIO_Init+0x18a>
 80002ec:	f200 8088 	bhi.w	8000400 <HAL_GPIO_Init+0x140>
 80002f0:	2d02      	cmp	r5, #2
 80002f2:	f000 80a7 	beq.w	8000444 <HAL_GPIO_Init+0x184>
 80002f6:	d87c      	bhi.n	80003f2 <HAL_GPIO_Init+0x132>
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	f000 808e 	beq.w	800041a <HAL_GPIO_Init+0x15a>
 80002fe:	2d01      	cmp	r5, #1
 8000300:	f000 809e 	beq.w	8000440 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000304:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000308:	2cff      	cmp	r4, #255	; 0xff
 800030a:	bf93      	iteet	ls
 800030c:	4682      	movls	sl, r0
 800030e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000312:	3d08      	subhi	r5, #8
 8000314:	f8d0 b000 	ldrls.w	fp, [r0]
 8000318:	bf92      	itee	ls
 800031a:	00b5      	lslls	r5, r6, #2
 800031c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000320:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000322:	fa09 f805 	lsl.w	r8, r9, r5
 8000326:	ea2b 0808 	bic.w	r8, fp, r8
 800032a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800032e:	bf88      	it	hi
 8000330:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000334:	ea48 0505 	orr.w	r5, r8, r5
 8000338:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800033c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000340:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000344:	d04e      	beq.n	80003e4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000346:	4d47      	ldr	r5, [pc, #284]	; (8000464 <HAL_GPIO_Init+0x1a4>)
 8000348:	4f46      	ldr	r7, [pc, #280]	; (8000464 <HAL_GPIO_Init+0x1a4>)
 800034a:	69ad      	ldr	r5, [r5, #24]
 800034c:	f026 0803 	bic.w	r8, r6, #3
 8000350:	f045 0501 	orr.w	r5, r5, #1
 8000354:	61bd      	str	r5, [r7, #24]
 8000356:	69bd      	ldr	r5, [r7, #24]
 8000358:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800035c:	f005 0501 	and.w	r5, r5, #1
 8000360:	9501      	str	r5, [sp, #4]
 8000362:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000366:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800036c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000370:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000374:	fa09 f90b 	lsl.w	r9, r9, fp
 8000378:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800037c:	4d3a      	ldr	r5, [pc, #232]	; (8000468 <HAL_GPIO_Init+0x1a8>)
 800037e:	42a8      	cmp	r0, r5
 8000380:	d068      	beq.n	8000454 <HAL_GPIO_Init+0x194>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d066      	beq.n	8000458 <HAL_GPIO_Init+0x198>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	d064      	beq.n	800045c <HAL_GPIO_Init+0x19c>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	bf0c      	ite	eq
 800039a:	2503      	moveq	r5, #3
 800039c:	2504      	movne	r5, #4
 800039e:	fa05 f50b 	lsl.w	r5, r5, fp
 80003a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 80003a6:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003aa:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80003b0:	bf14      	ite	ne
 80003b2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003b4:	43a5      	biceq	r5, r4
 80003b6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003b8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003be:	bf14      	ite	ne
 80003c0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003c2:	43a5      	biceq	r5, r4
 80003c4:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003c6:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003cc:	bf14      	ite	ne
 80003ce:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003d0:	43a5      	biceq	r5, r4
 80003d2:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003d4:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003da:	bf14      	ite	ne
 80003dc:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003de:	ea25 0404 	biceq.w	r4, r5, r4
 80003e2:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80003e4:	3601      	adds	r6, #1
 80003e6:	2e10      	cmp	r6, #16
 80003e8:	f47f af73 	bne.w	80002d2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003ec:	b003      	add	sp, #12
 80003ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003f2:	2d03      	cmp	r5, #3
 80003f4:	d022      	beq.n	800043c <HAL_GPIO_Init+0x17c>
 80003f6:	2d11      	cmp	r5, #17
 80003f8:	d184      	bne.n	8000304 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003fa:	68ca      	ldr	r2, [r1, #12]
 80003fc:	3204      	adds	r2, #4
          break;
 80003fe:	e781      	b.n	8000304 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000400:	4f1a      	ldr	r7, [pc, #104]	; (800046c <HAL_GPIO_Init+0x1ac>)
 8000402:	42bd      	cmp	r5, r7
 8000404:	d009      	beq.n	800041a <HAL_GPIO_Init+0x15a>
 8000406:	d812      	bhi.n	800042e <HAL_GPIO_Init+0x16e>
 8000408:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000478 <HAL_GPIO_Init+0x1b8>
 800040c:	454d      	cmp	r5, r9
 800040e:	d004      	beq.n	800041a <HAL_GPIO_Init+0x15a>
 8000410:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000414:	454d      	cmp	r5, r9
 8000416:	f47f af75 	bne.w	8000304 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800041a:	688a      	ldr	r2, [r1, #8]
 800041c:	b1c2      	cbz	r2, 8000450 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800041e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000420:	bf0c      	ite	eq
 8000422:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000426:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800042a:	2208      	movs	r2, #8
 800042c:	e76a      	b.n	8000304 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800042e:	4575      	cmp	r5, lr
 8000430:	d0f3      	beq.n	800041a <HAL_GPIO_Init+0x15a>
 8000432:	4565      	cmp	r5, ip
 8000434:	d0f1      	beq.n	800041a <HAL_GPIO_Init+0x15a>
 8000436:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800047c <HAL_GPIO_Init+0x1bc>
 800043a:	e7eb      	b.n	8000414 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800043c:	2200      	movs	r2, #0
 800043e:	e761      	b.n	8000304 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000440:	68ca      	ldr	r2, [r1, #12]
          break;
 8000442:	e75f      	b.n	8000304 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000444:	68ca      	ldr	r2, [r1, #12]
 8000446:	3208      	adds	r2, #8
          break;
 8000448:	e75c      	b.n	8000304 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800044a:	68ca      	ldr	r2, [r1, #12]
 800044c:	320c      	adds	r2, #12
          break;
 800044e:	e759      	b.n	8000304 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000450:	2204      	movs	r2, #4
 8000452:	e757      	b.n	8000304 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000454:	2500      	movs	r5, #0
 8000456:	e7a2      	b.n	800039e <HAL_GPIO_Init+0xde>
 8000458:	2501      	movs	r5, #1
 800045a:	e7a0      	b.n	800039e <HAL_GPIO_Init+0xde>
 800045c:	2502      	movs	r5, #2
 800045e:	e79e      	b.n	800039e <HAL_GPIO_Init+0xde>
 8000460:	40010400 	.word	0x40010400
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800
 800046c:	10210000 	.word	0x10210000
 8000470:	10310000 	.word	0x10310000
 8000474:	10320000 	.word	0x10320000
 8000478:	10110000 	.word	0x10110000
 800047c:	10220000 	.word	0x10220000

08000480 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000480:	b10a      	cbz	r2, 8000486 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000482:	6101      	str	r1, [r0, #16]
 8000484:	4770      	bx	lr
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	e7fb      	b.n	8000482 <HAL_GPIO_WritePin+0x2>

0800048a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800048a:	68c3      	ldr	r3, [r0, #12]
 800048c:	4059      	eors	r1, r3
 800048e:	60c1      	str	r1, [r0, #12]
 8000490:	4770      	bx	lr
	...

08000494 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000494:	6803      	ldr	r3, [r0, #0]
{
 8000496:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049a:	07de      	lsls	r6, r3, #31
{
 800049c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049e:	d434      	bmi.n	800050a <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a0:	682b      	ldr	r3, [r5, #0]
 80004a2:	079c      	lsls	r4, r3, #30
 80004a4:	f100 80a7 	bmi.w	80005f6 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	071a      	lsls	r2, r3, #28
 80004ac:	d523      	bpl.n	80004f6 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80004ae:	69aa      	ldr	r2, [r5, #24]
 80004b0:	4cbe      	ldr	r4, [pc, #760]	; (80007ac <HAL_RCC_OscConfig+0x318>)
 80004b2:	2301      	movs	r3, #1
 80004b4:	49be      	ldr	r1, [pc, #760]	; (80007b0 <HAL_RCC_OscConfig+0x31c>)
 80004b6:	2a00      	cmp	r2, #0
 80004b8:	f000 8115 	beq.w	80006e6 <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004bc:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80004c8:	f7ff fe6c 	bl	80001a4 <HAL_GetTick>
 80004cc:	2602      	movs	r6, #2
 80004ce:	4607      	mov	r7, r0
 80004d0:	fa96 f3a6 	rbit	r3, r6
 80004d4:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80004d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80004da:	fa96 f3a6 	rbit	r3, r6
 80004de:	fab3 f383 	clz	r3, r3
 80004e2:	f003 031f 	and.w	r3, r3, #31
 80004e6:	fa22 f303 	lsr.w	r3, r2, r3
 80004ea:	07db      	lsls	r3, r3, #31
 80004ec:	f140 80f4 	bpl.w	80006d8 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe5d 	bl	80001b0 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f6:	682b      	ldr	r3, [r5, #0]
 80004f8:	0759      	lsls	r1, r3, #29
 80004fa:	f100 8114 	bmi.w	8000726 <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004fe:	69ea      	ldr	r2, [r5, #28]
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8193 	bne.w	800082c <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000506:	2000      	movs	r0, #0
 8000508:	e020      	b.n	800054c <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800050a:	4ca8      	ldr	r4, [pc, #672]	; (80007ac <HAL_RCC_OscConfig+0x318>)
 800050c:	6863      	ldr	r3, [r4, #4]
 800050e:	f003 030c 	and.w	r3, r3, #12
 8000512:	2b04      	cmp	r3, #4
 8000514:	d007      	beq.n	8000526 <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	f003 030c 	and.w	r3, r3, #12
 800051c:	2b08      	cmp	r3, #8
 800051e:	d118      	bne.n	8000552 <HAL_RCC_OscConfig+0xbe>
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	03d8      	lsls	r0, r3, #15
 8000524:	d515      	bpl.n	8000552 <HAL_RCC_OscConfig+0xbe>
 8000526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800052e:	6822      	ldr	r2, [r4, #0]
 8000530:	fa93 f3a3 	rbit	r3, r3
 8000534:	fab3 f383 	clz	r3, r3
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	fa22 f303 	lsr.w	r3, r2, r3
 8000540:	07d9      	lsls	r1, r3, #31
 8000542:	d5ad      	bpl.n	80004a0 <HAL_RCC_OscConfig+0xc>
 8000544:	686b      	ldr	r3, [r5, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1aa      	bne.n	80004a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800054a:	2001      	movs	r0, #1
}
 800054c:	b003      	add	sp, #12
 800054e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	686b      	ldr	r3, [r5, #4]
 8000554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000558:	d11c      	bne.n	8000594 <HAL_RCC_OscConfig+0x100>
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000560:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000562:	f7ff fe1f 	bl	80001a4 <HAL_GetTick>
 8000566:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800056a:	4607      	mov	r7, r0
 800056c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000570:	6822      	ldr	r2, [r4, #0]
 8000572:	fa96 f3a6 	rbit	r3, r6
 8000576:	fab3 f383 	clz	r3, r3
 800057a:	f003 031f 	and.w	r3, r3, #31
 800057e:	fa22 f303 	lsr.w	r3, r2, r3
 8000582:	07da      	lsls	r2, r3, #31
 8000584:	d48c      	bmi.n	80004a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000586:	f7ff fe0d 	bl	80001a4 <HAL_GetTick>
 800058a:	1bc0      	subs	r0, r0, r7
 800058c:	2864      	cmp	r0, #100	; 0x64
 800058e:	d9ed      	bls.n	800056c <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000590:	2003      	movs	r0, #3
 8000592:	e7db      	b.n	800054c <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000594:	bb03      	cbnz	r3, 80005d8 <HAL_RCC_OscConfig+0x144>
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800059c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005a0:	6023      	str	r3, [r4, #0]
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005aa:	f7ff fdfb 	bl	80001a4 <HAL_GetTick>
 80005ae:	4607      	mov	r7, r0
 80005b0:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b4:	6822      	ldr	r2, [r4, #0]
 80005b6:	fa96 f3a6 	rbit	r3, r6
 80005ba:	fab3 f383 	clz	r3, r3
 80005be:	f003 031f 	and.w	r3, r3, #31
 80005c2:	fa22 f303 	lsr.w	r3, r2, r3
 80005c6:	07db      	lsls	r3, r3, #31
 80005c8:	f57f af6a 	bpl.w	80004a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005cc:	f7ff fdea 	bl	80001a4 <HAL_GetTick>
 80005d0:	1bc0      	subs	r0, r0, r7
 80005d2:	2864      	cmp	r0, #100	; 0x64
 80005d4:	d9ec      	bls.n	80005b0 <HAL_RCC_OscConfig+0x11c>
 80005d6:	e7db      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	d103      	bne.n	80005e8 <HAL_RCC_OscConfig+0x154>
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e4:	6023      	str	r3, [r4, #0]
 80005e6:	e7b8      	b.n	800055a <HAL_RCC_OscConfig+0xc6>
 80005e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ec:	6023      	str	r3, [r4, #0]
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f4:	e7b4      	b.n	8000560 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f6:	4c6d      	ldr	r4, [pc, #436]	; (80007ac <HAL_RCC_OscConfig+0x318>)
 80005f8:	6863      	ldr	r3, [r4, #4]
 80005fa:	f013 0f0c 	tst.w	r3, #12
 80005fe:	d007      	beq.n	8000610 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000600:	6863      	ldr	r3, [r4, #4]
 8000602:	f003 030c 	and.w	r3, r3, #12
 8000606:	2b08      	cmp	r3, #8
 8000608:	d120      	bne.n	800064c <HAL_RCC_OscConfig+0x1b8>
 800060a:	6863      	ldr	r3, [r4, #4]
 800060c:	03df      	lsls	r7, r3, #15
 800060e:	d41d      	bmi.n	800064c <HAL_RCC_OscConfig+0x1b8>
 8000610:	2302      	movs	r3, #2
 8000612:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	fa93 f3a3 	rbit	r3, r3
 800061c:	fab3 f383 	clz	r3, r3
 8000620:	f003 031f 	and.w	r3, r3, #31
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	07de      	lsls	r6, r3, #31
 800062a:	d502      	bpl.n	8000632 <HAL_RCC_OscConfig+0x19e>
 800062c:	692b      	ldr	r3, [r5, #16]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d18b      	bne.n	800054a <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000632:	6821      	ldr	r1, [r4, #0]
 8000634:	23f8      	movs	r3, #248	; 0xf8
 8000636:	fa93 f3a3 	rbit	r3, r3
 800063a:	fab3 f283 	clz	r2, r3
 800063e:	696b      	ldr	r3, [r5, #20]
 8000640:	4093      	lsls	r3, r2
 8000642:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000646:	4313      	orrs	r3, r2
 8000648:	6023      	str	r3, [r4, #0]
 800064a:	e72d      	b.n	80004a8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800064c:	692a      	ldr	r2, [r5, #16]
 800064e:	2301      	movs	r3, #1
 8000650:	b302      	cbz	r2, 8000694 <HAL_RCC_OscConfig+0x200>
 8000652:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 8000656:	fab2 f282 	clz	r2, r2
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000660:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000664:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000666:	f7ff fd9d 	bl	80001a4 <HAL_GetTick>
 800066a:	2602      	movs	r6, #2
 800066c:	4607      	mov	r7, r0
 800066e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000672:	6822      	ldr	r2, [r4, #0]
 8000674:	fa96 f3a6 	rbit	r3, r6
 8000678:	fab3 f383 	clz	r3, r3
 800067c:	f003 031f 	and.w	r3, r3, #31
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
 8000684:	07d8      	lsls	r0, r3, #31
 8000686:	d4d4      	bmi.n	8000632 <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000688:	f7ff fd8c 	bl	80001a4 <HAL_GetTick>
 800068c:	1bc0      	subs	r0, r0, r7
 800068e:	2802      	cmp	r0, #2
 8000690:	d9ed      	bls.n	800066e <HAL_RCC_OscConfig+0x1da>
 8000692:	e77d      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
 8000694:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000698:	fab3 f383 	clz	r3, r3
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80006a2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80006a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a8:	f7ff fd7c 	bl	80001a4 <HAL_GetTick>
 80006ac:	2602      	movs	r6, #2
 80006ae:	4607      	mov	r7, r0
 80006b0:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b4:	6822      	ldr	r2, [r4, #0]
 80006b6:	fa96 f3a6 	rbit	r3, r6
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	07d9      	lsls	r1, r3, #31
 80006c8:	f57f aeee 	bpl.w	80004a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006cc:	f7ff fd6a 	bl	80001a4 <HAL_GetTick>
 80006d0:	1bc0      	subs	r0, r0, r7
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9ec      	bls.n	80006b0 <HAL_RCC_OscConfig+0x21c>
 80006d6:	e75b      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d8:	f7ff fd64 	bl	80001a4 <HAL_GetTick>
 80006dc:	1bc0      	subs	r0, r0, r7
 80006de:	2802      	cmp	r0, #2
 80006e0:	f67f aef6 	bls.w	80004d0 <HAL_RCC_OscConfig+0x3c>
 80006e4:	e754      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
 80006e6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd57 	bl	80001a4 <HAL_GetTick>
 80006f6:	2602      	movs	r6, #2
 80006f8:	4607      	mov	r7, r0
 80006fa:	fa96 f3a6 	rbit	r3, r6
 80006fe:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000702:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000704:	fa96 f3a6 	rbit	r3, r6
 8000708:	fab3 f383 	clz	r3, r3
 800070c:	f003 031f 	and.w	r3, r3, #31
 8000710:	fa22 f303 	lsr.w	r3, r2, r3
 8000714:	07d8      	lsls	r0, r3, #31
 8000716:	f57f aeee 	bpl.w	80004f6 <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800071a:	f7ff fd43 	bl	80001a4 <HAL_GetTick>
 800071e:	1bc0      	subs	r0, r0, r7
 8000720:	2802      	cmp	r0, #2
 8000722:	d9ea      	bls.n	80006fa <HAL_RCC_OscConfig+0x266>
 8000724:	e734      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4c21      	ldr	r4, [pc, #132]	; (80007ac <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000728:	4e22      	ldr	r6, [pc, #136]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	69e3      	ldr	r3, [r4, #28]
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	61e3      	str	r3, [r4, #28]
 8000732:	69e3      	ldr	r3, [r4, #28]
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800073c:	6833      	ldr	r3, [r6, #0]
 800073e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000742:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000744:	f7ff fd2e 	bl	80001a4 <HAL_GetTick>
 8000748:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800074a:	6833      	ldr	r3, [r6, #0]
 800074c:	05da      	lsls	r2, r3, #23
 800074e:	d526      	bpl.n	800079e <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	68eb      	ldr	r3, [r5, #12]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d130      	bne.n	80007b8 <HAL_RCC_OscConfig+0x324>
 8000756:	6a23      	ldr	r3, [r4, #32]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd21 	bl	80001a4 <HAL_GetTick>
 8000762:	2602      	movs	r6, #2
 8000764:	4681      	mov	r9, r0
 8000766:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000768:	f241 3788 	movw	r7, #5000	; 0x1388
 800076c:	fa96 f3a6 	rbit	r3, r6
 8000770:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000774:	2b00      	cmp	r3, #0
 8000776:	d055      	beq.n	8000824 <HAL_RCC_OscConfig+0x390>
 8000778:	6a22      	ldr	r2, [r4, #32]
 800077a:	fa98 f3a8 	rbit	r3, r8
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	fa22 f303 	lsr.w	r3, r2, r3
 800078a:	07db      	lsls	r3, r3, #31
 800078c:	f53f aeb7 	bmi.w	80004fe <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000790:	f7ff fd08 	bl	80001a4 <HAL_GetTick>
 8000794:	eba0 0009 	sub.w	r0, r0, r9
 8000798:	42b8      	cmp	r0, r7
 800079a:	d9e7      	bls.n	800076c <HAL_RCC_OscConfig+0x2d8>
 800079c:	e6f8      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800079e:	f7ff fd01 	bl	80001a4 <HAL_GetTick>
 80007a2:	1bc0      	subs	r0, r0, r7
 80007a4:	2864      	cmp	r0, #100	; 0x64
 80007a6:	d9d0      	bls.n	800074a <HAL_RCC_OscConfig+0x2b6>
 80007a8:	e6f2      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	42420480 	.word	0x42420480
 80007b4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b8:	bb33      	cbnz	r3, 8000808 <HAL_RCC_OscConfig+0x374>
 80007ba:	6a23      	ldr	r3, [r4, #32]
 80007bc:	2602      	movs	r6, #2
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6223      	str	r3, [r4, #32]
 80007c4:	6a23      	ldr	r3, [r4, #32]
 80007c6:	4637      	mov	r7, r6
 80007c8:	f023 0304 	bic.w	r3, r3, #4
 80007cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ce:	f7ff fce9 	bl	80001a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d6:	4680      	mov	r8, r0
 80007d8:	fa96 f3a6 	rbit	r3, r6
 80007dc:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007e0:	b313      	cbz	r3, 8000828 <HAL_RCC_OscConfig+0x394>
 80007e2:	6a22      	ldr	r2, [r4, #32]
 80007e4:	fa97 f3a7 	rbit	r3, r7
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	07d8      	lsls	r0, r3, #31
 80007f6:	f57f ae82 	bpl.w	80004fe <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007fa:	f7ff fcd3 	bl	80001a4 <HAL_GetTick>
 80007fe:	eba0 0008 	sub.w	r0, r0, r8
 8000802:	4548      	cmp	r0, r9
 8000804:	d9e8      	bls.n	80007d8 <HAL_RCC_OscConfig+0x344>
 8000806:	e6c3      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000808:	2b05      	cmp	r3, #5
 800080a:	6a23      	ldr	r3, [r4, #32]
 800080c:	d103      	bne.n	8000816 <HAL_RCC_OscConfig+0x382>
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6223      	str	r3, [r4, #32]
 8000814:	e79f      	b.n	8000756 <HAL_RCC_OscConfig+0x2c2>
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6223      	str	r3, [r4, #32]
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	f023 0304 	bic.w	r3, r3, #4
 8000822:	e79b      	b.n	800075c <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000824:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000826:	e7a8      	b.n	800077a <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000828:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800082a:	e7db      	b.n	80007e4 <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800082c:	4c44      	ldr	r4, [pc, #272]	; (8000940 <HAL_RCC_OscConfig+0x4ac>)
 800082e:	6863      	ldr	r3, [r4, #4]
 8000830:	f003 030c 	and.w	r3, r3, #12
 8000834:	2b08      	cmp	r3, #8
 8000836:	f43f ae88 	beq.w	800054a <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800083a:	2a02      	cmp	r2, #2
 800083c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000840:	d159      	bne.n	80008f6 <HAL_RCC_OscConfig+0x462>
 8000842:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000846:	fab3 f383 	clz	r3, r3
 800084a:	2200      	movs	r2, #0
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000852:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000856:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000858:	f7ff fca4 	bl	80001a4 <HAL_GetTick>
 800085c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000860:	4607      	mov	r7, r0
 8000862:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000866:	6822      	ldr	r2, [r4, #0]
 8000868:	fa96 f3a6 	rbit	r3, r6
 800086c:	fab3 f383 	clz	r3, r3
 8000870:	f003 031f 	and.w	r3, r3, #31
 8000874:	fa22 f303 	lsr.w	r3, r2, r3
 8000878:	07d9      	lsls	r1, r3, #31
 800087a:	d436      	bmi.n	80008ea <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800087c:	6a2b      	ldr	r3, [r5, #32]
 800087e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000882:	d105      	bne.n	8000890 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000884:	6862      	ldr	r2, [r4, #4]
 8000886:	68a9      	ldr	r1, [r5, #8]
 8000888:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800088c:	430a      	orrs	r2, r1
 800088e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000890:	6862      	ldr	r2, [r4, #4]
 8000892:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000894:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000898:	430b      	orrs	r3, r1
 800089a:	4313      	orrs	r3, r2
 800089c:	6063      	str	r3, [r4, #4]
 800089e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008a2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	2201      	movs	r2, #1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008b8:	f7ff fc74 	bl	80001a4 <HAL_GetTick>
 80008bc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008c0:	4606      	mov	r6, r0
 80008c2:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008c6:	6822      	ldr	r2, [r4, #0]
 80008c8:	fa95 f3a5 	rbit	r3, r5
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	07da      	lsls	r2, r3, #31
 80008da:	f53f ae14 	bmi.w	8000506 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008de:	f7ff fc61 	bl	80001a4 <HAL_GetTick>
 80008e2:	1b80      	subs	r0, r0, r6
 80008e4:	2802      	cmp	r0, #2
 80008e6:	d9ec      	bls.n	80008c2 <HAL_RCC_OscConfig+0x42e>
 80008e8:	e652      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ea:	f7ff fc5b 	bl	80001a4 <HAL_GetTick>
 80008ee:	1bc0      	subs	r0, r0, r7
 80008f0:	2802      	cmp	r0, #2
 80008f2:	d9b6      	bls.n	8000862 <HAL_RCC_OscConfig+0x3ce>
 80008f4:	e64c      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
 80008f6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	2200      	movs	r2, #0
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000906:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800090a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800090c:	f7ff fc4a 	bl	80001a4 <HAL_GetTick>
 8000910:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000914:	4606      	mov	r6, r0
 8000916:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800091a:	6822      	ldr	r2, [r4, #0]
 800091c:	fa95 f3a5 	rbit	r3, r5
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	fa22 f303 	lsr.w	r3, r2, r3
 800092c:	07db      	lsls	r3, r3, #31
 800092e:	f57f adea 	bpl.w	8000506 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000932:	f7ff fc37 	bl	80001a4 <HAL_GetTick>
 8000936:	1b80      	subs	r0, r0, r6
 8000938:	2802      	cmp	r0, #2
 800093a:	d9ec      	bls.n	8000916 <HAL_RCC_OscConfig+0x482>
 800093c:	e628      	b.n	8000590 <HAL_RCC_OscConfig+0xfc>
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000944:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000948:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800094a:	ac02      	add	r4, sp, #8
 800094c:	f103 0510 	add.w	r5, r3, #16
 8000950:	4622      	mov	r2, r4
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	6859      	ldr	r1, [r3, #4]
 8000956:	3308      	adds	r3, #8
 8000958:	c203      	stmia	r2!, {r0, r1}
 800095a:	42ab      	cmp	r3, r5
 800095c:	4614      	mov	r4, r2
 800095e:	d1f7      	bne.n	8000950 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000960:	2301      	movs	r3, #1
 8000962:	f88d 3004 	strb.w	r3, [sp, #4]
 8000966:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000968:	4c18      	ldr	r4, [pc, #96]	; (80009cc <HAL_RCC_GetSysClockFreq+0x88>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800096a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800096e:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000970:	f001 030c 	and.w	r3, r1, #12
 8000974:	2b08      	cmp	r3, #8
 8000976:	d124      	bne.n	80009c2 <HAL_RCC_GetSysClockFreq+0x7e>
 8000978:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800097c:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000980:	fab3 f283 	clz	r2, r3
 8000984:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8000988:	40d3      	lsrs	r3, r2
 800098a:	aa06      	add	r2, sp, #24
 800098c:	4413      	add	r3, r2
 800098e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000992:	03cb      	lsls	r3, r1, #15
 8000994:	d513      	bpl.n	80009be <HAL_RCC_GetSysClockFreq+0x7a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800099c:	fa92 f2a2 	rbit	r2, r2
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	40d3      	lsrs	r3, r2
 80009aa:	aa06      	add	r2, sp, #24
 80009ac:	4413      	add	r3, r2
 80009ae:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009b4:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009b8:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009ba:	b007      	add	sp, #28
 80009bc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x90>)
 80009c0:	e7fa      	b.n	80009b8 <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x8c>)
  return sysclockfreq;
 80009c4:	e7f9      	b.n	80009ba <HAL_RCC_GetSysClockFreq+0x76>
 80009c6:	bf00      	nop
 80009c8:	080014bc 	.word	0x080014bc
 80009cc:	40021000 	.word	0x40021000
 80009d0:	007a1200 	.word	0x007a1200
 80009d4:	003d0900 	.word	0x003d0900

080009d8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <HAL_RCC_ClockConfig+0x158>)
{
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009de:	6813      	ldr	r3, [r2, #0]
{
 80009e0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	428b      	cmp	r3, r1
{
 80009e8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ea:	d330      	bcc.n	8000a4e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009ec:	6832      	ldr	r2, [r6, #0]
 80009ee:	0794      	lsls	r4, r2, #30
 80009f0:	d43a      	bmi.n	8000a68 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009f2:	07d0      	lsls	r0, r2, #31
 80009f4:	d440      	bmi.n	8000a78 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f6:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_RCC_ClockConfig+0x158>)
 80009f8:	6813      	ldr	r3, [r2, #0]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	429d      	cmp	r5, r3
 8000a00:	f0c0 8084 	bcc.w	8000b0c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a04:	6832      	ldr	r2, [r6, #0]
 8000a06:	4c4b      	ldr	r4, [pc, #300]	; (8000b34 <HAL_RCC_ClockConfig+0x15c>)
 8000a08:	f012 0f04 	tst.w	r2, #4
 8000a0c:	f040 8089 	bne.w	8000b22 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a10:	0713      	lsls	r3, r2, #28
 8000a12:	d506      	bpl.n	8000a22 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a14:	6863      	ldr	r3, [r4, #4]
 8000a16:	6932      	ldr	r2, [r6, #16]
 8000a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a20:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a22:	f7ff ff8f 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8000a26:	6863      	ldr	r3, [r4, #4]
 8000a28:	22f0      	movs	r2, #240	; 0xf0
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a36:	40d3      	lsrs	r3, r2
 8000a38:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <HAL_RCC_ClockConfig+0x160>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	40d8      	lsrs	r0, r3
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <HAL_RCC_ClockConfig+0x164>)
 8000a40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fb82 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a48:	2000      	movs	r0, #0
}
 8000a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f023 0307 	bic.w	r3, r3, #7
 8000a54:	430b      	orrs	r3, r1
 8000a56:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d0c4      	beq.n	80009ec <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a62:	2001      	movs	r0, #1
 8000a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a68:	4932      	ldr	r1, [pc, #200]	; (8000b34 <HAL_RCC_ClockConfig+0x15c>)
 8000a6a:	68b0      	ldr	r0, [r6, #8]
 8000a6c:	684b      	ldr	r3, [r1, #4]
 8000a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a72:	4303      	orrs	r3, r0
 8000a74:	604b      	str	r3, [r1, #4]
 8000a76:	e7bc      	b.n	80009f2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	4c2e      	ldr	r4, [pc, #184]	; (8000b34 <HAL_RCC_ClockConfig+0x15c>)
 8000a7c:	2a01      	cmp	r2, #1
 8000a7e:	d128      	bne.n	8000ad2 <HAL_RCC_ClockConfig+0xfa>
 8000a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a84:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a88:	6821      	ldr	r1, [r4, #0]
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	fab3 f383 	clz	r3, r3
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9a:	07d9      	lsls	r1, r3, #31
 8000a9c:	d5e1      	bpl.n	8000a62 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a9e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aa4:	f023 0303 	bic.w	r3, r3, #3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000aac:	f7ff fb7a 	bl	80001a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ab2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d112      	bne.n	8000ade <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d099      	beq.n	80009f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f7ff fb6f 	bl	80001a4 <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d9f5      	bls.n	8000ab8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000acc:	2003      	movs	r0, #3
 8000ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad2:	2a02      	cmp	r2, #2
 8000ad4:	bf0c      	ite	eq
 8000ad6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ada:	2302      	movne	r3, #2
 8000adc:	e7d2      	b.n	8000a84 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d10f      	bne.n	8000b02 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae2:	6863      	ldr	r3, [r4, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d084      	beq.n	80009f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aec:	f7ff fb5a 	bl	80001a4 <HAL_GetTick>
 8000af0:	1bc0      	subs	r0, r0, r7
 8000af2:	4540      	cmp	r0, r8
 8000af4:	d9f5      	bls.n	8000ae2 <HAL_RCC_ClockConfig+0x10a>
 8000af6:	e7e9      	b.n	8000acc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af8:	f7ff fb54 	bl	80001a4 <HAL_GetTick>
 8000afc:	1bc0      	subs	r0, r0, r7
 8000afe:	4540      	cmp	r0, r8
 8000b00:	d8e4      	bhi.n	8000acc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	f013 0f0c 	tst.w	r3, #12
 8000b08:	d1f6      	bne.n	8000af8 <HAL_RCC_ClockConfig+0x120>
 8000b0a:	e774      	b.n	80009f6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f023 0307 	bic.w	r3, r3, #7
 8000b12:	432b      	orrs	r3, r5
 8000b14:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	429d      	cmp	r5, r3
 8000b1e:	d1a0      	bne.n	8000a62 <HAL_RCC_ClockConfig+0x8a>
 8000b20:	e770      	b.n	8000a04 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b22:	6863      	ldr	r3, [r4, #4]
 8000b24:	68f1      	ldr	r1, [r6, #12]
 8000b26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6063      	str	r3, [r4, #4]
 8000b2e:	e76f      	b.n	8000a10 <HAL_RCC_ClockConfig+0x38>
 8000b30:	40022000 	.word	0x40022000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	080014cc 	.word	0x080014cc
 8000b3c:	20000000 	.word	0x20000000

08000b40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b40:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b4c:	6a03      	ldr	r3, [r0, #32]
{
 8000b4e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b5a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000b5e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000b62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000b64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000b66:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000b6a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000b6c:	4d0a      	ldr	r5, [pc, #40]	; (8000b98 <TIM_OC1_SetConfig+0x4c>)
 8000b6e:	42a8      	cmp	r0, r5
 8000b70:	d10b      	bne.n	8000b8a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000b72:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000b74:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000b78:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b7a:	698e      	ldr	r6, [r1, #24]
 8000b7c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000b7e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b82:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000b84:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b88:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b8c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000b8e:	684a      	ldr	r2, [r1, #4]
 8000b90:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b92:	6203      	str	r3, [r0, #32]
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	bf00      	nop
 8000b98:	40012c00 	.word	0x40012c00

08000b9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000b9c:	6a03      	ldr	r3, [r0, #32]
{
 8000b9e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ba4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ba6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ba8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000baa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000bac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000bae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000bb2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000bb4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000bb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000bba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000bbe:	4d0b      	ldr	r5, [pc, #44]	; (8000bec <TIM_OC3_SetConfig+0x50>)
 8000bc0:	42a8      	cmp	r0, r5
 8000bc2:	d10d      	bne.n	8000be0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000bc4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000bca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bce:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000bd0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000bd2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bd6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000bdc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000be0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000be2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000be4:	684a      	ldr	r2, [r1, #4]
 8000be6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000be8:	6203      	str	r3, [r0, #32]
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
 8000bec:	40012c00 	.word	0x40012c00

08000bf0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000bf0:	6a03      	ldr	r3, [r0, #32]
{
 8000bf2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bf8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bfa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bfc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bfe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000c00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000c02:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000c06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000c0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000c10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000c14:	4d06      	ldr	r5, [pc, #24]	; (8000c30 <TIM_OC4_SetConfig+0x40>)
 8000c16:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c18:	bf02      	ittt	eq
 8000c1a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000c1c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c20:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000c28:	684a      	ldr	r2, [r1, #4]
 8000c2a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c2c:	6203      	str	r3, [r0, #32]
 8000c2e:	bd30      	pop	{r4, r5, pc}
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <TIM_Base_SetConfig+0x64>)
  tmpcr1 = TIMx->CR1;
 8000c36:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	d00a      	beq.n	8000c52 <TIM_Base_SetConfig+0x1e>
 8000c3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c40:	d007      	beq.n	8000c52 <TIM_Base_SetConfig+0x1e>
 8000c42:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c46:	4290      	cmp	r0, r2
 8000c48:	d003      	beq.n	8000c52 <TIM_Base_SetConfig+0x1e>
 8000c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	d115      	bne.n	8000c7e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000c52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c58:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <TIM_Base_SetConfig+0x64>)
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d00a      	beq.n	8000c76 <TIM_Base_SetConfig+0x42>
 8000c60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c64:	d007      	beq.n	8000c76 <TIM_Base_SetConfig+0x42>
 8000c66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d003      	beq.n	8000c76 <TIM_Base_SetConfig+0x42>
 8000c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d103      	bne.n	8000c7e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c76:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000c7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c80:	688b      	ldr	r3, [r1, #8]
 8000c82:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c84:	680b      	ldr	r3, [r1, #0]
 8000c86:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <TIM_Base_SetConfig+0x64>)
 8000c8a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000c8c:	bf04      	itt	eq
 8000c8e:	690b      	ldreq	r3, [r1, #16]
 8000c90:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000c92:	2301      	movs	r3, #1
 8000c94:	6143      	str	r3, [r0, #20]
 8000c96:	4770      	bx	lr
 8000c98:	40012c00 	.word	0x40012c00

08000c9c <HAL_TIM_PWM_Init>:
{
 8000c9c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	b1a0      	cbz	r0, 8000ccc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ca2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000caa:	b91b      	cbnz	r3, 8000cb4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000cac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000cb0:	f000 fb00 	bl	80012b4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000cb4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cb6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000cb8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cbc:	1d21      	adds	r1, r4, #4
 8000cbe:	f7ff ffb9 	bl	8000c34 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000cc2:	2301      	movs	r3, #1
  return HAL_OK;
 8000cc4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000cc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000cca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cd0:	6a03      	ldr	r3, [r0, #32]
{
 8000cd2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cd4:	f023 0310 	bic.w	r3, r3, #16
 8000cd8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000cda:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000cdc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000cde:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000ce0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000ce2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000ce6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8000cea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000cec:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8000cf0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000cf4:	4d0b      	ldr	r5, [pc, #44]	; (8000d24 <TIM_OC2_SetConfig+0x54>)
 8000cf6:	42a8      	cmp	r0, r5
 8000cf8:	d10d      	bne.n	8000d16 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8000cfa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8000d00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d04:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000d06:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000d08:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d0c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d12:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000d16:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d18:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000d1a:	684a      	ldr	r2, [r1, #4]
 8000d1c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000d1e:	6203      	str	r3, [r0, #32]
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	bf00      	nop
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <HAL_TIM_PWM_ConfigChannel>:
{
 8000d28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000d2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000d2e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	f04f 0002 	mov.w	r0, #2
 8000d36:	d025      	beq.n	8000d84 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000d38:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d3a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 8000d3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  switch (Channel)
 8000d42:	2a0c      	cmp	r2, #12
 8000d44:	d818      	bhi.n	8000d78 <HAL_TIM_PWM_ConfigChannel+0x50>
 8000d46:	e8df f002 	tbb	[pc, r2]
 8000d4a:	1707      	.short	0x1707
 8000d4c:	171e1717 	.word	0x171e1717
 8000d50:	172f1717 	.word	0x172f1717
 8000d54:	1717      	.short	0x1717
 8000d56:	40          	.byte	0x40
 8000d57:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d58:	6820      	ldr	r0, [r4, #0]
 8000d5a:	f7ff fef7 	bl	8000b4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d60:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	f042 0208 	orr.w	r2, r2, #8
 8000d68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	f022 0204 	bic.w	r2, r2, #4
 8000d70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d76:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d78:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d7a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000d80:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d86:	6820      	ldr	r0, [r4, #0]
 8000d88:	f7ff ffa2 	bl	8000cd0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d8c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d8e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d90:	699a      	ldr	r2, [r3, #24]
 8000d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000da6:	e7e6      	b.n	8000d76 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	f7ff fef7 	bl	8000b9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000dae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000db0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	f042 0208 	orr.w	r2, r2, #8
 8000db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	f022 0204 	bic.w	r2, r2, #4
 8000dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000dc2:	69da      	ldr	r2, [r3, #28]
 8000dc4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dc6:	61da      	str	r2, [r3, #28]
    break;
 8000dc8:	e7d6      	b.n	8000d78 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000dca:	6820      	ldr	r0, [r4, #0]
 8000dcc:	f7ff ff10 	bl	8000bf0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000dd0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dd2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000ddc:	69da      	ldr	r2, [r3, #28]
 8000dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000de2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000de4:	69da      	ldr	r2, [r3, #28]
 8000de6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dea:	e7ec      	b.n	8000dc6 <HAL_TIM_PWM_ConfigChannel+0x9e>

08000dec <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000dec:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000dee:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000df0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000df2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000df4:	ea23 0304 	bic.w	r3, r3, r4
 8000df8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000dfa:	6a03      	ldr	r3, [r0, #32]
 8000dfc:	408a      	lsls	r2, r1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	6202      	str	r2, [r0, #32]
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <HAL_TIM_PWM_Start>:
{
 8000e04:	b510      	push	{r4, lr}
 8000e06:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6800      	ldr	r0, [r0, #0]
 8000e0c:	f7ff ffee 	bl	8000dec <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_TIM_PWM_Start+0x28>)
}
 8000e14:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000e16:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000e18:	bf02      	ittt	eq
 8000e1a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000e1c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000e20:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
}
 8000e2a:	bd10      	pop	{r4, pc}
 8000e2c:	40012c00 	.word	0x40012c00

08000e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000e30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000e34:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	f04f 0302 	mov.w	r3, #2
 8000e3c:	d016      	beq.n	8000e6c <HAL_TIMEx_ConfigBreakDeadTime+0x3c>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e3e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e42:	e891 0018 	ldmia.w	r1, {r3, r4}
 8000e46:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000e48:	688c      	ldr	r4, [r1, #8]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e4a:	6802      	ldr	r2, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000e4c:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->LockLevel        |
 8000e4e:	68cc      	ldr	r4, [r1, #12]
 8000e50:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->DeadTime         |
 8000e52:	690c      	ldr	r4, [r1, #16]
 8000e54:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakState       |
 8000e56:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000e58:	6989      	ldr	r1, [r1, #24]
                                   sBreakDeadTimeConfig->BreakState       |
 8000e5a:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000e5c:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8000e5e:	6453      	str	r3, [r2, #68]	; 0x44
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000e66:	2300      	movs	r3, #0
 8000e68:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000e6c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8000e74:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f04f 0302 	mov.w	r3, #2
 8000e7c:	d018      	beq.n	8000eb0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e82:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e84:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e86:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e88:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e8e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4322      	orrs	r2, r4
 8000e94:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e9c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000eb0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000eb2:	bd10      	pop	{r4, pc}

08000eb4 <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/* Initializes the CPU, AHB and APB busses clocks */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb4:	2301      	movs	r3, #1
{
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ec0:	2300      	movs	r3, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ec4:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ec6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ecc:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ed0:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f7ff fadf 	bl	8000494 <HAL_RCC_OscConfig>
 8000ed6:	b100      	cbz	r0, 8000eda <SystemClock_Config+0x26>
 8000ed8:	e7fe      	b.n	8000ed8 <SystemClock_Config+0x24>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	/* Initializes the CPU, AHB and APB busses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eee:	f7ff fd73 	bl	80009d8 <HAL_RCC_ClockConfig>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	b100      	cbz	r0, 8000ef8 <SystemClock_Config+0x44>
 8000ef6:	e7fe      	b.n	8000ef6 <SystemClock_Config+0x42>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	/* Configure the Systick interrupt time */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000ef8:	f7ff fe22 	bl	8000b40 <HAL_RCC_GetHCLKFreq>
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f04:	f7ff f9b4 	bl	8000270 <HAL_SYSTICK_Config>

	/* Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f7ff f9c7 	bl	800029c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f0e:	4622      	mov	r2, r4
 8000f10:	4621      	mov	r1, r4
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f7ff f96b 	bl	80001f0 <HAL_NVIC_SetPriority>
}
 8000f1a:	b010      	add	sp, #64	; 0x40
 8000f1c:	bd10      	pop	{r4, pc}
	...

08000f20 <main>:
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
 8000f24:	f7ff f924 	bl	8000170 <HAL_Init>
	SystemClock_Config();
 8000f28:	f7ff ffc4 	bl	8000eb4 <SystemClock_Config>
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4ba1      	ldr	r3, [pc, #644]	; (80011b4 <main+0x294>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000f2e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000f34:	48a0      	ldr	r0, [pc, #640]	; (80011b8 <main+0x298>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	f042 0210 	orr.w	r2, r2, #16
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	699a      	ldr	r2, [r3, #24]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC14 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2401      	movs	r4, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	f002 0210 	and.w	r2, r2, #16
 8000f44:	9200      	str	r2, [sp, #0]
 8000f46:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2502      	movs	r5, #2
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4c:	f042 0220 	orr.w	r2, r2, #32
 8000f50:	619a      	str	r2, [r3, #24]
 8000f52:	699a      	ldr	r2, [r3, #24]
	htim1.Init.Period = 1000;
 8000f54:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	f002 0220 	and.w	r2, r2, #32
 8000f5c:	9201      	str	r2, [sp, #4]
 8000f5e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	f042 0204 	orr.w	r2, r2, #4
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	f002 0204 	and.w	r2, r2, #4
 8000f6e:	9202      	str	r2, [sp, #8]
 8000f70:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	699a      	ldr	r2, [r3, #24]
 8000f74:	f042 0208 	orr.w	r2, r2, #8
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000f7c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	9303      	str	r3, [sp, #12]
 8000f84:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000f86:	f7ff fa7b 	bl	8000480 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	488b      	ldr	r0, [pc, #556]	; (80011bc <main+0x29c>)
 8000f90:	f7ff fa76 	bl	8000480 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000f94:	f44f 4360 	mov.w	r3, #57344	; 0xe000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	a90d      	add	r1, sp, #52	; 0x34
 8000f9a:	4887      	ldr	r0, [pc, #540]	; (80011b8 <main+0x298>)
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000f9c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9510      	str	r5, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f7ff f98d 	bl	80002c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa6:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	a90d      	add	r1, sp, #52	; 0x34
 8000faa:	4884      	ldr	r0, [pc, #528]	; (80011bc <main+0x29c>)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fac:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	9510      	str	r5, [sp, #64]	; 0x40
	htim1.Instance = TIM1;
 8000fb2:	4c83      	ldr	r4, [pc, #524]	; (80011c0 <main+0x2a0>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f7ff f984 	bl	80002c0 <HAL_GPIO_Init>
	htim1.Instance = TIM1;
 8000fb8:	4b82      	ldr	r3, [pc, #520]	; (80011c4 <main+0x2a4>)
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fba:	4620      	mov	r0, r4
	htim1.Init.Prescaler = 2;
 8000fbc:	e884 0028 	stmia.w	r4, {r3, r5}
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	2300      	movs	r3, #0
	htim1.Init.Period = 1000;
 8000fc2:	f8c4 800c 	str.w	r8, [r4, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	60a3      	str	r3, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	6123      	str	r3, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fca:	6163      	str	r3, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fcc:	f7ff fe66 	bl	8000c9c <HAL_TIM_PWM_Init>
 8000fd0:	4626      	mov	r6, r4
 8000fd2:	b100      	cbz	r0, 8000fd6 <main+0xb6>
 8000fd4:	e7fe      	b.n	8000fd4 <main+0xb4>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fda:	a904      	add	r1, sp, #16
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff ff47 	bl	8000e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	b100      	cbz	r0, 8000fe6 <main+0xc6>
 8000fe4:	e7fe      	b.n	8000fe4 <main+0xc4>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.Pulse = 0;
 8000fea:	9007      	str	r0, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	9008      	str	r0, [sp, #32]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fee:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff0:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	900c      	str	r0, [sp, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	a906      	add	r1, sp, #24
 8000ff8:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	f8cd 9018 	str.w	r9, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ffe:	f7ff fe93 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 8001002:	b100      	cbz	r0, 8001006 <main+0xe6>
 8001004:	e7fe      	b.n	8001004 <main+0xe4>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100a:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100e:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8001010:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001012:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001014:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001016:	a90d      	add	r1, sp, #52	; 0x34
 8001018:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101a:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800101c:	f7ff ff08 	bl	8000e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001020:	4607      	mov	r7, r0
 8001022:	b100      	cbz	r0, 8001026 <main+0x106>
 8001024:	e7fe      	b.n	8001024 <main+0x104>
	HAL_TIM_MspPostInit(&htim1);
 8001026:	4620      	mov	r0, r4
 8001028:	f000 f988 	bl	800133c <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	4c65      	ldr	r4, [pc, #404]	; (80011c8 <main+0x2a8>)
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001032:	4620      	mov	r0, r4
	htim2.Init.Period = 1000;
 8001034:	e884 01a8 	stmia.w	r4, {r3, r5, r7, r8}
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	6127      	str	r7, [r4, #16]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800103a:	f7ff fe2f 	bl	8000c9c <HAL_TIM_PWM_Init>
 800103e:	4627      	mov	r7, r4
 8001040:	b100      	cbz	r0, 8001044 <main+0x124>
 8001042:	e7fe      	b.n	8001042 <main+0x122>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001048:	a906      	add	r1, sp, #24
 800104a:	4620      	mov	r0, r4
 800104c:	f7ff ff10 	bl	8000e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	b100      	cbz	r0, 8001054 <main+0x134>
 8001052:	e7fe      	b.n	8001052 <main+0x132>
	sConfigOC.Pulse = 0;
 8001054:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001056:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105a:	2204      	movs	r2, #4
 800105c:	a90d      	add	r1, sp, #52	; 0x34
 800105e:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001060:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001064:	f7ff fe60 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4682      	mov	sl, r0
 800106a:	b100      	cbz	r0, 800106e <main+0x14e>
 800106c:	e7fe      	b.n	800106c <main+0x14c>
	HAL_TIM_MspPostInit(&htim2);
 800106e:	4620      	mov	r0, r4
	htim3.Instance = TIM3;
 8001070:	4c56      	ldr	r4, [pc, #344]	; (80011cc <main+0x2ac>)
	HAL_TIM_MspPostInit(&htim2);
 8001072:	f000 f963 	bl	800133c <HAL_TIM_MspPostInit>
	htim3.Instance = TIM3;
 8001076:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <main+0x2b0>)
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001078:	4620      	mov	r0, r4
	htim3.Init.Period = 1000;
 800107a:	f8c4 800c 	str.w	r8, [r4, #12]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	e884 0428 	stmia.w	r4, {r3, r5, sl}
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	f8c4 a010 	str.w	sl, [r4, #16]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001086:	f7ff fe09 	bl	8000c9c <HAL_TIM_PWM_Init>
 800108a:	46a0      	mov	r8, r4
 800108c:	b100      	cbz	r0, 8001090 <main+0x170>
 800108e:	e7fe      	b.n	800108e <main+0x16e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001094:	a906      	add	r1, sp, #24
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff feea 	bl	8000e70 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	b100      	cbz	r0, 80010a0 <main+0x180>
 800109e:	e7fe      	b.n	800109e <main+0x17e>
	sConfigOC.Pulse = 0;
 80010a0:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a6:	2208      	movs	r2, #8
 80010a8:	a90d      	add	r1, sp, #52	; 0x34
 80010aa:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010b0:	f7ff fe3a 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	b100      	cbz	r0, 80010b8 <main+0x198>
 80010b6:	e7fe      	b.n	80010b6 <main+0x196>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010b8:	220c      	movs	r2, #12
 80010ba:	a90d      	add	r1, sp, #52	; 0x34
 80010bc:	4843      	ldr	r0, [pc, #268]	; (80011cc <main+0x2ac>)
 80010be:	f7ff fe33 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4605      	mov	r5, r0
 80010c4:	b100      	cbz	r0, 80010c8 <main+0x1a8>
 80010c6:	e7fe      	b.n	80010c6 <main+0x1a6>
	HAL_TIM_MspPostInit(&htim3);
 80010c8:	4840      	ldr	r0, [pc, #256]	; (80011cc <main+0x2ac>)
 80010ca:	f000 f937 	bl	800133c <HAL_TIM_MspPostInit>
	htim4.Init.Prescaler = 2;
 80010ce:	2302      	movs	r3, #2
	htim4.Instance = TIM4;
 80010d0:	4c40      	ldr	r4, [pc, #256]	; (80011d4 <main+0x2b4>)
	htim4.Init.Prescaler = 2;
 80010d2:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <main+0x2b8>)
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010d4:	4620      	mov	r0, r4
	htim4.Init.Prescaler = 2;
 80010d6:	e884 000c 	stmia.w	r4, {r2, r3}
	htim4.Init.Period = 1000;
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	60a5      	str	r5, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e0:	6125      	str	r5, [r4, #16]
	htim4.Init.Period = 1000;
 80010e2:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010e4:	f7ff fdda 	bl	8000c9c <HAL_TIM_PWM_Init>
 80010e8:	4625      	mov	r5, r4
 80010ea:	b100      	cbz	r0, 80010ee <main+0x1ce>
 80010ec:	e7fe      	b.n	80010ec <main+0x1cc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010f2:	a906      	add	r1, sp, #24
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff febb 	bl	8000e70 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	b100      	cbz	r0, 80010fe <main+0x1de>
 80010fc:	e7fe      	b.n	80010fc <main+0x1dc>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fe:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 8001100:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001106:	2208      	movs	r2, #8
 8001108:	a90d      	add	r1, sp, #52	; 0x34
 800110a:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110c:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	f7ff fe0b 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 8001112:	b100      	cbz	r0, 8001116 <main+0x1f6>
 8001114:	e7fe      	b.n	8001114 <main+0x1f4>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001116:	220c      	movs	r2, #12
 8001118:	a90d      	add	r1, sp, #52	; 0x34
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fe04 	bl	8000d28 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4681      	mov	r9, r0
 8001122:	b100      	cbz	r0, 8001126 <main+0x206>
 8001124:	e7fe      	b.n	8001124 <main+0x204>
	HAL_TIM_MspPostInit(&htim4);
 8001126:	4620      	mov	r0, r4
 8001128:	f000 f908 	bl	800133c <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800112c:	210c      	movs	r1, #12
 800112e:	4824      	ldr	r0, [pc, #144]	; (80011c0 <main+0x2a0>)
 8001130:	f7ff fe68 	bl	8000e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001134:	2104      	movs	r1, #4
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <main+0x2a8>)
 8001138:	f7ff fe64 	bl	8000e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800113c:	2108      	movs	r1, #8
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <main+0x2ac>)
 8001140:	f7ff fe60 	bl	8000e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001144:	210c      	movs	r1, #12
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <main+0x2ac>)
 8001148:	f7ff fe5c 	bl	8000e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800114c:	2108      	movs	r1, #8
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fe58 	bl	8000e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001154:	4620      	mov	r0, r4
 8001156:	210c      	movs	r1, #12
 8001158:	f7ff fe54 	bl	8000e04 <HAL_TIM_PWM_Start>
		for (pwm = 0; pwm <= 1000; pwm += 50) //darkest to brightest: 0-100% duty cycle
 800115c:	4c1f      	ldr	r4, [pc, #124]	; (80011dc <main+0x2bc>)
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // White D1
 800115e:	f8df a058 	ldr.w	sl, [pc, #88]	; 80011b8 <main+0x298>
		for (pwm = 0; pwm <= 1000; pwm += 50) //darkest to brightest: 0-100% duty cycle
 8001162:	f8c4 9000 	str.w	r9, [r4]
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800116c:	dd38      	ble.n	80011e0 <main+0x2c0>
		HAL_Delay(400);  //hold for 400ms
 800116e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001172:	f7ff f81d 	bl	80001b0 <HAL_Delay>
		for (pwm = 1000; pwm >= 0; pwm -= 50) //brightest to darkest: 100-0% duty cycle
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	6023      	str	r3, [r4, #0]
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da40      	bge.n	8001204 <main+0x2e4>
		HAL_Delay(400);   //hold for 400ms
 8001182:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001186:	f7ff f813 	bl	80001b0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED2 on Nucleo Board
 800118a:	2120      	movs	r1, #32
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <main+0x29c>)
 800118e:	f7ff f97c 	bl	800048a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // White D1
 8001192:	4650      	mov	r0, sl
 8001194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001198:	f7ff f977 	bl	800048a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // Red D2
 800119c:	4650      	mov	r0, sl
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	f7ff f972 	bl	800048a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Blue D3
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	4650      	mov	r0, sl
 80011ac:	f7ff f96d 	bl	800048a <HAL_GPIO_TogglePin>
		for (pwm = 0; pwm <= 1000; pwm += 50) //darkest to brightest: 0-100% duty cycle
 80011b0:	e7d7      	b.n	8001162 <main+0x242>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	200000a0 	.word	0x200000a0
 80011c4:	40012c00 	.word	0x40012c00
 80011c8:	200000dc 	.word	0x200000dc
 80011cc:	20000064 	.word	0x20000064
 80011d0:	40000400 	.word	0x40000400
 80011d4:	20000028 	.word	0x20000028
 80011d8:	40000800 	.word	0x40000800
 80011dc:	20000024 	.word	0x20000024
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 80011e0:	682a      	ldr	r2, [r5, #0]
			HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm); // Motor 2
 80011e6:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm); // Motor 3
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	6393      	str	r3, [r2, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm); // Motor 4
 80011ec:	f8d8 2000 	ldr.w	r2, [r8]
 80011f0:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm); // Motor 5
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, pwm); // Motor 6
 80011f4:	6832      	ldr	r2, [r6, #0]
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
			HAL_Delay(10);
 80011f8:	f7fe ffda 	bl	80001b0 <HAL_Delay>
		for (pwm = 0; pwm <= 1000; pwm += 50) //darkest to brightest: 0-100% duty cycle
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	3332      	adds	r3, #50	; 0x32
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	e7b0      	b.n	8001166 <main+0x246>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 8001204:	682a      	ldr	r2, [r5, #0]
			HAL_Delay(10);
 8001206:	200a      	movs	r0, #10
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm); // Motor 2
 800120a:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm); // Motor 3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm); // Motor 4
 8001210:	f8d8 2000 	ldr.w	r2, [r8]
 8001214:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm); // Motor 5
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, pwm); // Motor 6
 8001218:	6832      	ldr	r2, [r6, #0]
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
			HAL_Delay(10);
 800121c:	f7fe ffc8 	bl	80001b0 <HAL_Delay>
		for (pwm = 1000; pwm >= 0; pwm -= 50) //brightest to darkest: 100-0% duty cycle
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	3b32      	subs	r3, #50	; 0x32
 8001224:	e7a9      	b.n	800117a <main+0x25a>
 8001226:	bf00      	nop

08001228 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_MspInit+0x88>)
{
 800122a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800122c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001230:	f042 0201 	orr.w	r2, r2, #1
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	f7fe ffc4 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	f06f 000b 	mvn.w	r0, #11
 800124a:	4611      	mov	r1, r2
 800124c:	f7fe ffd0 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	f06f 000a 	mvn.w	r0, #10
 8001256:	4611      	mov	r1, r2
 8001258:	f7fe ffca 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	f06f 0009 	mvn.w	r0, #9
 8001262:	4611      	mov	r1, r2
 8001264:	f7fe ffc4 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	f06f 0004 	mvn.w	r0, #4
 800126e:	4611      	mov	r1, r2
 8001270:	f7fe ffbe 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	f06f 0003 	mvn.w	r0, #3
 800127a:	4611      	mov	r1, r2
 800127c:	f7fe ffb8 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f06f 0001 	mvn.w	r0, #1
 8001286:	4611      	mov	r1, r2
 8001288:	f7fe ffb2 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	4611      	mov	r1, r2
 8001294:	f7fe ffac 	bl	80001f0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2005      	movs	r0, #5
 800129c:	4611      	mov	r1, r2
 800129e:	f7fe ffa7 	bl	80001f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012a2:	2005      	movs	r0, #5
 80012a4:	f7fe ffd8 	bl	8000258 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	b003      	add	sp, #12
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_TIM_PWM_MspInit+0x78>)
{
 80012b8:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10b      	bne.n	80012d6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_TIM_PWM_MspInit+0x7c>)
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012d2:	b004      	add	sp, #16
 80012d4:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 80012d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012da:	d10b      	bne.n	80012f4 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	61da      	str	r2, [r3, #28]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9b01      	ldr	r3, [sp, #4]
 80012f2:	e7ee      	b.n	80012d2 <HAL_TIM_PWM_MspInit+0x1e>
  else if(htim_pwm->Instance==TIM3)
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_TIM_PWM_MspInit+0x80>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10a      	bne.n	8001310 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_TIM_PWM_MspInit+0x7c>)
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	f042 0202 	orr.w	r2, r2, #2
 8001302:	61da      	str	r2, [r3, #28]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	9b02      	ldr	r3, [sp, #8]
 800130e:	e7e0      	b.n	80012d2 <HAL_TIM_PWM_MspInit+0x1e>
  else if(htim_pwm->Instance==TIM4)
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_TIM_PWM_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d1dd      	bne.n	80012d2 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_TIM_PWM_MspInit+0x7c>)
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	f042 0204 	orr.w	r2, r2, #4
 800131e:	61da      	str	r2, [r3, #28]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	9303      	str	r3, [sp, #12]
 8001328:	9b03      	ldr	r3, [sp, #12]
}
 800132a:	e7d2      	b.n	80012d2 <HAL_TIM_PWM_MspInit+0x1e>
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40000400 	.word	0x40000400
 8001338:	40000800 	.word	0x40000800

0800133c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800133c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800133e:	6803      	ldr	r3, [r0, #0]
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_TIM_MspPostInit+0x54>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10c      	bne.n	8001360 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	4669      	mov	r1, sp
 8001350:	4810      	ldr	r0, [pc, #64]	; (8001394 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	9303      	str	r3, [sp, #12]
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f7fe ffb3 	bl	80002c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800135a:	b005      	add	sp, #20
 800135c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001364:	d102      	bne.n	800136c <HAL_TIM_MspPostInit+0x30>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001366:	2302      	movs	r3, #2
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	e7f0      	b.n	800134e <HAL_TIM_MspPostInit+0x12>
  else if(htim->Instance==TIM3)
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_TIM_MspPostInit+0x5c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d107      	bne.n	8001382 <HAL_TIM_MspPostInit+0x46>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001372:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001374:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	4669      	mov	r1, sp
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <HAL_TIM_MspPostInit+0x60>)
 8001380:	e7e9      	b.n	8001356 <HAL_TIM_MspPostInit+0x1a>
  else if(htim->Instance==TIM4)
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_TIM_MspPostInit+0x64>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d1e8      	bne.n	800135a <HAL_TIM_MspPostInit+0x1e>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138c:	e7f2      	b.n	8001374 <HAL_TIM_MspPostInit+0x38>
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40010800 	.word	0x40010800
 8001398:	40000400 	.word	0x40000400
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40000800 	.word	0x40000800

080013a4 <NMI_Handler>:
 80013a4:	4770      	bx	lr

080013a6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler>

080013a8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler>

080013aa <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler>

080013ac <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler>

080013ae <SVC_Handler>:
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f7fe feed 	bl	8000194 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013be:	f7fe bf7a 	b.w	80002b6 <HAL_SYSTICK_IRQHandler>

080013c2 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80013c2:	4770      	bx	lr

080013c4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <SystemInit+0x40>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <SystemInit+0x44>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013f0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80013f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <SystemInit+0x48>)
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	f8ff0000 	.word	0xf8ff0000
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001410:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001412:	e003      	b.n	800141c <LoopCopyDataInit>

08001414 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001416:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001418:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800141a:	3104      	adds	r1, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001420:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001424:	d3f6      	bcc.n	8001414 <CopyDataInit>
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001428:	e002      	b.n	8001430 <LoopFillZerobss>

0800142a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800142c:	f842 3b04 	str.w	r3, [r2], #4

08001430 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001434:	d3f9      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001436:	f7ff ffc5 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f000 f80f 	bl	800145c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff fd6f 	bl	8000f20 <main>
  bx lr
 8001442:	4770      	bx	lr
  ldr r3, =_sidata
 8001444:	080014e4 	.word	0x080014e4
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800144c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001450:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001454:	20000118 	.word	0x20000118

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <__libc_init_array>:
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	2500      	movs	r5, #0
 8001460:	4e0c      	ldr	r6, [pc, #48]	; (8001494 <__libc_init_array+0x38>)
 8001462:	4c0d      	ldr	r4, [pc, #52]	; (8001498 <__libc_init_array+0x3c>)
 8001464:	1ba4      	subs	r4, r4, r6
 8001466:	10a4      	asrs	r4, r4, #2
 8001468:	42a5      	cmp	r5, r4
 800146a:	d109      	bne.n	8001480 <__libc_init_array+0x24>
 800146c:	f000 f81a 	bl	80014a4 <_init>
 8001470:	2500      	movs	r5, #0
 8001472:	4e0a      	ldr	r6, [pc, #40]	; (800149c <__libc_init_array+0x40>)
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <__libc_init_array+0x44>)
 8001476:	1ba4      	subs	r4, r4, r6
 8001478:	10a4      	asrs	r4, r4, #2
 800147a:	42a5      	cmp	r5, r4
 800147c:	d105      	bne.n	800148a <__libc_init_array+0x2e>
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001484:	4798      	blx	r3
 8001486:	3501      	adds	r5, #1
 8001488:	e7ee      	b.n	8001468 <__libc_init_array+0xc>
 800148a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800148e:	4798      	blx	r3
 8001490:	3501      	adds	r5, #1
 8001492:	e7f2      	b.n	800147a <__libc_init_array+0x1e>
 8001494:	080014dc 	.word	0x080014dc
 8001498:	080014dc 	.word	0x080014dc
 800149c:	080014dc 	.word	0x080014dc
 80014a0:	080014e0 	.word	0x080014e0

080014a4 <_init>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr

080014b0 <_fini>:
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	bf00      	nop
 80014b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b6:	bc08      	pop	{r3}
 80014b8:	469e      	mov	lr, r3
 80014ba:	4770      	bx	lr
