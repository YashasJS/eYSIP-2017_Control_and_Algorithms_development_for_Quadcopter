
C:\eYSIP-2017\Code\I2C-UART\Debug\I2C-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080014e4  080014e4  000114e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800151c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  08001520  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  08001520  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f7c9  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000208b  00000000  00000000  0002f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bdf  00000000  00000000  00031881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000628  00000000  00000000  00036460  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b08  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047b3  00000000  00000000  00037590  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002499  00000000  00000000  0003bd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e1dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001148  00000000  00000000  0003e258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080014cc 	.word	0x080014cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080014cc 	.word	0x080014cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b510      	push	{r4, lr}
 800015e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000160:	f000 fd60 	bl	8000c24 <HAL_RCC_GetHCLKFreq>
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb0 f0f3 	udiv	r0, r0, r3
 800016c:	f000 f888 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000170:	2200      	movs	r2, #0
 8000172:	4621      	mov	r1, r4
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}

08000180 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000180:	4a07      	ldr	r2, [pc, #28]	; (80001a0 <HAL_Init+0x20>)
{
 8000182:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000184:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018e:	f000 f825 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000192:	2000      	movs	r0, #0
 8000194:	f7ff ffe2 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 8000198:	f001 f876 	bl	8001288 <HAL_MspInit>
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd08      	pop	{r3, pc}
 80001a0:	40022000 	.word	0x40022000

080001a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001a4:	4a02      	ldr	r2, [pc, #8]	; (80001b0 <HAL_IncTick+0xc>)
 80001a6:	6813      	ldr	r3, [r2, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000020 	.word	0x20000020

080001b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001b4:	4b01      	ldr	r3, [pc, #4]	; (80001bc <HAL_GetTick+0x8>)
 80001b6:	6818      	ldr	r0, [r3, #0]
}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000020 	.word	0x20000020

080001c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001c0:	b513      	push	{r0, r1, r4, lr}
 80001c2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001c4:	f7ff fff6 	bl	80001b4 <HAL_GetTick>
 80001c8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ca:	f7ff fff3 	bl	80001b4 <HAL_GetTick>
 80001ce:	9b01      	ldr	r3, [sp, #4]
 80001d0:	1b00      	subs	r0, r0, r4
 80001d2:	4298      	cmp	r0, r3
 80001d4:	d3f9      	bcc.n	80001ca <HAL_Delay+0xa>
  {
  }
}
 80001d6:	b002      	add	sp, #8
 80001d8:	bd10      	pop	{r4, pc}
	...

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003ba:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003c8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003d6:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000490:	b10a      	cbz	r2, 8000496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000492:	6101      	str	r1, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	e7fb      	b.n	8000492 <HAL_GPIO_WritePin+0x2>

0800049a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800049a:	68c3      	ldr	r3, [r0, #12]
 800049c:	4059      	eors	r1, r3
 800049e:	60c1      	str	r1, [r0, #12]
 80004a0:	4770      	bx	lr
	...

080004a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80004a6:	4604      	mov	r4, r0
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d05f      	beq.n	800056c <HAL_I2C_Init+0xc8>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80004ac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80004b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004b4:	b91b      	cbnz	r3, 80004be <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004b6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80004ba:	f000 ff23 	bl	8001304 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004be:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004c0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 80004c6:	6813      	ldr	r3, [r2, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004c8:	4e29      	ldr	r6, [pc, #164]	; (8000570 <HAL_I2C_Init+0xcc>)
  __HAL_I2C_DISABLE(hi2c);
 80004ca:	f023 0301 	bic.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80004d0:	f000 fbae 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004d4:	6863      	ldr	r3, [r4, #4]
  freqrange = I2C_FREQ_RANGE(pclk1);
 80004d6:	4d27      	ldr	r5, [pc, #156]	; (8000574 <HAL_I2C_Init+0xd0>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004d8:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQ_RANGE(pclk1);
 80004da:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004de:	bf88      	it	hi
 80004e0:	f44f 7196 	movhi.w	r1, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 80004e4:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004e6:	bf88      	it	hi
 80004e8:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80004ea:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004ec:	bf85      	ittet	hi
 80004ee:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80004f2:	fbb1 f1f5 	udivhi	r1, r1, r5
 80004f6:	1c69      	addls	r1, r5, #1
 80004f8:	3101      	addhi	r1, #1
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
  uint32_t tmp1 = 0;
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80004fa:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004fc:	6211      	str	r1, [r2, #32]
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80004fe:	d820      	bhi.n	8000542 <HAL_I2C_Init+0x9e>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	fbb0 f0f3 	udiv	r0, r0, r3
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 8000506:	f3c0 030b 	ubfx	r3, r0, #0, #12
    {
      return 4;
 800050a:	2b03      	cmp	r3, #3
 800050c:	bf98      	it	ls
 800050e:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000510:	6a21      	ldr	r1, [r4, #32]
 8000512:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 8000514:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000516:	430b      	orrs	r3, r1
 8000518:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800051a:	68e1      	ldr	r1, [r4, #12]
 800051c:	6923      	ldr	r3, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800051e:	2000      	movs	r0, #0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000520:	430b      	orrs	r3, r1
 8000522:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000524:	69a1      	ldr	r1, [r4, #24]
 8000526:	6963      	ldr	r3, [r4, #20]
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800052c:	6813      	ldr	r3, [r2, #0]
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000534:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000536:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8000538:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800053c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  return HAL_OK;
 8000540:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 8000542:	68a1      	ldr	r1, [r4, #8]
 8000544:	b959      	cbnz	r1, 800055e <HAL_I2C_Init+0xba>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8000546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800054a:	fbb0 f0f3 	udiv	r0, r0, r3
 800054e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 8000552:	f3c0 030b 	ubfx	r3, r0, #0, #12
    {
      return 1;
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf08      	it	eq
 800055a:	2001      	moveq	r0, #1
 800055c:	e7d8      	b.n	8000510 <HAL_I2C_Init+0x6c>
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 800055e:	2119      	movs	r1, #25
 8000560:	434b      	muls	r3, r1
 8000562:	fbb0 f0f3 	udiv	r0, r0, r3
 8000566:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800056a:	e7f2      	b.n	8000552 <HAL_I2C_Init+0xae>
    return HAL_ERROR;
 800056c:	2001      	movs	r0, #1
}
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	000186a0 	.word	0x000186a0
 8000574:	000f4240 	.word	0x000f4240

08000578 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000578:	6803      	ldr	r3, [r0, #0]
{
 800057a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057e:	07de      	lsls	r6, r3, #31
{
 8000580:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000582:	d434      	bmi.n	80005ee <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	079c      	lsls	r4, r3, #30
 8000588:	f100 80a7 	bmi.w	80006da <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800058c:	682b      	ldr	r3, [r5, #0]
 800058e:	071a      	lsls	r2, r3, #28
 8000590:	d523      	bpl.n	80005da <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000592:	69aa      	ldr	r2, [r5, #24]
 8000594:	4cbe      	ldr	r4, [pc, #760]	; (8000890 <HAL_RCC_OscConfig+0x318>)
 8000596:	2301      	movs	r3, #1
 8000598:	49be      	ldr	r1, [pc, #760]	; (8000894 <HAL_RCC_OscConfig+0x31c>)
 800059a:	2a00      	cmp	r2, #0
 800059c:	f000 8115 	beq.w	80007ca <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005a0:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80005a4:	fab2 f282 	clz	r2, r2
 80005a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80005ac:	f7ff fe02 	bl	80001b4 <HAL_GetTick>
 80005b0:	2602      	movs	r6, #2
 80005b2:	4607      	mov	r7, r0
 80005b4:	fa96 f3a6 	rbit	r3, r6
 80005b8:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005be:	fa96 f3a6 	rbit	r3, r6
 80005c2:	fab3 f383 	clz	r3, r3
 80005c6:	f003 031f 	and.w	r3, r3, #31
 80005ca:	fa22 f303 	lsr.w	r3, r2, r3
 80005ce:	07db      	lsls	r3, r3, #31
 80005d0:	f140 80f4 	bpl.w	80007bc <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff fdf3 	bl	80001c0 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005da:	682b      	ldr	r3, [r5, #0]
 80005dc:	0759      	lsls	r1, r3, #29
 80005de:	f100 8114 	bmi.w	800080a <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005e2:	69ea      	ldr	r2, [r5, #28]
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	f040 8193 	bne.w	8000910 <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005ea:	2000      	movs	r0, #0
 80005ec:	e020      	b.n	8000630 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ee:	4ca8      	ldr	r4, [pc, #672]	; (8000890 <HAL_RCC_OscConfig+0x318>)
 80005f0:	6863      	ldr	r3, [r4, #4]
 80005f2:	f003 030c 	and.w	r3, r3, #12
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d007      	beq.n	800060a <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	f003 030c 	and.w	r3, r3, #12
 8000600:	2b08      	cmp	r3, #8
 8000602:	d118      	bne.n	8000636 <HAL_RCC_OscConfig+0xbe>
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	03d8      	lsls	r0, r3, #15
 8000608:	d515      	bpl.n	8000636 <HAL_RCC_OscConfig+0xbe>
 800060a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800060e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000612:	6822      	ldr	r2, [r4, #0]
 8000614:	fa93 f3a3 	rbit	r3, r3
 8000618:	fab3 f383 	clz	r3, r3
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	fa22 f303 	lsr.w	r3, r2, r3
 8000624:	07d9      	lsls	r1, r3, #31
 8000626:	d5ad      	bpl.n	8000584 <HAL_RCC_OscConfig+0xc>
 8000628:	686b      	ldr	r3, [r5, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1aa      	bne.n	8000584 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800062e:	2001      	movs	r0, #1
}
 8000630:	b003      	add	sp, #12
 8000632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000636:	686b      	ldr	r3, [r5, #4]
 8000638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063c:	d11c      	bne.n	8000678 <HAL_RCC_OscConfig+0x100>
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000644:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000646:	f7ff fdb5 	bl	80001b4 <HAL_GetTick>
 800064a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800064e:	4607      	mov	r7, r0
 8000650:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000654:	6822      	ldr	r2, [r4, #0]
 8000656:	fa96 f3a6 	rbit	r3, r6
 800065a:	fab3 f383 	clz	r3, r3
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	fa22 f303 	lsr.w	r3, r2, r3
 8000666:	07da      	lsls	r2, r3, #31
 8000668:	d48c      	bmi.n	8000584 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800066a:	f7ff fda3 	bl	80001b4 <HAL_GetTick>
 800066e:	1bc0      	subs	r0, r0, r7
 8000670:	2864      	cmp	r0, #100	; 0x64
 8000672:	d9ed      	bls.n	8000650 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000674:	2003      	movs	r0, #3
 8000676:	e7db      	b.n	8000630 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000678:	bb03      	cbnz	r3, 80006bc <HAL_RCC_OscConfig+0x144>
 800067a:	6823      	ldr	r3, [r4, #0]
 800067c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000684:	6023      	str	r3, [r4, #0]
 8000686:	6823      	ldr	r3, [r4, #0]
 8000688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800068e:	f7ff fd91 	bl	80001b4 <HAL_GetTick>
 8000692:	4607      	mov	r7, r0
 8000694:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000698:	6822      	ldr	r2, [r4, #0]
 800069a:	fa96 f3a6 	rbit	r3, r6
 800069e:	fab3 f383 	clz	r3, r3
 80006a2:	f003 031f 	and.w	r3, r3, #31
 80006a6:	fa22 f303 	lsr.w	r3, r2, r3
 80006aa:	07db      	lsls	r3, r3, #31
 80006ac:	f57f af6a 	bpl.w	8000584 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b0:	f7ff fd80 	bl	80001b4 <HAL_GetTick>
 80006b4:	1bc0      	subs	r0, r0, r7
 80006b6:	2864      	cmp	r0, #100	; 0x64
 80006b8:	d9ec      	bls.n	8000694 <HAL_RCC_OscConfig+0x11c>
 80006ba:	e7db      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	d103      	bne.n	80006cc <HAL_RCC_OscConfig+0x154>
 80006c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c8:	6023      	str	r3, [r4, #0]
 80006ca:	e7b8      	b.n	800063e <HAL_RCC_OscConfig+0xc6>
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d0:	6023      	str	r3, [r4, #0]
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d8:	e7b4      	b.n	8000644 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006da:	4c6d      	ldr	r4, [pc, #436]	; (8000890 <HAL_RCC_OscConfig+0x318>)
 80006dc:	6863      	ldr	r3, [r4, #4]
 80006de:	f013 0f0c 	tst.w	r3, #12
 80006e2:	d007      	beq.n	80006f4 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006e4:	6863      	ldr	r3, [r4, #4]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	d120      	bne.n	8000730 <HAL_RCC_OscConfig+0x1b8>
 80006ee:	6863      	ldr	r3, [r4, #4]
 80006f0:	03df      	lsls	r7, r3, #15
 80006f2:	d41d      	bmi.n	8000730 <HAL_RCC_OscConfig+0x1b8>
 80006f4:	2302      	movs	r3, #2
 80006f6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006fa:	6822      	ldr	r2, [r4, #0]
 80006fc:	fa93 f3a3 	rbit	r3, r3
 8000700:	fab3 f383 	clz	r3, r3
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	fa22 f303 	lsr.w	r3, r2, r3
 800070c:	07de      	lsls	r6, r3, #31
 800070e:	d502      	bpl.n	8000716 <HAL_RCC_OscConfig+0x19e>
 8000710:	692b      	ldr	r3, [r5, #16]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d18b      	bne.n	800062e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000716:	6821      	ldr	r1, [r4, #0]
 8000718:	23f8      	movs	r3, #248	; 0xf8
 800071a:	fa93 f3a3 	rbit	r3, r3
 800071e:	fab3 f283 	clz	r2, r3
 8000722:	696b      	ldr	r3, [r5, #20]
 8000724:	4093      	lsls	r3, r2
 8000726:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800072a:	4313      	orrs	r3, r2
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	e72d      	b.n	800058c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000730:	692a      	ldr	r2, [r5, #16]
 8000732:	2301      	movs	r3, #1
 8000734:	b302      	cbz	r2, 8000778 <HAL_RCC_OscConfig+0x200>
 8000736:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	0092      	lsls	r2, r2, #2
 8000740:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000744:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000748:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800074a:	f7ff fd33 	bl	80001b4 <HAL_GetTick>
 800074e:	2602      	movs	r6, #2
 8000750:	4607      	mov	r7, r0
 8000752:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000756:	6822      	ldr	r2, [r4, #0]
 8000758:	fa96 f3a6 	rbit	r3, r6
 800075c:	fab3 f383 	clz	r3, r3
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	07d8      	lsls	r0, r3, #31
 800076a:	d4d4      	bmi.n	8000716 <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fd22 	bl	80001b4 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9ed      	bls.n	8000752 <HAL_RCC_OscConfig+0x1da>
 8000776:	e77d      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 8000778:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800077c:	fab3 f383 	clz	r3, r3
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000786:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800078a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800078c:	f7ff fd12 	bl	80001b4 <HAL_GetTick>
 8000790:	2602      	movs	r6, #2
 8000792:	4607      	mov	r7, r0
 8000794:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000798:	6822      	ldr	r2, [r4, #0]
 800079a:	fa96 f3a6 	rbit	r3, r6
 800079e:	fab3 f383 	clz	r3, r3
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	fa22 f303 	lsr.w	r3, r2, r3
 80007aa:	07d9      	lsls	r1, r3, #31
 80007ac:	f57f aeee 	bpl.w	800058c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007b0:	f7ff fd00 	bl	80001b4 <HAL_GetTick>
 80007b4:	1bc0      	subs	r0, r0, r7
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d9ec      	bls.n	8000794 <HAL_RCC_OscConfig+0x21c>
 80007ba:	e75b      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007bc:	f7ff fcfa 	bl	80001b4 <HAL_GetTick>
 80007c0:	1bc0      	subs	r0, r0, r7
 80007c2:	2802      	cmp	r0, #2
 80007c4:	f67f aef6 	bls.w	80005b4 <HAL_RCC_OscConfig+0x3c>
 80007c8:	e754      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 80007ca:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80007d6:	f7ff fced 	bl	80001b4 <HAL_GetTick>
 80007da:	2602      	movs	r6, #2
 80007dc:	4607      	mov	r7, r0
 80007de:	fa96 f3a6 	rbit	r3, r6
 80007e2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e8:	fa96 f3a6 	rbit	r3, r6
 80007ec:	fab3 f383 	clz	r3, r3
 80007f0:	f003 031f 	and.w	r3, r3, #31
 80007f4:	fa22 f303 	lsr.w	r3, r2, r3
 80007f8:	07d8      	lsls	r0, r3, #31
 80007fa:	f57f aeee 	bpl.w	80005da <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007fe:	f7ff fcd9 	bl	80001b4 <HAL_GetTick>
 8000802:	1bc0      	subs	r0, r0, r7
 8000804:	2802      	cmp	r0, #2
 8000806:	d9ea      	bls.n	80007de <HAL_RCC_OscConfig+0x266>
 8000808:	e734      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4c21      	ldr	r4, [pc, #132]	; (8000890 <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800080c:	4e22      	ldr	r6, [pc, #136]	; (8000898 <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	69e3      	ldr	r3, [r4, #28]
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61e3      	str	r3, [r4, #28]
 8000816:	69e3      	ldr	r3, [r4, #28]
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000820:	6833      	ldr	r3, [r6, #0]
 8000822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000826:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000828:	f7ff fcc4 	bl	80001b4 <HAL_GetTick>
 800082c:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800082e:	6833      	ldr	r3, [r6, #0]
 8000830:	05da      	lsls	r2, r3, #23
 8000832:	d526      	bpl.n	8000882 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000834:	68eb      	ldr	r3, [r5, #12]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d130      	bne.n	800089c <HAL_RCC_OscConfig+0x324>
 800083a:	6a23      	ldr	r3, [r4, #32]
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000842:	f7ff fcb7 	bl	80001b4 <HAL_GetTick>
 8000846:	2602      	movs	r6, #2
 8000848:	4681      	mov	r9, r0
 800084a:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800084c:	f241 3788 	movw	r7, #5000	; 0x1388
 8000850:	fa96 f3a6 	rbit	r3, r6
 8000854:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000858:	2b00      	cmp	r3, #0
 800085a:	d055      	beq.n	8000908 <HAL_RCC_OscConfig+0x390>
 800085c:	6a22      	ldr	r2, [r4, #32]
 800085e:	fa98 f3a8 	rbit	r3, r8
 8000862:	fab3 f383 	clz	r3, r3
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	fa22 f303 	lsr.w	r3, r2, r3
 800086e:	07db      	lsls	r3, r3, #31
 8000870:	f53f aeb7 	bmi.w	80005e2 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000874:	f7ff fc9e 	bl	80001b4 <HAL_GetTick>
 8000878:	eba0 0009 	sub.w	r0, r0, r9
 800087c:	42b8      	cmp	r0, r7
 800087e:	d9e7      	bls.n	8000850 <HAL_RCC_OscConfig+0x2d8>
 8000880:	e6f8      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000882:	f7ff fc97 	bl	80001b4 <HAL_GetTick>
 8000886:	1bc0      	subs	r0, r0, r7
 8000888:	2864      	cmp	r0, #100	; 0x64
 800088a:	d9d0      	bls.n	800082e <HAL_RCC_OscConfig+0x2b6>
 800088c:	e6f2      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	42420480 	.word	0x42420480
 8000898:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089c:	bb33      	cbnz	r3, 80008ec <HAL_RCC_OscConfig+0x374>
 800089e:	6a23      	ldr	r3, [r4, #32]
 80008a0:	2602      	movs	r6, #2
 80008a2:	f023 0301 	bic.w	r3, r3, #1
 80008a6:	6223      	str	r3, [r4, #32]
 80008a8:	6a23      	ldr	r3, [r4, #32]
 80008aa:	4637      	mov	r7, r6
 80008ac:	f023 0304 	bic.w	r3, r3, #4
 80008b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008b2:	f7ff fc7f 	bl	80001b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008ba:	4680      	mov	r8, r0
 80008bc:	fa96 f3a6 	rbit	r3, r6
 80008c0:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c4:	b313      	cbz	r3, 800090c <HAL_RCC_OscConfig+0x394>
 80008c6:	6a22      	ldr	r2, [r4, #32]
 80008c8:	fa97 f3a7 	rbit	r3, r7
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	07d8      	lsls	r0, r3, #31
 80008da:	f57f ae82 	bpl.w	80005e2 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008de:	f7ff fc69 	bl	80001b4 <HAL_GetTick>
 80008e2:	eba0 0008 	sub.w	r0, r0, r8
 80008e6:	4548      	cmp	r0, r9
 80008e8:	d9e8      	bls.n	80008bc <HAL_RCC_OscConfig+0x344>
 80008ea:	e6c3      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	6a23      	ldr	r3, [r4, #32]
 80008f0:	d103      	bne.n	80008fa <HAL_RCC_OscConfig+0x382>
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6223      	str	r3, [r4, #32]
 80008f8:	e79f      	b.n	800083a <HAL_RCC_OscConfig+0x2c2>
 80008fa:	f023 0301 	bic.w	r3, r3, #1
 80008fe:	6223      	str	r3, [r4, #32]
 8000900:	6a23      	ldr	r3, [r4, #32]
 8000902:	f023 0304 	bic.w	r3, r3, #4
 8000906:	e79b      	b.n	8000840 <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000908:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800090a:	e7a8      	b.n	800085e <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800090e:	e7db      	b.n	80008c8 <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000910:	4c44      	ldr	r4, [pc, #272]	; (8000a24 <HAL_RCC_OscConfig+0x4ac>)
 8000912:	6863      	ldr	r3, [r4, #4]
 8000914:	f003 030c 	and.w	r3, r3, #12
 8000918:	2b08      	cmp	r3, #8
 800091a:	f43f ae88 	beq.w	800062e <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800091e:	2a02      	cmp	r2, #2
 8000920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000924:	d159      	bne.n	80009da <HAL_RCC_OscConfig+0x462>
 8000926:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	2200      	movs	r2, #0
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000936:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800093a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800093c:	f7ff fc3a 	bl	80001b4 <HAL_GetTick>
 8000940:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000944:	4607      	mov	r7, r0
 8000946:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	fa96 f3a6 	rbit	r3, r6
 8000950:	fab3 f383 	clz	r3, r3
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	fa22 f303 	lsr.w	r3, r2, r3
 800095c:	07d9      	lsls	r1, r3, #31
 800095e:	d436      	bmi.n	80009ce <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000960:	6a2b      	ldr	r3, [r5, #32]
 8000962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000966:	d105      	bne.n	8000974 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000968:	6862      	ldr	r2, [r4, #4]
 800096a:	68a9      	ldr	r1, [r5, #8]
 800096c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000970:	430a      	orrs	r2, r1
 8000972:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000974:	6862      	ldr	r2, [r4, #4]
 8000976:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000978:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800097c:	430b      	orrs	r3, r1
 800097e:	4313      	orrs	r3, r2
 8000980:	6063      	str	r3, [r4, #4]
 8000982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000986:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	2201      	movs	r2, #1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000996:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800099a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800099c:	f7ff fc0a 	bl	80001b4 <HAL_GetTick>
 80009a0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009a4:	4606      	mov	r6, r0
 80009a6:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009aa:	6822      	ldr	r2, [r4, #0]
 80009ac:	fa95 f3a5 	rbit	r3, r5
 80009b0:	fab3 f383 	clz	r3, r3
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	fa22 f303 	lsr.w	r3, r2, r3
 80009bc:	07da      	lsls	r2, r3, #31
 80009be:	f53f ae14 	bmi.w	80005ea <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c2:	f7ff fbf7 	bl	80001b4 <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9ec      	bls.n	80009a6 <HAL_RCC_OscConfig+0x42e>
 80009cc:	e652      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ce:	f7ff fbf1 	bl	80001b4 <HAL_GetTick>
 80009d2:	1bc0      	subs	r0, r0, r7
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9b6      	bls.n	8000946 <HAL_RCC_OscConfig+0x3ce>
 80009d8:	e64c      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 80009da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009ea:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fbe0 	bl	80001b4 <HAL_GetTick>
 80009f4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009f8:	4606      	mov	r6, r0
 80009fa:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009fe:	6822      	ldr	r2, [r4, #0]
 8000a00:	fa95 f3a5 	rbit	r3, r5
 8000a04:	fab3 f383 	clz	r3, r3
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	07db      	lsls	r3, r3, #31
 8000a12:	f57f adea 	bpl.w	80005ea <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a16:	f7ff fbcd 	bl	80001b4 <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d9ec      	bls.n	80009fa <HAL_RCC_OscConfig+0x482>
 8000a20:	e628      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a28:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a2c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a2e:	ac02      	add	r4, sp, #8
 8000a30:	f103 0510 	add.w	r5, r3, #16
 8000a34:	4622      	mov	r2, r4
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	6859      	ldr	r1, [r3, #4]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	c203      	stmia	r2!, {r0, r1}
 8000a3e:	42ab      	cmp	r3, r5
 8000a40:	4614      	mov	r4, r2
 8000a42:	d1f7      	bne.n	8000a34 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000a44:	2301      	movs	r3, #1
 8000a46:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a4a:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000a4c:	4c18      	ldr	r4, [pc, #96]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x88>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000a4e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a52:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a54:	f001 030c 	and.w	r3, r1, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d124      	bne.n	8000aa6 <HAL_RCC_GetSysClockFreq+0x7e>
 8000a5c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a60:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000a64:	fab3 f283 	clz	r2, r3
 8000a68:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8000a6c:	40d3      	lsrs	r3, r2
 8000a6e:	aa06      	add	r2, sp, #24
 8000a70:	4413      	add	r3, r2
 8000a72:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a76:	03cb      	lsls	r3, r1, #15
 8000a78:	d513      	bpl.n	8000aa2 <HAL_RCC_GetSysClockFreq+0x7a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000a7a:	6863      	ldr	r3, [r4, #4]
 8000a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a80:	fa92 f2a2 	rbit	r2, r2
 8000a84:	fab2 f282 	clz	r2, r2
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	40d3      	lsrs	r3, r2
 8000a8e:	aa06      	add	r2, sp, #24
 8000a90:	4413      	add	r3, r2
 8000a92:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a98:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a9c:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a9e:	b007      	add	sp, #28
 8000aa0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x90>)
 8000aa4:	e7fa      	b.n	8000a9c <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x8c>)
  return sysclockfreq;
 8000aa8:	e7f9      	b.n	8000a9e <HAL_RCC_GetSysClockFreq+0x76>
 8000aaa:	bf00      	nop
 8000aac:	080014e4 	.word	0x080014e4
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	007a1200 	.word	0x007a1200
 8000ab8:	003d0900 	.word	0x003d0900

08000abc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000abc:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <HAL_RCC_ClockConfig+0x158>)
{
 8000abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac2:	6813      	ldr	r3, [r2, #0]
{
 8000ac4:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	428b      	cmp	r3, r1
{
 8000acc:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ace:	d330      	bcc.n	8000b32 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad0:	6832      	ldr	r2, [r6, #0]
 8000ad2:	0794      	lsls	r4, r2, #30
 8000ad4:	d43a      	bmi.n	8000b4c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ad6:	07d0      	lsls	r0, r2, #31
 8000ad8:	d440      	bmi.n	8000b5c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <HAL_RCC_ClockConfig+0x158>)
 8000adc:	6813      	ldr	r3, [r2, #0]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	429d      	cmp	r5, r3
 8000ae4:	f0c0 8084 	bcc.w	8000bf0 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ae8:	6832      	ldr	r2, [r6, #0]
 8000aea:	4c4b      	ldr	r4, [pc, #300]	; (8000c18 <HAL_RCC_ClockConfig+0x15c>)
 8000aec:	f012 0f04 	tst.w	r2, #4
 8000af0:	f040 8089 	bne.w	8000c06 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af4:	0713      	lsls	r3, r2, #28
 8000af6:	d506      	bpl.n	8000b06 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000af8:	6863      	ldr	r3, [r4, #4]
 8000afa:	6932      	ldr	r2, [r6, #16]
 8000afc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b04:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b06:	f7ff ff8f 	bl	8000a28 <HAL_RCC_GetSysClockFreq>
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	22f0      	movs	r2, #240	; 0xf0
 8000b0e:	fa92 f2a2 	rbit	r2, r2
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	4a3f      	ldr	r2, [pc, #252]	; (8000c1c <HAL_RCC_ClockConfig+0x160>)
 8000b1e:	5cd3      	ldrb	r3, [r2, r3]
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <HAL_RCC_ClockConfig+0x164>)
 8000b24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fb18 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000b2c:	2000      	movs	r0, #0
}
 8000b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0307 	bic.w	r3, r3, #7
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b3c:	6813      	ldr	r3, [r2, #0]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d0c4      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000b46:	2001      	movs	r0, #1
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b4c:	4932      	ldr	r1, [pc, #200]	; (8000c18 <HAL_RCC_ClockConfig+0x15c>)
 8000b4e:	68b0      	ldr	r0, [r6, #8]
 8000b50:	684b      	ldr	r3, [r1, #4]
 8000b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b56:	4303      	orrs	r3, r0
 8000b58:	604b      	str	r3, [r1, #4]
 8000b5a:	e7bc      	b.n	8000ad6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b5c:	6872      	ldr	r2, [r6, #4]
 8000b5e:	4c2e      	ldr	r4, [pc, #184]	; (8000c18 <HAL_RCC_ClockConfig+0x15c>)
 8000b60:	2a01      	cmp	r2, #1
 8000b62:	d128      	bne.n	8000bb6 <HAL_RCC_ClockConfig+0xfa>
 8000b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b68:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	fa93 f3a3 	rbit	r3, r3
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	f003 031f 	and.w	r3, r3, #31
 8000b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000b7e:	07d9      	lsls	r1, r3, #31
 8000b80:	d5e1      	bpl.n	8000b46 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b82:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b84:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b88:	f023 0303 	bic.w	r3, r3, #3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b90:	f7ff fb10 	bl	80001b4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b94:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b96:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d112      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d099      	beq.n	8000ada <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba6:	f7ff fb05 	bl	80001b4 <HAL_GetTick>
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	4540      	cmp	r0, r8
 8000bae:	d9f5      	bls.n	8000b9c <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb6:	2a02      	cmp	r2, #2
 8000bb8:	bf0c      	ite	eq
 8000bba:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bbe:	2302      	movne	r3, #2
 8000bc0:	e7d2      	b.n	8000b68 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d10f      	bne.n	8000be6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bc6:	6863      	ldr	r3, [r4, #4]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d084      	beq.n	8000ada <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd0:	f7ff faf0 	bl	80001b4 <HAL_GetTick>
 8000bd4:	1bc0      	subs	r0, r0, r7
 8000bd6:	4540      	cmp	r0, r8
 8000bd8:	d9f5      	bls.n	8000bc6 <HAL_RCC_ClockConfig+0x10a>
 8000bda:	e7e9      	b.n	8000bb0 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bdc:	f7ff faea 	bl	80001b4 <HAL_GetTick>
 8000be0:	1bc0      	subs	r0, r0, r7
 8000be2:	4540      	cmp	r0, r8
 8000be4:	d8e4      	bhi.n	8000bb0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	f013 0f0c 	tst.w	r3, #12
 8000bec:	d1f6      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x120>
 8000bee:	e774      	b.n	8000ada <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	f023 0307 	bic.w	r3, r3, #7
 8000bf6:	432b      	orrs	r3, r5
 8000bf8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	429d      	cmp	r5, r3
 8000c02:	d1a0      	bne.n	8000b46 <HAL_RCC_ClockConfig+0x8a>
 8000c04:	e770      	b.n	8000ae8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	68f1      	ldr	r1, [r6, #12]
 8000c0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	6063      	str	r3, [r4, #4]
 8000c12:	e76f      	b.n	8000af4 <HAL_RCC_ClockConfig+0x38>
 8000c14:	40022000 	.word	0x40022000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	080014fc 	.word	0x080014fc
 8000c20:	20000000 	.word	0x20000000

08000c24 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c24:	4b01      	ldr	r3, [pc, #4]	; (8000c2c <HAL_RCC_GetHCLKFreq+0x8>)
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000

08000c30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	fa92 f2a2 	rbit	r2, r2
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c44:	40d3      	lsrs	r3, r2
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000c4c:	6810      	ldr	r0, [r2, #0]
}    
 8000c4e:	40d8      	lsrs	r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	0800150c 	.word	0x0800150c
 8000c5c:	20000000 	.word	0x20000000

08000c60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	fa92 f2a2 	rbit	r2, r2
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c74:	40d3      	lsrs	r3, r2
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c7c:	6810      	ldr	r0, [r2, #0]
} 
 8000c7e:	40d8      	lsrs	r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	0800150c 	.word	0x0800150c
 8000c8c:	20000000 	.word	0x20000000

08000c90 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c94:	6805      	ldr	r5, [r0, #0]
 8000c96:	68c2      	ldr	r2, [r0, #12]
 8000c98:	692b      	ldr	r3, [r5, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8000c9a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8000ca4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ca6:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000cac:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000cb0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8000cb4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cba:	696b      	ldr	r3, [r5, #20]
 8000cbc:	6982      	ldr	r2, [r0, #24]
 8000cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	616b      	str	r3, [r5, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <UART_SetConfig+0x138>)
{
 8000cc8:	4681      	mov	r9, r0
  if((huart->Instance == USART1))
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	f04f 0419 	mov.w	r4, #25
 8000cd0:	d146      	bne.n	8000d60 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000cd2:	f7ff ffc5 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
 8000cd6:	fb04 f300 	mul.w	r3, r4, r0
 8000cda:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000cde:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ce2:	00b6      	lsls	r6, r6, #2
 8000ce4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ce8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cec:	011e      	lsls	r6, r3, #4
 8000cee:	f7ff ffb7 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
 8000cf2:	4360      	muls	r0, r4
 8000cf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	fbb0 f7f3 	udiv	r7, r0, r3
 8000cfe:	f7ff ffaf 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
 8000d02:	4360      	muls	r0, r4
 8000d04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d12:	fb08 7313 	mls	r3, r8, r3, r7
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	3332      	adds	r3, #50	; 0x32
 8000d1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d1e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d22:	f7ff ff9d 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
 8000d26:	4360      	muls	r0, r4
 8000d28:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	fbb0 faf2 	udiv	sl, r0, r2
 8000d32:	f7ff ff95 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d36:	4360      	muls	r0, r4
 8000d38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d42:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d46:	fb08 a313 	mls	r3, r8, r3, sl
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	3332      	adds	r3, #50	; 0x32
 8000d4e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	433b      	orrs	r3, r7
 8000d58:	4433      	add	r3, r6
 8000d5a:	60ab      	str	r3, [r5, #8]
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	f7ff ff66 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
 8000d64:	fb04 f300 	mul.w	r3, r4, r0
 8000d68:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d6c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d70:	00b6      	lsls	r6, r6, #2
 8000d72:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d76:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d7a:	011e      	lsls	r6, r3, #4
 8000d7c:	f7ff ff58 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
 8000d80:	4360      	muls	r0, r4
 8000d82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d8c:	f7ff ff50 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
 8000d90:	4360      	muls	r0, r4
 8000d92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d9c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000da0:	fb08 7313 	mls	r3, r8, r3, r7
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	3332      	adds	r3, #50	; 0x32
 8000da8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dac:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000db0:	f7ff ff3e 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
 8000db4:	4360      	muls	r0, r4
 8000db6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	fbb0 faf2 	udiv	sl, r0, r2
 8000dc0:	f7ff ff36 	bl	8000c30 <HAL_RCC_GetPCLK1Freq>
 8000dc4:	e7b7      	b.n	8000d36 <UART_SetConfig+0xa6>
 8000dc6:	bf00      	nop
 8000dc8:	40013800 	.word	0x40013800

08000dcc <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	4604      	mov	r4, r0
 8000dd0:	460e      	mov	r6, r1
 8000dd2:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8000dd4:	f7ff f9ee 	bl	80001b4 <HAL_GetTick>
 8000dd8:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	6813      	ldr	r3, [r2, #0]
 8000dde:	ea36 0303 	bics.w	r3, r6, r3
 8000de2:	d101      	bne.n	8000de8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8000de4:	2000      	movs	r0, #0
}
 8000de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8000de8:	1c6b      	adds	r3, r5, #1
 8000dea:	d0f7      	beq.n	8000ddc <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000dec:	b9c5      	cbnz	r5, 8000e20 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000dee:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	f022 0220 	bic.w	r2, r2, #32
 8000e00:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e08:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e20:	f7ff f9c8 	bl	80001b4 <HAL_GetTick>
 8000e24:	1bc0      	subs	r0, r0, r7
 8000e26:	4285      	cmp	r5, r0
 8000e28:	d2d7      	bcs.n	8000dda <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8000e2a:	e7e0      	b.n	8000dee <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08000e2c <HAL_UART_Init>:
{
 8000e2c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b330      	cbz	r0, 8000e80 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8000e32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3a:	b91b      	cbnz	r3, 8000e44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000e3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000e40:	f000 fa82 	bl	8001348 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8000e44:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8000e46:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8000e48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000e4c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e54:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000e56:	f7ff ff1b 	bl	8000c90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e5a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e5c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e6c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e74:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8000e76:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8000e7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000e7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
}
 8000e82:	bd10      	pop	{r4, pc}

08000e84 <HAL_UART_Transmit>:
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8000e88:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8000e8c:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8000e8e:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8000e90:	2901      	cmp	r1, #1
{
 8000e92:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_Transmit+0x16>
 8000e96:	2922      	cmp	r1, #34	; 0x22
 8000e98:	d14d      	bne.n	8000f36 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d049      	beq.n	8000f32 <HAL_UART_Transmit+0xae>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d047      	beq.n	8000f32 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8000ea2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d045      	beq.n	8000f36 <HAL_UART_Transmit+0xb2>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8000eb4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8000eb8:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8000eba:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8000ec0:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8000ec2:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8000ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8000ec8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000eca:	b98a      	cbnz	r2, 8000ef0 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8000ecc:	4632      	mov	r2, r6
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f7ff ff7b 	bl	8000dcc <UART_WaitOnFlagUntilTimeout.constprop.1>
 8000ed6:	b9c0      	cbnz	r0, 8000f0a <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8000ed8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8000edc:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8000ede:	bf0c      	ite	eq
 8000ee0:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ef0:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8000ef2:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8000ef8:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000efa:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000efe:	4632      	mov	r2, r6
 8000f00:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f02:	d10d      	bne.n	8000f20 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f04:	f7ff ff62 	bl	8000dcc <UART_WaitOnFlagUntilTimeout.constprop.1>
 8000f08:	b108      	cbz	r0, 8000f0e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000f0e:	882b      	ldrh	r3, [r5, #0]
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f16:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000f18:	6923      	ldr	r3, [r4, #16]
 8000f1a:	b943      	cbnz	r3, 8000f2e <HAL_UART_Transmit+0xaa>
          pData +=2;
 8000f1c:	3502      	adds	r5, #2
 8000f1e:	e7d3      	b.n	8000ec8 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f20:	f7ff ff54 	bl	8000dcc <UART_WaitOnFlagUntilTimeout.constprop.1>
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	782a      	ldrb	r2, [r5, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	3501      	adds	r5, #1
 8000f30:	e7ca      	b.n	8000ec8 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8000f36:	2002      	movs	r0, #2
}
 8000f38:	bd70      	pop	{r4, r5, r6, pc}

08000f3a <HAL_UART_TxCpltCallback>:
 8000f3a:	4770      	bx	lr

08000f3c <HAL_UART_RxCpltCallback>:
 8000f3c:	4770      	bx	lr

08000f3e <HAL_UART_ErrorCallback>:
{
 8000f3e:	4770      	bx	lr

08000f40 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8000f40:	6802      	ldr	r2, [r0, #0]
{
 8000f42:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8000f44:	6811      	ldr	r1, [r2, #0]
{
 8000f46:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f48:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8000f4a:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f4c:	d505      	bpl.n	8000f5a <HAL_UART_IRQHandler+0x1a>
 8000f4e:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000f50:	bf42      	ittt	mi
 8000f52:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8000f54:	f043 0301 	orrmi.w	r3, r3, #1
 8000f58:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8000f5a:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8000f5c:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f5e:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8000f60:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f64:	d504      	bpl.n	8000f70 <HAL_UART_IRQHandler+0x30>
 8000f66:	b11b      	cbz	r3, 8000f70 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000f68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f6a:	f041 0104 	orr.w	r1, r1, #4
 8000f6e:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8000f70:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f72:	0749      	lsls	r1, r1, #29
 8000f74:	d504      	bpl.n	8000f80 <HAL_UART_IRQHandler+0x40>
 8000f76:	b11b      	cbz	r3, 8000f80 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000f78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f7a:	f041 0102 	orr.w	r1, r1, #2
 8000f7e:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8000f80:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f82:	0708      	lsls	r0, r1, #28
 8000f84:	d504      	bpl.n	8000f90 <HAL_UART_IRQHandler+0x50>
 8000f86:	b11b      	cbz	r3, 8000f90 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000f88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8000f90:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8000f92:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8000f94:	0689      	lsls	r1, r1, #26
 8000f96:	d533      	bpl.n	8001000 <HAL_UART_IRQHandler+0xc0>
 8000f98:	0698      	lsls	r0, r3, #26
 8000f9a:	d531      	bpl.n	8001000 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8000f9c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8000fa0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000fa4:	2b22      	cmp	r3, #34	; 0x22
 8000fa6:	d12b      	bne.n	8001000 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000fa8:	68a3      	ldr	r3, [r4, #8]
 8000faa:	6921      	ldr	r1, [r4, #16]
 8000fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb2:	d176      	bne.n	80010a2 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000fb4:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000fb6:	2900      	cmp	r1, #0
 8000fb8:	d16f      	bne.n	800109a <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fbe:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8000fc2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8000fc4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8000fcc:	b9c3      	cbnz	r3, 8001000 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000fce:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8000fd0:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	f022 0220 	bic.w	r2, r2, #32
 8000fd8:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8000fda:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000fde:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000fe0:	bf17      	itett	ne
 8000fe2:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8000fe4:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000fe6:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8000fea:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000fec:	bf1f      	itttt	ne
 8000fee:	695a      	ldrne	r2, [r3, #20]
 8000ff0:	f022 0201 	bicne.w	r2, r2, #1
 8000ff4:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8000ffc:	f7ff ff9e 	bl	8000f3c <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001004:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001006:	0609      	lsls	r1, r1, #24
 8001008:	d522      	bpl.n	8001050 <HAL_UART_IRQHandler+0x110>
 800100a:	0610      	lsls	r0, r2, #24
 800100c:	d520      	bpl.n	8001050 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 800100e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001012:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001016:	2a12      	cmp	r2, #18
 8001018:	d11a      	bne.n	8001050 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800101a:	68a2      	ldr	r2, [r4, #8]
 800101c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001020:	6a22      	ldr	r2, [r4, #32]
 8001022:	d14c      	bne.n	80010be <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001024:	8811      	ldrh	r1, [r2, #0]
 8001026:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800102a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800102c:	6921      	ldr	r1, [r4, #16]
 800102e:	2900      	cmp	r1, #0
 8001030:	d143      	bne.n	80010ba <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8001032:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8001034:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8001036:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001038:	3a01      	subs	r2, #1
 800103a:	b292      	uxth	r2, r2
 800103c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800103e:	b93a      	cbnz	r2, 8001050 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001046:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800104e:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001050:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001052:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001054:	0649      	lsls	r1, r1, #25
 8001056:	d510      	bpl.n	800107a <HAL_UART_IRQHandler+0x13a>
 8001058:	0652      	lsls	r2, r2, #25
 800105a:	d50e      	bpl.n	800107a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800105c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800105e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001064:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001066:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800106a:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 800106c:	bf0c      	ite	eq
 800106e:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8001070:	2301      	movne	r3, #1
 8001072:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001076:	f7ff ff60 	bl	8000f3a <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800107a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800107c:	b15b      	cbz	r3, 8001096 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 800107e:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8001080:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	9201      	str	r2, [sp, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 800108c:	2301      	movs	r3, #1
 800108e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8001092:	f7ff ff54 	bl	8000f3e <HAL_UART_ErrorCallback>
}
 8001096:	b002      	add	sp, #8
 8001098:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	f823 2b01 	strh.w	r2, [r3], #1
 80010a0:	e78f      	b.n	8000fc2 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80010a2:	b921      	cbnz	r1, 80010ae <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	6852      	ldr	r2, [r2, #4]
 80010a8:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e78a      	b.n	8000fc4 <HAL_UART_IRQHandler+0x84>
 80010ae:	6852      	ldr	r2, [r2, #4]
 80010b0:	1c59      	adds	r1, r3, #1
 80010b2:	62a1      	str	r1, [r4, #40]	; 0x28
 80010b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b8:	e7f7      	b.n	80010aa <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80010ba:	3201      	adds	r2, #1
 80010bc:	e7ba      	b.n	8001034 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80010be:	1c51      	adds	r1, r2, #1
 80010c0:	6221      	str	r1, [r4, #32]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	e7b6      	b.n	8001036 <HAL_UART_IRQHandler+0xf6>

080010c8 <main>:
	Peripherals_Init();
	//IMU_Init();
}

int main(void)
{
 80010c8:	b508      	push	{r3, lr}
	Peripherals_Init();
 80010ca:	f000 f8b9 	bl	8001240 <Peripherals_Init>
	setup();
	while (1)
	{
		//IMU_Update();
		printString("Hello!\n");
 80010ce:	4c04      	ldr	r4, [pc, #16]	; (80010e0 <main+0x18>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 f8c3 	bl	800125c <printString>

		//MPU9250_ReadAccelData();
		/*MPU9250_ReadGyroData();
		AK8963_ReadData();*/
		HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f7ff f872 	bl	80001c0 <HAL_Delay>
 80010dc:	e7f8      	b.n	80010d0 <main+0x8>
 80010de:	bf00      	nop
 80010e0:	080014f4 	.word	0x080014f4

080010e4 <_Error_Handler.constprop.3>:

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}

void _Error_Handler(char * file, int line)
 80010e4:	b508      	push	{r3, lr}
{
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010e6:	4c04      	ldr	r4, [pc, #16]	; (80010f8 <_Error_Handler.constprop.3+0x14>)
 80010e8:	4620      	mov	r0, r4
 80010ea:	2120      	movs	r1, #32
 80010ec:	f7ff f9d5 	bl	800049a <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80010f0:	20c8      	movs	r0, #200	; 0xc8
 80010f2:	f7ff f865 	bl	80001c0 <HAL_Delay>
 80010f6:	e7f7      	b.n	80010e8 <_Error_Handler.constprop.3+0x4>
 80010f8:	40010800 	.word	0x40010800

080010fc <SystemClock_Config>:
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
{
 80010fe:	b510      	push	{r4, lr}
 8001100:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001108:	2300      	movs	r3, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110a:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800110c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800110e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001118:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f7ff fa2d 	bl	8000578 <HAL_RCC_OscConfig>
 800111e:	b108      	cbz	r0, 8001124 <SystemClock_Config+0x28>
		_Error_Handler(__FILE__, __LINE__);
 8001120:	f7ff ffe0 	bl	80010e4 <_Error_Handler.constprop.3>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001130:	4621      	mov	r1, r4
 8001132:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001138:	f7ff fcc0 	bl	8000abc <HAL_RCC_ClockConfig>
 800113c:	4604      	mov	r4, r0
 800113e:	2800      	cmp	r0, #0
 8001140:	d1ee      	bne.n	8001120 <SystemClock_Config+0x24>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001142:	f7ff fd6f 	bl	8000c24 <HAL_RCC_GetHCLKFreq>
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb0 f0f3 	udiv	r0, r0, r3
 800114e:	f7ff f897 	bl	8000280 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001152:	2004      	movs	r0, #4
 8001154:	f7ff f8aa 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001158:	4622      	mov	r2, r4
 800115a:	4621      	mov	r1, r4
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff f84e 	bl	8000200 <HAL_NVIC_SetPriority>
}
 8001164:	b010      	add	sp, #64	; 0x40
 8001166:	bd10      	pop	{r4, pc}

08001168 <MX_I2C1_Init>:
{
 8001168:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_I2C1_Init+0x30>)
	hi2c1.Init.ClockSpeed = 400000;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_I2C1_Init+0x34>)
 800116e:	f8df e030 	ldr.w	lr, [pc, #48]	; 80011a0 <MX_I2C1_Init+0x38>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 400000;
 8001176:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117a:	2300      	movs	r3, #0
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117e:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001180:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001182:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001184:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001186:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	f7ff f98b 	bl	80004a4 <HAL_I2C_Init>
 800118e:	b108      	cbz	r0, 8001194 <MX_I2C1_Init+0x2c>
		_Error_Handler(__FILE__, __LINE__);
 8001190:	f7ff ffa8 	bl	80010e4 <_Error_Handler.constprop.3>
 8001194:	bd08      	pop	{r3, pc}
 8001196:	bf00      	nop
 8001198:	20000024 	.word	0x20000024
 800119c:	40005400 	.word	0x40005400
 80011a0:	00061a80 	.word	0x00061a80

080011a4 <MX_USART2_UART_Init>:
{
 80011a4:	b508      	push	{r3, lr}
	huart2.Init.BaudRate = 9600;
 80011a6:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
	huart2.Instance = USART2;
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_USART2_UART_Init+0x2c>)
	huart2.Init.BaudRate = 9600;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x30>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011ae:	220c      	movs	r2, #12
	huart2.Init.BaudRate = 9600;
 80011b0:	e880 4008 	stmia.w	r0, {r3, lr}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b4:	2300      	movs	r3, #0
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011b6:	6142      	str	r2, [r0, #20]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b8:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011ba:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011bc:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	f7ff fe33 	bl	8000e2c <HAL_UART_Init>
 80011c6:	b108      	cbz	r0, 80011cc <MX_USART2_UART_Init+0x28>
		_Error_Handler(__FILE__, __LINE__);
 80011c8:	f7ff ff8c 	bl	80010e4 <_Error_Handler.constprop.3>
 80011cc:	bd08      	pop	{r3, pc}
 80011ce:	bf00      	nop
 80011d0:	20000060 	.word	0x20000060
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_GPIO_Init>:
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_GPIO_Init+0x60>)
{
 80011da:	b510      	push	{r4, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	699a      	ldr	r2, [r3, #24]
{
 80011de:	b088      	sub	sp, #32
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e0:	f042 0220 	orr.w	r2, r2, #32
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011e8:	4c14      	ldr	r4, [pc, #80]	; (800123c <MX_GPIO_Init+0x64>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	f002 0220 	and.w	r2, r2, #32
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011f4:	4620      	mov	r0, r4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	f042 0204 	orr.w	r2, r2, #4
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011fe:	2120      	movs	r1, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	f002 0204 	and.w	r2, r2, #4
 8001204:	9202      	str	r2, [sp, #8]
 8001206:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	f042 0208 	orr.w	r2, r2, #8
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	9303      	str	r3, [sp, #12]
 800121a:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800121c:	f7ff f938 	bl	8000490 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001220:	2320      	movs	r3, #32
 8001222:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	a904      	add	r1, sp, #16
 800122c:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f7ff f84e 	bl	80002d0 <HAL_GPIO_Init>
}
 8001234:	b008      	add	sp, #32
 8001236:	bd10      	pop	{r4, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <Peripherals_Init>:
{
 8001240:	b508      	push	{r3, lr}
	HAL_Init();
 8001242:	f7fe ff9d 	bl	8000180 <HAL_Init>
	SystemClock_Config();
 8001246:	f7ff ff59 	bl	80010fc <SystemClock_Config>
	MX_GPIO_Init();
 800124a:	f7ff ffc5 	bl	80011d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800124e:	f7ff ff8b 	bl	8001168 <MX_I2C1_Init>
}
 8001252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_USART2_UART_Init();
 8001256:	f7ff bfa5 	b.w	80011a4 <MX_USART2_UART_Init>
	...

0800125c <printString>:
	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer_tx, 1, 100);
	//HAL_Delay(10);
}

void printString(char* str)
{
 800125c:	b510      	push	{r4, lr}
	sprintf(buffer_tx, "%s", str);
 800125e:	4c08      	ldr	r4, [pc, #32]	; (8001280 <printString+0x24>)
 8001260:	4601      	mov	r1, r0
 8001262:	4620      	mov	r0, r4
 8001264:	f000 f92a 	bl	80014bc <strcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer_tx, strlen(buffer_tx), 100);
 8001268:	4620      	mov	r0, r4
 800126a:	f7fe ff6f 	bl	800014c <strlen>
 800126e:	4621      	mov	r1, r4
	//HAL_Delay(10);
}
 8001270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer_tx, strlen(buffer_tx), 100);
 8001274:	b282      	uxth	r2, r0
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <printString+0x28>)
 800127a:	f7ff be03 	b.w	8000e84 <HAL_UART_Transmit>
 800127e:	bf00      	nop
 8001280:	200000a0 	.word	0x200000a0
 8001284:	20000060 	.word	0x20000060

08001288 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_MspInit+0x78>)
{
 800128a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800128c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	619a      	str	r2, [r3, #24]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	f7fe ff9c 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f06f 000b 	mvn.w	r0, #11
 80012aa:	4611      	mov	r1, r2
 80012ac:	f7fe ffa8 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f06f 000a 	mvn.w	r0, #10
 80012b6:	4611      	mov	r1, r2
 80012b8:	f7fe ffa2 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	f06f 0009 	mvn.w	r0, #9
 80012c2:	4611      	mov	r1, r2
 80012c4:	f7fe ff9c 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f06f 0004 	mvn.w	r0, #4
 80012ce:	4611      	mov	r1, r2
 80012d0:	f7fe ff96 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f06f 0003 	mvn.w	r0, #3
 80012da:	4611      	mov	r1, r2
 80012dc:	f7fe ff90 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f06f 0001 	mvn.w	r0, #1
 80012e6:	4611      	mov	r1, r2
 80012e8:	f7fe ff8a 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
 80012f2:	4611      	mov	r1, r2
 80012f4:	f7fe ff84 	bl	8000200 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f8:	b003      	add	sp, #12
 80012fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001306:	6802      	ldr	r2, [r0, #0]
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_I2C_MspInit+0x38>)
 800130a:	429a      	cmp	r2, r3
 800130c:	d113      	bne.n	8001336 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;//|GPIO_PIN_10|GPIO_PIN_11;
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001312:	2312      	movs	r3, #18
 8001314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001316:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	a902      	add	r1, sp, #8
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f7fe ffd7 	bl	80002d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0x40>)
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800132a:	61da      	str	r2, [r3, #28]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001336:	b007      	add	sp, #28
 8001338:	f85d fb04 	ldr.w	pc, [sp], #4
 800133c:	40005400 	.word	0x40005400
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800134a:	6802      	ldr	r2, [r0, #0]
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_UART_MspInit+0x60>)
{
 800134e:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8001350:	429a      	cmp	r2, r3
 8001352:	d126      	bne.n	80013a2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001354:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001358:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001360:	61da      	str	r2, [r3, #28]
 8001362:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136e:	2304      	movs	r3, #4
 8001370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f7fe ffa9 	bl	80002d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2400      	movs	r4, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	eb0d 0103 	add.w	r1, sp, r3
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001388:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f7fe ff9f 	bl	80002d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001392:	2026      	movs	r0, #38	; 0x26
 8001394:	4622      	mov	r2, r4
 8001396:	4621      	mov	r1, r4
 8001398:	f7fe ff32 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800139c:	2026      	movs	r0, #38	; 0x26
 800139e:	f7fe ff63 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a2:	b006      	add	sp, #24
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40010800 	.word	0x40010800

080013b0 <NMI_Handler>:
 80013b0:	4770      	bx	lr

080013b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler>

080013b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler>

080013b6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler>

080013b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler>

080013ba <SVC_Handler>:
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f7fe feef 	bl	80001a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013ca:	f7fe bf7c 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>
	...

080013d0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d0:	4801      	ldr	r0, [pc, #4]	; (80013d8 <USART2_IRQHandler+0x8>)
 80013d2:	f7ff bdb5 	b.w	8000f40 <HAL_UART_IRQHandler>
 80013d6:	bf00      	nop
 80013d8:	20000060 	.word	0x20000060

080013dc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <SystemInit+0x40>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <SystemInit+0x44>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013f8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001400:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001408:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800140a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800140e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <SystemInit+0x48>)
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	f8ff0000 	.word	0xf8ff0000
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001428:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800142a:	e003      	b.n	8001434 <LoopCopyDataInit>

0800142c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800142e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001430:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001432:	3104      	adds	r1, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001438:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800143a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800143c:	d3f6      	bcc.n	800142c <CopyDataInit>
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001440:	e002      	b.n	8001448 <LoopFillZerobss>

08001442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001444:	f842 3b04 	str.w	r3, [r2], #4

08001448 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800144c:	d3f9      	bcc.n	8001442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800144e:	f7ff ffc5 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f000 f80f 	bl	8001474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001456:	f7ff fe37 	bl	80010c8 <main>
  bx lr
 800145a:	4770      	bx	lr
  ldr r3, =_sidata
 800145c:	0800151c 	.word	0x0800151c
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001464:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001468:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800146c:	20000104 	.word	0x20000104

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>
	...

08001474 <__libc_init_array>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	2500      	movs	r5, #0
 8001478:	4e0c      	ldr	r6, [pc, #48]	; (80014ac <__libc_init_array+0x38>)
 800147a:	4c0d      	ldr	r4, [pc, #52]	; (80014b0 <__libc_init_array+0x3c>)
 800147c:	1ba4      	subs	r4, r4, r6
 800147e:	10a4      	asrs	r4, r4, #2
 8001480:	42a5      	cmp	r5, r4
 8001482:	d109      	bne.n	8001498 <__libc_init_array+0x24>
 8001484:	f000 f822 	bl	80014cc <_init>
 8001488:	2500      	movs	r5, #0
 800148a:	4e0a      	ldr	r6, [pc, #40]	; (80014b4 <__libc_init_array+0x40>)
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <__libc_init_array+0x44>)
 800148e:	1ba4      	subs	r4, r4, r6
 8001490:	10a4      	asrs	r4, r4, #2
 8001492:	42a5      	cmp	r5, r4
 8001494:	d105      	bne.n	80014a2 <__libc_init_array+0x2e>
 8001496:	bd70      	pop	{r4, r5, r6, pc}
 8001498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800149c:	4798      	blx	r3
 800149e:	3501      	adds	r5, #1
 80014a0:	e7ee      	b.n	8001480 <__libc_init_array+0xc>
 80014a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a6:	4798      	blx	r3
 80014a8:	3501      	adds	r5, #1
 80014aa:	e7f2      	b.n	8001492 <__libc_init_array+0x1e>
 80014ac:	08001514 	.word	0x08001514
 80014b0:	08001514 	.word	0x08001514
 80014b4:	08001514 	.word	0x08001514
 80014b8:	08001518 	.word	0x08001518

080014bc <strcpy>:
 80014bc:	4603      	mov	r3, r0
 80014be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014c2:	f803 2b01 	strb.w	r2, [r3], #1
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d1f9      	bne.n	80014be <strcpy+0x2>
 80014ca:	4770      	bx	lr

080014cc <_init>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr

080014d8 <_fini>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr
