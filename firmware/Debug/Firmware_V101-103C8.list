
C:\eYSIP-2017\Code\Firmware_V101-103C8\Debug\Firmware_V101-103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007534  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007648  08007648  00017648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000228  20000000  080077b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014f4  20000228  080079d8  00020228  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000171c  080079d8  0002171c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002032d  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004533  00000000  00000000  0004057e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a70f  00000000  00000000  00044ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d38  00000000  00000000  0004f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001418  00000000  00000000  0004fef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000088d9  00000000  00000000  00051310  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c8e  00000000  00000000  00059be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005e877  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003180  00000000  00000000  0005e8f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800762c 	.word	0x0800762c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800762c 	.word	0x0800762c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2f>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a38:	bf24      	itt	cs
 8000a3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_d2f+0x30>
 8000a44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a58:	bf08      	it	eq
 8000a5a:	f020 0001 	biceq.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a64:	d121      	bne.n	8000aaa <__aeabi_d2f+0x7a>
 8000a66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6a:	bfbc      	itt	lt
 8000a6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	4770      	bxlt	lr
 8000a72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7a:	f1c2 0218 	rsb	r2, r2, #24
 8000a7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a86:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	f040 0001 	orrne.w	r0, r0, #1
 8000a90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a9c:	ea40 000c 	orr.w	r0, r0, ip
 8000aa0:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa8:	e7cc      	b.n	8000a44 <__aeabi_d2f+0x14>
 8000aaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aae:	d107      	bne.n	8000ac0 <__aeabi_d2f+0x90>
 8000ab0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab4:	bf1e      	ittt	ne
 8000ab6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000abe:	4770      	bxne	lr
 8000ac0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_frsub>:
 8000ad0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	e002      	b.n	8000adc <__addsf3>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_fsub>:
 8000ad8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000adc <__addsf3>:
 8000adc:	0042      	lsls	r2, r0, #1
 8000ade:	bf1f      	itttt	ne
 8000ae0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae4:	ea92 0f03 	teqne	r2, r3
 8000ae8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af0:	d06a      	beq.n	8000bc8 <__addsf3+0xec>
 8000af2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000afa:	bfc1      	itttt	gt
 8000afc:	18d2      	addgt	r2, r2, r3
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	4048      	eorgt	r0, r1
 8000b02:	4041      	eorgt	r1, r0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	2b19      	cmp	r3, #25
 8000b0a:	bf88      	it	hi
 8000b0c:	4770      	bxhi	lr
 8000b0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b2a:	bf18      	it	ne
 8000b2c:	4249      	negne	r1, r1
 8000b2e:	ea92 0f03 	teq	r2, r3
 8000b32:	d03f      	beq.n	8000bb4 <__addsf3+0xd8>
 8000b34:	f1a2 0201 	sub.w	r2, r2, #1
 8000b38:	fa41 fc03 	asr.w	ip, r1, r3
 8000b3c:	eb10 000c 	adds.w	r0, r0, ip
 8000b40:	f1c3 0320 	rsb	r3, r3, #32
 8000b44:	fa01 f103 	lsl.w	r1, r1, r3
 8000b48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4c:	d502      	bpl.n	8000b54 <__addsf3+0x78>
 8000b4e:	4249      	negs	r1, r1
 8000b50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b58:	d313      	bcc.n	8000b82 <__addsf3+0xa6>
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d306      	bcc.n	8000b6e <__addsf3+0x92>
 8000b60:	0840      	lsrs	r0, r0, #1
 8000b62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b66:	f102 0201 	add.w	r2, r2, #1
 8000b6a:	2afe      	cmp	r2, #254	; 0xfe
 8000b6c:	d251      	bcs.n	8000c12 <__addsf3+0x136>
 8000b6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b76:	bf08      	it	eq
 8000b78:	f020 0001 	biceq.w	r0, r0, #1
 8000b7c:	ea40 0003 	orr.w	r0, r0, r3
 8000b80:	4770      	bx	lr
 8000b82:	0049      	lsls	r1, r1, #1
 8000b84:	eb40 0000 	adc.w	r0, r0, r0
 8000b88:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	d1ed      	bne.n	8000b6e <__addsf3+0x92>
 8000b92:	fab0 fc80 	clz	ip, r0
 8000b96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ba2:	bfaa      	itet	ge
 8000ba4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba8:	4252      	neglt	r2, r2
 8000baa:	4318      	orrge	r0, r3
 8000bac:	bfbc      	itt	lt
 8000bae:	40d0      	lsrlt	r0, r2
 8000bb0:	4318      	orrlt	r0, r3
 8000bb2:	4770      	bx	lr
 8000bb4:	f092 0f00 	teq	r2, #0
 8000bb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bbc:	bf06      	itte	eq
 8000bbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bc2:	3201      	addeq	r2, #1
 8000bc4:	3b01      	subne	r3, #1
 8000bc6:	e7b5      	b.n	8000b34 <__addsf3+0x58>
 8000bc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	bf18      	it	ne
 8000bd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd6:	d021      	beq.n	8000c1c <__addsf3+0x140>
 8000bd8:	ea92 0f03 	teq	r2, r3
 8000bdc:	d004      	beq.n	8000be8 <__addsf3+0x10c>
 8000bde:	f092 0f00 	teq	r2, #0
 8000be2:	bf08      	it	eq
 8000be4:	4608      	moveq	r0, r1
 8000be6:	4770      	bx	lr
 8000be8:	ea90 0f01 	teq	r0, r1
 8000bec:	bf1c      	itt	ne
 8000bee:	2000      	movne	r0, #0
 8000bf0:	4770      	bxne	lr
 8000bf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf6:	d104      	bne.n	8000c02 <__addsf3+0x126>
 8000bf8:	0040      	lsls	r0, r0, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c00:	4770      	bx	lr
 8000c02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c06:	bf3c      	itt	cc
 8000c08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bxcc	lr
 8000c0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1a:	4770      	bx	lr
 8000c1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c20:	bf16      	itet	ne
 8000c22:	4608      	movne	r0, r1
 8000c24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c28:	4601      	movne	r1, r0
 8000c2a:	0242      	lsls	r2, r0, #9
 8000c2c:	bf06      	itte	eq
 8000c2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c32:	ea90 0f01 	teqeq	r0, r1
 8000c36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_ui2f>:
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e004      	b.n	8000c4c <__aeabi_i2f+0x8>
 8000c42:	bf00      	nop

08000c44 <__aeabi_i2f>:
 8000c44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	bf48      	it	mi
 8000c4a:	4240      	negmi	r0, r0
 8000c4c:	ea5f 0c00 	movs.w	ip, r0
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c58:	4601      	mov	r1, r0
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	e01c      	b.n	8000c9a <__aeabi_l2f+0x2a>

08000c60 <__aeabi_ul2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e00a      	b.n	8000c84 <__aeabi_l2f+0x14>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_l2f>:
 8000c70:	ea50 0201 	orrs.w	r2, r0, r1
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__aeabi_l2f+0x14>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	ea5f 0c01 	movs.w	ip, r1
 8000c88:	bf02      	ittt	eq
 8000c8a:	4684      	moveq	ip, r0
 8000c8c:	4601      	moveq	r1, r0
 8000c8e:	2000      	moveq	r0, #0
 8000c90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c94:	bf08      	it	eq
 8000c96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9e:	fabc f28c 	clz	r2, ip
 8000ca2:	3a08      	subs	r2, #8
 8000ca4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca8:	db10      	blt.n	8000ccc <__aeabi_l2f+0x5c>
 8000caa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f102 0220 	add.w	r2, r2, #32
 8000cd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cdc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cea:	4770      	bx	lr

08000cec <__aeabi_fmul>:
 8000cec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf4:	bf1e      	ittt	ne
 8000cf6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfa:	ea92 0f0c 	teqne	r2, ip
 8000cfe:	ea93 0f0c 	teqne	r3, ip
 8000d02:	d06f      	beq.n	8000de4 <__aeabi_fmul+0xf8>
 8000d04:	441a      	add	r2, r3
 8000d06:	ea80 0c01 	eor.w	ip, r0, r1
 8000d0a:	0240      	lsls	r0, r0, #9
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d12:	d01e      	beq.n	8000d52 <__aeabi_fmul+0x66>
 8000d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d20:	fba0 3101 	umull	r3, r1, r0, r1
 8000d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d2c:	bf3e      	ittt	cc
 8000d2e:	0049      	lslcc	r1, r1, #1
 8000d30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d34:	005b      	lslcc	r3, r3, #1
 8000d36:	ea40 0001 	orr.w	r0, r0, r1
 8000d3a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d3e:	2afd      	cmp	r2, #253	; 0xfd
 8000d40:	d81d      	bhi.n	8000d7e <__aeabi_fmul+0x92>
 8000d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	4770      	bx	lr
 8000d52:	f090 0f00 	teq	r0, #0
 8000d56:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5a:	bf08      	it	eq
 8000d5c:	0249      	lsleq	r1, r1, #9
 8000d5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d66:	3a7f      	subs	r2, #127	; 0x7f
 8000d68:	bfc2      	ittt	gt
 8000d6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d72:	4770      	bxgt	lr
 8000d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	dc5d      	bgt.n	8000e3c <__aeabi_fmul+0x150>
 8000d80:	f112 0f19 	cmn.w	r2, #25
 8000d84:	bfdc      	itt	le
 8000d86:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d8a:	4770      	bxle	lr
 8000d8c:	f1c2 0200 	rsb	r2, r2, #0
 8000d90:	0041      	lsls	r1, r0, #1
 8000d92:	fa21 f102 	lsr.w	r1, r1, r2
 8000d96:	f1c2 0220 	rsb	r2, r2, #32
 8000d9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000da2:	f140 0000 	adc.w	r0, r0, #0
 8000da6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000daa:	bf08      	it	eq
 8000dac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db0:	4770      	bx	lr
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0040      	lsleq	r0, r0, #1
 8000dbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dc2:	3a01      	subeq	r2, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xce>
 8000dc6:	ea40 000c 	orr.w	r0, r0, ip
 8000dca:	f093 0f00 	teq	r3, #0
 8000dce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0049      	lsleq	r1, r1, #1
 8000dd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dda:	3b01      	subeq	r3, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xe6>
 8000dde:	ea41 010c 	orr.w	r1, r1, ip
 8000de2:	e78f      	b.n	8000d04 <__aeabi_fmul+0x18>
 8000de4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de8:	ea92 0f0c 	teq	r2, ip
 8000dec:	bf18      	it	ne
 8000dee:	ea93 0f0c 	teqne	r3, ip
 8000df2:	d00a      	beq.n	8000e0a <__aeabi_fmul+0x11e>
 8000df4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df8:	bf18      	it	ne
 8000dfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	d1d8      	bne.n	8000db2 <__aeabi_fmul+0xc6>
 8000e00:	ea80 0001 	eor.w	r0, r0, r1
 8000e04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	bf17      	itett	ne
 8000e10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e14:	4608      	moveq	r0, r1
 8000e16:	f091 0f00 	teqne	r1, #0
 8000e1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e1e:	d014      	beq.n	8000e4a <__aeabi_fmul+0x15e>
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d101      	bne.n	8000e2a <__aeabi_fmul+0x13e>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	d10f      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e2a:	ea93 0f0c 	teq	r3, ip
 8000e2e:	d103      	bne.n	8000e38 <__aeabi_fmul+0x14c>
 8000e30:	024b      	lsls	r3, r1, #9
 8000e32:	bf18      	it	ne
 8000e34:	4608      	movne	r0, r1
 8000e36:	d108      	bne.n	8000e4a <__aeabi_fmul+0x15e>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	4770      	bx	lr
 8000e4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fdiv>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d069      	beq.n	8000f40 <__aeabi_fdiv+0xec>
 8000e6c:	eba2 0203 	sub.w	r2, r2, r3
 8000e70:	ea80 0c01 	eor.w	ip, r0, r1
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e7a:	d037      	beq.n	8000eec <__aeabi_fdiv+0x98>
 8000e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	bf38      	it	cc
 8000e90:	005b      	lslcc	r3, r3, #1
 8000e92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	bf24      	itt	cs
 8000e9e:	1a5b      	subcs	r3, r3, r1
 8000ea0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eb6:	bf24      	itt	cs
 8000eb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	bf18      	it	ne
 8000ed2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ed6:	d1e0      	bne.n	8000e9a <__aeabi_fdiv+0x46>
 8000ed8:	2afd      	cmp	r2, #253	; 0xfd
 8000eda:	f63f af50 	bhi.w	8000d7e <__aeabi_fmul+0x92>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee4:	bf08      	it	eq
 8000ee6:	f020 0001 	biceq.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef4:	327f      	adds	r2, #127	; 0x7f
 8000ef6:	bfc2      	ittt	gt
 8000ef8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f00:	4770      	bxgt	lr
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	e737      	b.n	8000d7e <__aeabi_fmul+0x92>
 8000f0e:	f092 0f00 	teq	r2, #0
 8000f12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0040      	lsleq	r0, r0, #1
 8000f1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f1e:	3a01      	subeq	r2, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xc2>
 8000f22:	ea40 000c 	orr.w	r0, r0, ip
 8000f26:	f093 0f00 	teq	r3, #0
 8000f2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0049      	lsleq	r1, r1, #1
 8000f32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f36:	3b01      	subeq	r3, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xda>
 8000f3a:	ea41 010c 	orr.w	r1, r1, ip
 8000f3e:	e795      	b.n	8000e6c <__aeabi_fdiv+0x18>
 8000f40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d108      	bne.n	8000f5c <__aeabi_fdiv+0x108>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	f47f af7d 	bne.w	8000e4a <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	f47f af70 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e776      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	d104      	bne.n	8000f6c <__aeabi_fdiv+0x118>
 8000f62:	024b      	lsls	r3, r1, #9
 8000f64:	f43f af4c 	beq.w	8000e00 <__aeabi_fmul+0x114>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e76e      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1ca      	bne.n	8000f0e <__aeabi_fdiv+0xba>
 8000f78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f7c:	f47f af5c 	bne.w	8000e38 <__aeabi_fmul+0x14c>
 8000f80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f84:	f47f af3c 	bne.w	8000e00 <__aeabi_fmul+0x114>
 8000f88:	e75f      	b.n	8000e4a <__aeabi_fmul+0x15e>
 8000f8a:	bf00      	nop

08000f8c <__gesf2>:
 8000f8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f90:	e006      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__lesf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	e002      	b.n	8000fa0 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__cmpsf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb0:	bf18      	it	ne
 8000fb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb6:	d011      	beq.n	8000fdc <__cmpsf2+0x40>
 8000fb8:	b001      	add	sp, #4
 8000fba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fbe:	bf18      	it	ne
 8000fc0:	ea90 0f01 	teqne	r0, r1
 8000fc4:	bf58      	it	pl
 8000fc6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fca:	bf88      	it	hi
 8000fcc:	17c8      	asrhi	r0, r1, #31
 8000fce:	bf38      	it	cc
 8000fd0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fd4:	bf18      	it	ne
 8000fd6:	f040 0001 	orrne.w	r0, r0, #1
 8000fda:	4770      	bx	lr
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	d102      	bne.n	8000fe8 <__cmpsf2+0x4c>
 8000fe2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fe6:	d105      	bne.n	8000ff4 <__cmpsf2+0x58>
 8000fe8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fec:	d1e4      	bne.n	8000fb8 <__cmpsf2+0x1c>
 8000fee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ff2:	d0e1      	beq.n	8000fb8 <__cmpsf2+0x1c>
 8000ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__aeabi_cfrcmple>:
 8000ffc:	4684      	mov	ip, r0
 8000ffe:	4608      	mov	r0, r1
 8001000:	4661      	mov	r1, ip
 8001002:	e7ff      	b.n	8001004 <__aeabi_cfcmpeq>

08001004 <__aeabi_cfcmpeq>:
 8001004:	b50f      	push	{r0, r1, r2, r3, lr}
 8001006:	f7ff ffc9 	bl	8000f9c <__cmpsf2>
 800100a:	2800      	cmp	r0, #0
 800100c:	bf48      	it	mi
 800100e:	f110 0f00 	cmnmi.w	r0, #0
 8001012:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001014 <__aeabi_fcmpeq>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff fff4 	bl	8001004 <__aeabi_cfcmpeq>
 800101c:	bf0c      	ite	eq
 800101e:	2001      	moveq	r0, #1
 8001020:	2000      	movne	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmplt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffea 	bl	8001004 <__aeabi_cfcmpeq>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmple>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffe0 	bl	8001004 <__aeabi_cfcmpeq>
 8001044:	bf94      	ite	ls
 8001046:	2001      	movls	r0, #1
 8001048:	2000      	movhi	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpge>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffd2 	bl	8000ffc <__aeabi_cfrcmple>
 8001058:	bf94      	ite	ls
 800105a:	2001      	movls	r0, #1
 800105c:	2000      	movhi	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmpgt>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffc8 	bl	8000ffc <__aeabi_cfrcmple>
 800106c:	bf34      	ite	cc
 800106e:	2001      	movcc	r0, #1
 8001070:	2000      	movcs	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_f2iz>:
 8001078:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800107c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001080:	d30f      	bcc.n	80010a2 <__aeabi_f2iz+0x2a>
 8001082:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001086:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108a:	d90d      	bls.n	80010a8 <__aeabi_f2iz+0x30>
 800108c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001094:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	bf18      	it	ne
 800109e:	4240      	negne	r0, r0
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr
 80010a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ac:	d101      	bne.n	80010b2 <__aeabi_f2iz+0x3a>
 80010ae:	0242      	lsls	r2, r0, #9
 80010b0:	d105      	bne.n	80010be <__aeabi_f2iz+0x46>
 80010b2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010b6:	bf08      	it	eq
 80010b8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010c8:	f001 f866 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d4:	f000 f888 	bl	80011e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80010d8:	2200      	movs	r2, #0
 80010da:	4621      	mov	r1, r4
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f842 	bl	8001168 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80010e4:	2000      	movs	r0, #0
 80010e6:	bd10      	pop	{r4, pc}

080010e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x20>)
{
 80010ea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	f000 f825 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ffe2 	bl	80010c4 <HAL_InitTick>
  HAL_MspInit();
 8001100:	f003 ff8e 	bl	8005020 <HAL_MspInit>
}
 8001104:	2000      	movs	r0, #0
 8001106:	bd08      	pop	{r3, pc}
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800110c:	4a02      	ldr	r2, [pc, #8]	; (8001118 <HAL_IncTick+0xc>)
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000244 	.word	0x20000244

0800111c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <HAL_GetTick+0x8>)
 800111e:	6818      	ldr	r0, [r3, #0]
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000244 	.word	0x20000244

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001128:	b513      	push	{r0, r1, r4, lr}
 800112a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800112c:	f7ff fff6 	bl	800111c <HAL_GetTick>
 8001130:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001132:	f7ff fff3 	bl	800111c <HAL_GetTick>
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	1b00      	subs	r0, r0, r4
 800113a:	4298      	cmp	r0, r3
 800113c:	d3f9      	bcc.n	8001132 <HAL_Delay+0xa>
  {
  }
}
 800113e:	b002      	add	sp, #8
 8001140:	bd10      	pop	{r4, pc}
	...

08001144 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001146:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800114a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800115e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001160:	60d3      	str	r3, [r2, #12]
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b530      	push	{r4, r5, lr}
 800116c:	68dc      	ldr	r4, [r3, #12]
 800116e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001172:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	2b04      	cmp	r3, #4
 800117a:	bf28      	it	cs
 800117c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001184:	bf98      	it	ls
 8001186:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	fa05 f303 	lsl.w	r3, r5, r3
 800118c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001190:	bf88      	it	hi
 8001192:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4019      	ands	r1, r3
 8001196:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	fa05 f404 	lsl.w	r4, r5, r4
 800119c:	3c01      	subs	r4, #1
 800119e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011a0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a2:	ea42 0201 	orr.w	r2, r2, r1
 80011a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	bfaf      	iteee	ge
 80011ac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	4b06      	ldrlt	r3, [pc, #24]	; (80011cc <HAL_NVIC_SetPriority+0x64>)
 80011b2:	f000 000f 	andlt.w	r0, r0, #15
 80011b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	bfa5      	ittet	ge
 80011ba:	b2d2      	uxtbge	r2, r2
 80011bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	e000ed14 	.word	0xe000ed14

080011d0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011d0:	2301      	movs	r3, #1
 80011d2:	0942      	lsrs	r2, r0, #5
 80011d4:	f000 001f 	and.w	r0, r0, #31
 80011d8:	fa03 f000 	lsl.w	r0, r3, r0
 80011dc:	4b01      	ldr	r3, [pc, #4]	; (80011e4 <HAL_NVIC_EnableIRQ+0x14>)
 80011de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	3801      	subs	r0, #1
 80011ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011ee:	d20a      	bcs.n	8001206 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001216:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	bf0c      	ite	eq
 800121c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001220:	f022 0204 	bicne.w	r2, r2, #4
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	4770      	bx	lr
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800122c:	4770      	bx	lr

0800122e <HAL_SYSTICK_IRQHandler>:
{
 800122e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001230:	f7ff fffc 	bl	800122c <HAL_SYSTICK_Callback>
 8001234:	bd08      	pop	{r3, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 800123c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800123e:	4616      	mov	r6, r2
 8001240:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001242:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80013e8 <HAL_GPIO_Init+0x1b0>
 8001246:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80013ec <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 800124a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001250:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001254:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001258:	45a0      	cmp	r8, r4
 800125a:	d17f      	bne.n	800135c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800125c:	684d      	ldr	r5, [r1, #4]
 800125e:	2d12      	cmp	r5, #18
 8001260:	f000 80af 	beq.w	80013c2 <HAL_GPIO_Init+0x18a>
 8001264:	f200 8088 	bhi.w	8001378 <HAL_GPIO_Init+0x140>
 8001268:	2d02      	cmp	r5, #2
 800126a:	f000 80a7 	beq.w	80013bc <HAL_GPIO_Init+0x184>
 800126e:	d87c      	bhi.n	800136a <HAL_GPIO_Init+0x132>
 8001270:	2d00      	cmp	r5, #0
 8001272:	f000 808e 	beq.w	8001392 <HAL_GPIO_Init+0x15a>
 8001276:	2d01      	cmp	r5, #1
 8001278:	f000 809e 	beq.w	80013b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800127c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001280:	2cff      	cmp	r4, #255	; 0xff
 8001282:	bf93      	iteet	ls
 8001284:	4682      	movls	sl, r0
 8001286:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800128a:	3d08      	subhi	r5, #8
 800128c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001290:	bf92      	itee	ls
 8001292:	00b5      	lslls	r5, r6, #2
 8001294:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001298:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800129a:	fa09 f805 	lsl.w	r8, r9, r5
 800129e:	ea2b 0808 	bic.w	r8, fp, r8
 80012a2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a6:	bf88      	it	hi
 80012a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80012ac:	ea48 0505 	orr.w	r5, r8, r5
 80012b0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80012b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80012b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80012bc:	d04e      	beq.n	800135c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012be:	4d47      	ldr	r5, [pc, #284]	; (80013dc <HAL_GPIO_Init+0x1a4>)
 80012c0:	4f46      	ldr	r7, [pc, #280]	; (80013dc <HAL_GPIO_Init+0x1a4>)
 80012c2:	69ad      	ldr	r5, [r5, #24]
 80012c4:	f026 0803 	bic.w	r8, r6, #3
 80012c8:	f045 0501 	orr.w	r5, r5, #1
 80012cc:	61bd      	str	r5, [r7, #24]
 80012ce:	69bd      	ldr	r5, [r7, #24]
 80012d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80012d4:	f005 0501 	and.w	r5, r5, #1
 80012d8:	9501      	str	r5, [sp, #4]
 80012da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 80012e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80012f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012f4:	4d3a      	ldr	r5, [pc, #232]	; (80013e0 <HAL_GPIO_Init+0x1a8>)
 80012f6:	42a8      	cmp	r0, r5
 80012f8:	d068      	beq.n	80013cc <HAL_GPIO_Init+0x194>
 80012fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012fe:	42a8      	cmp	r0, r5
 8001300:	d066      	beq.n	80013d0 <HAL_GPIO_Init+0x198>
 8001302:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001306:	42a8      	cmp	r0, r5
 8001308:	d064      	beq.n	80013d4 <HAL_GPIO_Init+0x19c>
 800130a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800130e:	42a8      	cmp	r0, r5
 8001310:	bf0c      	ite	eq
 8001312:	2503      	moveq	r5, #3
 8001314:	2504      	movne	r5, #4
 8001316:	fa05 f50b 	lsl.w	r5, r5, fp
 800131a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 800131e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001322:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8001328:	bf14      	ite	ne
 800132a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800132c:	43a5      	biceq	r5, r4
 800132e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001330:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001332:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8001336:	bf14      	ite	ne
 8001338:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800133a:	43a5      	biceq	r5, r4
 800133c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800133e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001344:	bf14      	ite	ne
 8001346:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001348:	43a5      	biceq	r5, r4
 800134a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800134c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001352:	bf14      	ite	ne
 8001354:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001356:	ea25 0404 	biceq.w	r4, r5, r4
 800135a:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 800135c:	3601      	adds	r6, #1
 800135e:	2e10      	cmp	r6, #16
 8001360:	f47f af73 	bne.w	800124a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001364:	b003      	add	sp, #12
 8001366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800136a:	2d03      	cmp	r5, #3
 800136c:	d022      	beq.n	80013b4 <HAL_GPIO_Init+0x17c>
 800136e:	2d11      	cmp	r5, #17
 8001370:	d184      	bne.n	800127c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001372:	68ca      	ldr	r2, [r1, #12]
 8001374:	3204      	adds	r2, #4
          break;
 8001376:	e781      	b.n	800127c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <HAL_GPIO_Init+0x1ac>)
 800137a:	42bd      	cmp	r5, r7
 800137c:	d009      	beq.n	8001392 <HAL_GPIO_Init+0x15a>
 800137e:	d812      	bhi.n	80013a6 <HAL_GPIO_Init+0x16e>
 8001380:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80013f0 <HAL_GPIO_Init+0x1b8>
 8001384:	454d      	cmp	r5, r9
 8001386:	d004      	beq.n	8001392 <HAL_GPIO_Init+0x15a>
 8001388:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800138c:	454d      	cmp	r5, r9
 800138e:	f47f af75 	bne.w	800127c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001392:	688a      	ldr	r2, [r1, #8]
 8001394:	b1c2      	cbz	r2, 80013c8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8001396:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001398:	bf0c      	ite	eq
 800139a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800139e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a2:	2208      	movs	r2, #8
 80013a4:	e76a      	b.n	800127c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80013a6:	4575      	cmp	r5, lr
 80013a8:	d0f3      	beq.n	8001392 <HAL_GPIO_Init+0x15a>
 80013aa:	4565      	cmp	r5, ip
 80013ac:	d0f1      	beq.n	8001392 <HAL_GPIO_Init+0x15a>
 80013ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80013f4 <HAL_GPIO_Init+0x1bc>
 80013b2:	e7eb      	b.n	800138c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b4:	2200      	movs	r2, #0
 80013b6:	e761      	b.n	800127c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80013ba:	e75f      	b.n	800127c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013bc:	68ca      	ldr	r2, [r1, #12]
 80013be:	3208      	adds	r2, #8
          break;
 80013c0:	e75c      	b.n	800127c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c2:	68ca      	ldr	r2, [r1, #12]
 80013c4:	320c      	adds	r2, #12
          break;
 80013c6:	e759      	b.n	800127c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c8:	2204      	movs	r2, #4
 80013ca:	e757      	b.n	800127c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013cc:	2500      	movs	r5, #0
 80013ce:	e7a2      	b.n	8001316 <HAL_GPIO_Init+0xde>
 80013d0:	2501      	movs	r5, #1
 80013d2:	e7a0      	b.n	8001316 <HAL_GPIO_Init+0xde>
 80013d4:	2502      	movs	r5, #2
 80013d6:	e79e      	b.n	8001316 <HAL_GPIO_Init+0xde>
 80013d8:	40010400 	.word	0x40010400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	10210000 	.word	0x10210000
 80013e8:	10310000 	.word	0x10310000
 80013ec:	10320000 	.word	0x10320000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	10220000 	.word	0x10220000

080013f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	b10a      	cbz	r2, 80013fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013fa:	6101      	str	r1, [r0, #16]
 80013fc:	4770      	bx	lr
 80013fe:	0409      	lsls	r1, r1, #16
 8001400:	e7fb      	b.n	80013fa <HAL_GPIO_WritePin+0x2>

08001402 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001402:	68c3      	ldr	r3, [r0, #12]
 8001404:	4059      	eors	r1, r3
 8001406:	60c1      	str	r1, [r0, #12]
 8001408:	4770      	bx	lr

0800140a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800140a:	6802      	ldr	r2, [r0, #0]
 800140c:	6953      	ldr	r3, [r2, #20]
 800140e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001412:	d00d      	beq.n	8001430 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001414:	6953      	ldr	r3, [r2, #20]
 8001416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800141a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800141c:	2304      	movs	r3, #4
 800141e:	6383      	str	r3, [r0, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8001420:	2320      	movs	r3, #32
 8001422:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001426:	2300      	movs	r3, #0
 8001428:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
 800142e:	4770      	bx	lr
  }
  return HAL_OK;
 8001430:	4618      	mov	r0, r3
}
 8001432:	4770      	bx	lr

08001434 <I2C_WaitOnFlagUntilTimeout>:
{
 8001434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001438:	460c      	mov	r4, r1
 800143a:	4606      	mov	r6, r0
 800143c:	4615      	mov	r5, r2
 800143e:	461f      	mov	r7, r3
  tickstart = HAL_GetTick();
 8001440:	f7ff fe6c 	bl	800111c <HAL_GetTick>
 8001444:	4680      	mov	r8, r0
 8001446:	0c20      	lsrs	r0, r4, #16
 8001448:	b2a4      	uxth	r4, r4
  if(Status == RESET)
 800144a:	b315      	cbz	r5, 8001492 <I2C_WaitOnFlagUntilTimeout+0x5e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800144c:	b2c5      	uxtb	r5, r0
 800144e:	e02c      	b.n	80014aa <I2C_WaitOnFlagUntilTimeout+0x76>
      if(Timeout != HAL_MAX_DELAY)
 8001450:	1c7a      	adds	r2, r7, #1
 8001452:	d00f      	beq.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x40>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001454:	b947      	cbnz	r7, 8001468 <I2C_WaitOnFlagUntilTimeout+0x34>
          hi2c->State= HAL_I2C_STATE_READY;
 8001456:	2320      	movs	r3, #32
 8001458:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800145c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800145e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8001460:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
          return HAL_TIMEOUT;
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001468:	f7ff fe58 	bl	800111c <HAL_GetTick>
 800146c:	eba0 0008 	sub.w	r0, r0, r8
 8001470:	4287      	cmp	r7, r0
 8001472:	d3f0      	bcc.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x22>
 8001474:	6833      	ldr	r3, [r6, #0]
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001476:	2d01      	cmp	r5, #1
 8001478:	bf0c      	ite	eq
 800147a:	695b      	ldreq	r3, [r3, #20]
 800147c:	699b      	ldrne	r3, [r3, #24]
 800147e:	ea34 0303 	bics.w	r3, r4, r3
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e1      	bne.n	8001450 <I2C_WaitOnFlagUntilTimeout+0x1c>
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001492:	b2c5      	uxtb	r5, r0
 8001494:	e7ee      	b.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x40>
      if(Timeout != HAL_MAX_DELAY)
 8001496:	1c7b      	adds	r3, r7, #1
 8001498:	d007      	beq.n	80014aa <I2C_WaitOnFlagUntilTimeout+0x76>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800149a:	2f00      	cmp	r7, #0
 800149c:	d0db      	beq.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x22>
 800149e:	f7ff fe3d 	bl	800111c <HAL_GetTick>
 80014a2:	eba0 0008 	sub.w	r0, r0, r8
 80014a6:	4287      	cmp	r7, r0
 80014a8:	d3d5      	bcc.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x22>
 80014aa:	6833      	ldr	r3, [r6, #0]
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80014ac:	2d01      	cmp	r5, #1
 80014ae:	bf0c      	ite	eq
 80014b0:	695b      	ldreq	r3, [r3, #20]
 80014b2:	699b      	ldrne	r3, [r3, #24]
 80014b4:	ea34 0303 	bics.w	r3, r4, r3
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e9      	bne.n	8001496 <I2C_WaitOnFlagUntilTimeout+0x62>
 80014c2:	e7e3      	b.n	800148c <I2C_WaitOnFlagUntilTimeout+0x58>

080014c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	460d      	mov	r5, r1
 80014ca:	4604      	mov	r4, r0
 80014cc:	4616      	mov	r6, r2
  tickstart = HAL_GetTick();
 80014ce:	f7ff fe25 	bl	800111c <HAL_GetTick>
 80014d2:	4607      	mov	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014d4:	f3c5 4807 	ubfx	r8, r5, #16, #8
 80014d8:	b2ad      	uxth	r5, r5
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	f1b8 0f01 	cmp.w	r8, #1
 80014e0:	bf0c      	ite	eq
 80014e2:	695a      	ldreq	r2, [r3, #20]
 80014e4:	699a      	ldrne	r2, [r3, #24]
 80014e6:	ea35 0202 	bics.w	r2, r5, r2
 80014ea:	bf14      	ite	ne
 80014ec:	2001      	movne	r0, #1
 80014ee:	2000      	moveq	r0, #0
 80014f0:	b908      	cbnz	r0, 80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x32>
}
 80014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	0552      	lsls	r2, r2, #21
 80014fa:	d512      	bpl.n	8001522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014fc:	681a      	ldr	r2, [r3, #0]
      return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001504:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150c:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800150e:	2304      	movs	r3, #4
 8001510:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8001512:	2320      	movs	r3, #32
 8001514:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 8001518:	2300      	movs	r3, #0
 800151a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 800151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001522:	1c73      	adds	r3, r6, #1
 8001524:	d0d9      	beq.n	80014da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x16>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001526:	b946      	cbnz	r6, 800153a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
        hi2c->State= HAL_I2C_STATE_READY;
 8001528:	2320      	movs	r3, #32
 800152a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800152e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001530:	2003      	movs	r0, #3
        __HAL_UNLOCK(hi2c);
 8001532:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800153a:	f7ff fdef 	bl	800111c <HAL_GetTick>
 800153e:	1bc0      	subs	r0, r0, r7
 8001540:	4286      	cmp	r6, r0
 8001542:	d2ca      	bcs.n	80014da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x16>
 8001544:	e7f0      	b.n	8001528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>

08001546 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 8001546:	b570      	push	{r4, r5, r6, lr}
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fde6 	bl	800111c <HAL_GetTick>
 8001550:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	d501      	bpl.n	800155e <I2C_WaitOnTXEFlagUntilTimeout+0x18>
  return HAL_OK;      
 800155a:	2000      	movs	r0, #0
 800155c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff ff53 	bl	800140a <I2C_IsAcknowledgeFailed>
 8001564:	b9a0      	cbnz	r0, 8001590 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001566:	1c6a      	adds	r2, r5, #1
 8001568:	d0f3      	beq.n	8001552 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800156a:	b95d      	cbnz	r5, 8001584 <I2C_WaitOnTXEFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800156e:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8001576:	2320      	movs	r3, #32
 8001578:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800157c:	2300      	movs	r3, #0
 800157e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001582:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001584:	f7ff fdca 	bl	800111c <HAL_GetTick>
 8001588:	1b80      	subs	r0, r0, r6
 800158a:	4285      	cmp	r5, r0
 800158c:	d2e1      	bcs.n	8001552 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
 800158e:	e7ed      	b.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
}
 8001592:	bd70      	pop	{r4, r5, r6, pc}

08001594 <I2C_RequestMemoryWrite>:
{
 8001594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001596:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001598:	6802      	ldr	r2, [r0, #0]
{
 800159a:	461f      	mov	r7, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800159c:	6813      	ldr	r3, [r2, #0]
{
 800159e:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80015a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015aa:	9b08      	ldr	r3, [sp, #32]
 80015ac:	2200      	movs	r2, #0
{
 80015ae:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80015b0:	f7ff ff40 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	b960      	cbnz	r0, 80015d0 <I2C_RequestMemoryWrite+0x3c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80015bc:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80015be:	9a08      	ldr	r2, [sp, #32]
 80015c0:	4917      	ldr	r1, [pc, #92]	; (8001620 <I2C_RequestMemoryWrite+0x8c>)
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff7e 	bl	80014c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015c8:	b128      	cbz	r0, 80015d6 <I2C_RequestMemoryWrite+0x42>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d015      	beq.n	80015fc <I2C_RequestMemoryWrite+0x68>
      return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
}
 80015d2:	b003      	add	sp, #12
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d6:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80015d8:	9908      	ldr	r1, [sp, #32]
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80015dc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	9b01      	ldr	r3, [sp, #4]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80015e6:	f7ff ffae 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 80015ea:	b148      	cbz	r0, 8001600 <I2C_RequestMemoryWrite+0x6c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d1ee      	bne.n	80015d0 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
 80015fe:	e7e8      	b.n	80015d2 <I2C_RequestMemoryWrite+0x3e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001600:	2f01      	cmp	r7, #1
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	d102      	bne.n	800160c <I2C_RequestMemoryWrite+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001606:	b2ed      	uxtb	r5, r5
 8001608:	611d      	str	r5, [r3, #16]
 800160a:	e7e2      	b.n	80015d2 <I2C_RequestMemoryWrite+0x3e>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800160c:	0a2a      	lsrs	r2, r5, #8
 800160e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001610:	9908      	ldr	r1, [sp, #32]
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff ff97 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 8001618:	2800      	cmp	r0, #0
 800161a:	d1e7      	bne.n	80015ec <I2C_RequestMemoryWrite+0x58>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	e7f2      	b.n	8001606 <I2C_RequestMemoryWrite+0x72>
 8001620:	00010002 	.word	0x00010002

08001624 <I2C_RequestMemoryRead>:
{
 8001624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001626:	461f      	mov	r7, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001628:	6803      	ldr	r3, [r0, #0]
{
 800162a:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162c:	681a      	ldr	r2, [r3, #0]
{
 800162e:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001634:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001636:	681a      	ldr	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800163c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001640:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001642:	9b08      	ldr	r3, [sp, #32]
 8001644:	2200      	movs	r2, #0
{
 8001646:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001648:	f7ff fef4 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 800164c:	b978      	cbnz	r0, 800166e <I2C_RequestMemoryRead+0x4a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	b2f6      	uxtb	r6, r6
 8001652:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8001656:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8001658:	4928      	ldr	r1, [pc, #160]	; (80016fc <I2C_RequestMemoryRead+0xd8>)
 800165a:	9a08      	ldr	r2, [sp, #32]
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff31 	bl	80014c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001662:	b138      	cbz	r0, 8001674 <I2C_RequestMemoryRead+0x50>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001664:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001666:	2b04      	cmp	r3, #4
 8001668:	d101      	bne.n	800166e <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
 800166c:	e000      	b.n	8001670 <I2C_RequestMemoryRead+0x4c>
      return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
}
 8001670:	b003      	add	sp, #12
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001674:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001676:	9908      	ldr	r1, [sp, #32]
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001678:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800167a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167c:	9201      	str	r2, [sp, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	9b01      	ldr	r3, [sp, #4]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001684:	f7ff ff5f 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 8001688:	b140      	cbz	r0, 800169c <I2C_RequestMemoryRead+0x78>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800168a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800168c:	2b04      	cmp	r3, #4
 800168e:	d1ee      	bne.n	800166e <I2C_RequestMemoryRead+0x4a>
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e7e6      	b.n	800166a <I2C_RequestMemoryRead+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800169c:	2f01      	cmp	r7, #1
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	d121      	bne.n	80016e6 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016a2:	b2ed      	uxtb	r5, r5
 80016a4:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80016a6:	9908      	ldr	r1, [sp, #32]
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff ff4c 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ae:	4602      	mov	r2, r0
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d1ea      	bne.n	800168a <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016b4:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80016b6:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016b8:	680b      	ldr	r3, [r1, #0]
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80016c0:	9b08      	ldr	r3, [sp, #32]
 80016c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016c6:	f7ff feb5 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d1cf      	bne.n	800166e <I2C_RequestMemoryRead+0x4a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f046 0601 	orr.w	r6, r6, #1
 80016d4:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80016d6:	9a08      	ldr	r2, [sp, #32]
 80016d8:	4908      	ldr	r1, [pc, #32]	; (80016fc <I2C_RequestMemoryRead+0xd8>)
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fef2 	bl	80014c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1bf      	bne.n	8001664 <I2C_RequestMemoryRead+0x40>
 80016e4:	e7c4      	b.n	8001670 <I2C_RequestMemoryRead+0x4c>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80016e6:	0a2a      	lsrs	r2, r5, #8
 80016e8:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80016ea:	9908      	ldr	r1, [sp, #32]
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff2a 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d1c9      	bne.n	800168a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	e7d3      	b.n	80016a2 <I2C_RequestMemoryRead+0x7e>
 80016fa:	bf00      	nop
 80016fc:	00010002 	.word	0x00010002

08001700 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8001706:	f7ff fd09 	bl	800111c <HAL_GetTick>
 800170a:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	6953      	ldr	r3, [r2, #20]
 8001710:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001714:	d001      	beq.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0x1a>
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
}
 8001718:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800171a:	6951      	ldr	r1, [r2, #20]
 800171c:	06c9      	lsls	r1, r1, #27
 800171e:	d50b      	bpl.n	8001738 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001720:	6951      	ldr	r1, [r2, #20]
      return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001724:	f021 0110 	bic.w	r1, r1, #16
 8001728:	6151      	str	r1, [r2, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800172a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172c:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800172e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hi2c->State= HAL_I2C_STATE_READY;
 8001732:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      return HAL_ERROR;
 8001736:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001738:	b95d      	cbnz	r5, 8001752 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800173c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8001744:	2320      	movs	r3, #32
 8001746:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800174a:	2300      	movs	r3, #0
 800174c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001750:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001752:	f7ff fce3 	bl	800111c <HAL_GetTick>
 8001756:	1b80      	subs	r0, r0, r6
 8001758:	4285      	cmp	r5, r0
 800175a:	d2d7      	bcs.n	800170c <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 800175c:	e7ed      	b.n	800173a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
	...

08001760 <HAL_I2C_Init>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	2800      	cmp	r0, #0
 8001766:	d05f      	beq.n	8001828 <HAL_I2C_Init+0xc8>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001768:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800176c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001770:	b91b      	cbnz	r3, 800177a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001772:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_I2C_MspInit(hi2c);
 8001776:	f003 fc91 	bl	800509c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800177a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800177c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800177e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 8001782:	6813      	ldr	r3, [r2, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001784:	4e29      	ldr	r6, [pc, #164]	; (800182c <HAL_I2C_Init+0xcc>)
  __HAL_I2C_DISABLE(hi2c);
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800178c:	f000 fd0a 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001790:	6863      	ldr	r3, [r4, #4]
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001792:	4d27      	ldr	r5, [pc, #156]	; (8001830 <HAL_I2C_Init+0xd0>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001794:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001796:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800179a:	bf88      	it	hi
 800179c:	f44f 7196 	movhi.w	r1, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 80017a0:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017a2:	bf88      	it	hi
 80017a4:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80017a6:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017a8:	bf85      	ittet	hi
 80017aa:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80017ae:	fbb1 f1f5 	udivhi	r1, r1, r5
 80017b2:	1c69      	addls	r1, r5, #1
 80017b4:	3101      	addhi	r1, #1
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80017b6:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017b8:	6211      	str	r1, [r2, #32]
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80017ba:	d820      	bhi.n	80017fe <HAL_I2C_Init+0x9e>
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fbb0 f0f3 	udiv	r0, r0, r3
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 80017c2:	f3c0 030b 	ubfx	r3, r0, #0, #12
      return 4;
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	bf98      	it	ls
 80017ca:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	6a21      	ldr	r1, [r4, #32]
 80017ce:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 80017d0:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80017d6:	68e1      	ldr	r1, [r4, #12]
 80017d8:	6923      	ldr	r3, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	2000      	movs	r0, #0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80017e0:	69a1      	ldr	r1, [r4, #24]
 80017e2:	6963      	ldr	r3, [r4, #20]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80017e8:	6813      	ldr	r3, [r2, #0]
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80017f0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  return HAL_OK;
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 80017fe:	68a1      	ldr	r1, [r4, #8]
 8001800:	b959      	cbnz	r1, 800181a <HAL_I2C_Init+0xba>
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8001802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001806:	fbb0 f0f3 	udiv	r0, r0, r3
 800180a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 800180e:	f3c0 030b 	ubfx	r3, r0, #0, #12
      return 1;
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf08      	it	eq
 8001816:	2001      	moveq	r0, #1
 8001818:	e7d8      	b.n	80017cc <HAL_I2C_Init+0x6c>
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 800181a:	2119      	movs	r1, #25
 800181c:	434b      	muls	r3, r1
 800181e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001822:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001826:	e7f2      	b.n	800180e <HAL_I2C_Init+0xae>
    return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
}
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	000186a0 	.word	0x000186a0
 8001830:	000f4240 	.word	0x000f4240

08001834 <HAL_I2C_Mem_Write>:
{
 8001834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001838:	469b      	mov	fp, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 800183a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 800183e:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001840:	2b20      	cmp	r3, #32
{
 8001842:	4689      	mov	r9, r1
 8001844:	4692      	mov	sl, r2
 8001846:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001848:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
  if(hi2c->State == HAL_I2C_STATE_READY)
 800184c:	d003      	beq.n	8001856 <HAL_I2C_Mem_Write+0x22>
    return HAL_BUSY;
 800184e:	2002      	movs	r0, #2
}
 8001850:	b003      	add	sp, #12
 8001852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0))
 8001856:	b357      	cbz	r7, 80018ae <HAL_I2C_Mem_Write+0x7a>
 8001858:	b34e      	cbz	r6, 80018ae <HAL_I2C_Mem_Write+0x7a>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 800185a:	f242 7310 	movw	r3, #10000	; 0x2710
 800185e:	2201      	movs	r2, #1
 8001860:	492f      	ldr	r1, [pc, #188]	; (8001920 <HAL_I2C_Mem_Write+0xec>)
 8001862:	f7ff fde7 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 8001866:	4680      	mov	r8, r0
 8001868:	2800      	cmp	r0, #0
 800186a:	d1f0      	bne.n	800184e <HAL_I2C_Mem_Write+0x1a>
    __HAL_LOCK(hi2c);
 800186c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001870:	2b01      	cmp	r3, #1
 8001872:	d0ec      	beq.n	800184e <HAL_I2C_Mem_Write+0x1a>
 8001874:	2501      	movs	r5, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001876:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 8001878:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187c:	6813      	ldr	r3, [r2, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800187e:	4649      	mov	r1, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001884:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001886:	2321      	movs	r3, #33	; 0x21
 8001888:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	63a0      	str	r0, [r4, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4652      	mov	r2, sl
 800189a:	465b      	mov	r3, fp
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff fe79 	bl	8001594 <I2C_RequestMemoryWrite>
 80018a2:	b188      	cbz	r0, 80018c8 <HAL_I2C_Mem_Write+0x94>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 80018a6:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d115      	bne.n	80018da <HAL_I2C_Mem_Write+0xa6>
      return  HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
 80018b0:	e7ce      	b.n	8001850 <HAL_I2C_Mem_Write+0x1c>
      hi2c->Instance->DR = (*pData++);
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	783b      	ldrb	r3, [r7, #0]
 80018b6:	6113      	str	r3, [r2, #16]
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80018b8:	6951      	ldr	r1, [r2, #20]
      Size--;
 80018ba:	1e73      	subs	r3, r6, #1
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80018bc:	0749      	lsls	r1, r1, #29
      Size--;
 80018be:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80018c0:	d40d      	bmi.n	80018de <HAL_I2C_Mem_Write+0xaa>
      Size--;
 80018c2:	461e      	mov	r6, r3
      hi2c->Instance->DR = (*pData++);
 80018c4:	3701      	adds	r7, #1
    while(Size > 0)
 80018c6:	b15e      	cbz	r6, 80018e0 <HAL_I2C_Mem_Write+0xac>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80018c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fe3b 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_I2C_Mem_Write+0x7e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d01b      	beq.n	8001912 <HAL_I2C_Mem_Write+0xde>
          return HAL_TIMEOUT;
 80018da:	2003      	movs	r0, #3
 80018dc:	e7b8      	b.n	8001850 <HAL_I2C_Mem_Write+0x1c>
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80018de:	b993      	cbnz	r3, 8001906 <HAL_I2C_Mem_Write+0xd2>
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80018e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff fe2f 	bl	8001546 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1f3      	bne.n	80018d4 <HAL_I2C_Mem_Write+0xa0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80018f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
    return HAL_OK;
 8001904:	e7a4      	b.n	8001850 <HAL_I2C_Mem_Write+0x1c>
        hi2c->Instance->DR = (*pData++);
 8001906:	787b      	ldrb	r3, [r7, #1]
        Size--;
 8001908:	3e02      	subs	r6, #2
        hi2c->Instance->DR = (*pData++);
 800190a:	6113      	str	r3, [r2, #16]
        Size--;
 800190c:	b2b6      	uxth	r6, r6
        hi2c->Instance->DR = (*pData++);
 800190e:	3702      	adds	r7, #2
 8001910:	e7d9      	b.n	80018c6 <HAL_I2C_Mem_Write+0x92>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e7c7      	b.n	80018ae <HAL_I2C_Mem_Write+0x7a>
 800191e:	bf00      	nop
 8001920:	00100002 	.word	0x00100002

08001924 <HAL_I2C_Mem_Read>:
{
 8001924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001928:	469b      	mov	fp, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 800192a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 800192e:	b089      	sub	sp, #36	; 0x24
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001930:	2b20      	cmp	r3, #32
{
 8001932:	4604      	mov	r4, r0
 8001934:	9103      	str	r1, [sp, #12]
 8001936:	4692      	mov	sl, r2
 8001938:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800193a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800193e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001940:	d005      	beq.n	800194e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001942:	f04f 0a02 	mov.w	sl, #2
}
 8001946:	4650      	mov	r0, sl
 8001948:	b009      	add	sp, #36	; 0x24
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((pData == NULL) || (Size == 0))
 800194e:	b35e      	cbz	r6, 80019a8 <HAL_I2C_Mem_Read+0x84>
 8001950:	b355      	cbz	r5, 80019a8 <HAL_I2C_Mem_Read+0x84>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 8001952:	f242 7310 	movw	r3, #10000	; 0x2710
 8001956:	2201      	movs	r2, #1
 8001958:	4962      	ldr	r1, [pc, #392]	; (8001ae4 <HAL_I2C_Mem_Read+0x1c0>)
 800195a:	f7ff fd6b 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 800195e:	4680      	mov	r8, r0
 8001960:	2800      	cmp	r0, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001964:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001968:	2b01      	cmp	r3, #1
 800196a:	d0ea      	beq.n	8001942 <HAL_I2C_Mem_Read+0x1e>
 800196c:	f04f 0901 	mov.w	r9, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001970:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 8001972:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001976:	6813      	ldr	r3, [r2, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001978:	9903      	ldr	r1, [sp, #12]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800197a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800197e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001980:	2322      	movs	r3, #34	; 0x22
 8001982:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8001986:	2340      	movs	r3, #64	; 0x40
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001988:	4652      	mov	r2, sl
    hi2c->Mode = HAL_I2C_MODE_MEM;
 800198a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800198e:	9700      	str	r7, [sp, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	63a0      	str	r0, [r4, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001992:	465b      	mov	r3, fp
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff fe45 	bl	8001624 <I2C_RequestMemoryRead>
 800199a:	4682      	mov	sl, r0
 800199c:	b138      	cbz	r0, 80019ae <HAL_I2C_Mem_Read+0x8a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 80019a0:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d11e      	bne.n	80019e6 <HAL_I2C_Mem_Read+0xc2>
              return HAL_ERROR;
 80019a8:	f04f 0a01 	mov.w	sl, #1
 80019ac:	e7cb      	b.n	8001946 <HAL_I2C_Mem_Read+0x22>
 80019ae:	6823      	ldr	r3, [r4, #0]
    if(Size == 1)
 80019b0:	2d01      	cmp	r5, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	681a      	ldr	r2, [r3, #0]
    if(Size == 1)
 80019b4:	d11a      	bne.n	80019ec <HAL_I2C_Mem_Read+0xc8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ba:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	9205      	str	r2, [sp, #20]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	9205      	str	r2, [sp, #20]
 80019c8:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019d2:	b662      	cpsie	i
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 80019d4:	4639      	mov	r1, r7
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fe92 	bl	8001700 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d04d      	beq.n	8001a7c <HAL_I2C_Mem_Read+0x158>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80019e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d1e0      	bne.n	80019a8 <HAL_I2C_Mem_Read+0x84>
              return HAL_TIMEOUT;
 80019e6:	f04f 0a03 	mov.w	sl, #3
 80019ea:	e7ac      	b.n	8001946 <HAL_I2C_Mem_Read+0x22>
    else if(Size == 2)
 80019ec:	2d02      	cmp	r5, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_I2C_Mem_Read+0x114>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	9206      	str	r2, [sp, #24]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	9206      	str	r2, [sp, #24]
 8001a02:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0c:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_I2C_Mem_Read+0x1c4>)
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fd0d 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d1e3      	bne.n	80019e6 <HAL_I2C_Mem_Read+0xc2>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]
          (*pData++) = hi2c->Instance->DR;
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	7033      	strb	r3, [r6, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a2e:	b662      	cpsie	i
          (*pData++) = hi2c->Instance->DR;
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	7073      	strb	r3, [r6, #1]
 8001a36:	e024      	b.n	8001a82 <HAL_I2C_Mem_Read+0x15e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	9207      	str	r2, [sp, #28]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	9307      	str	r3, [sp, #28]
 8001a46:	9b07      	ldr	r3, [sp, #28]
      if(Size <= 3)
 8001a48:	2d03      	cmp	r5, #3
 8001a4a:	d923      	bls.n	8001a94 <HAL_I2C_Mem_Read+0x170>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fe56 	bl	8001700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d1c3      	bne.n	80019e0 <HAL_I2C_Mem_Read+0xbc>
        (*pData++) = hi2c->Instance->DR;
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	7033      	strb	r3, [r6, #0]
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	6953      	ldr	r3, [r2, #20]
 8001a62:	075b      	lsls	r3, r3, #29
          (*pData++) = hi2c->Instance->DR;
 8001a64:	bf4d      	iteet	mi
 8001a66:	6912      	ldrmi	r2, [r2, #16]
        (*pData++) = hi2c->Instance->DR;
 8001a68:	1c73      	addpl	r3, r6, #1
        Size--;
 8001a6a:	f105 35ff 	addpl.w	r5, r5, #4294967295
          (*pData++) = hi2c->Instance->DR;
 8001a6e:	1cb3      	addmi	r3, r6, #2
          Size--;
 8001a70:	bf44      	itt	mi
 8001a72:	3d02      	submi	r5, #2
          (*pData++) = hi2c->Instance->DR;
 8001a74:	7072      	strbmi	r2, [r6, #1]
          Size--;
 8001a76:	b2ad      	uxth	r5, r5
{
 8001a78:	461e      	mov	r6, r3
 8001a7a:	e7e5      	b.n	8001a48 <HAL_I2C_Mem_Read+0x124>
          (*pData++) = hi2c->Instance->DR;
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	7033      	strb	r3, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	2320      	movs	r3, #32
 8001a84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    __HAL_UNLOCK(hi2c);
 8001a8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001a92:	e758      	b.n	8001946 <HAL_I2C_Mem_Read+0x22>
        else if(Size == 2)
 8001a94:	2d02      	cmp	r5, #2
 8001a96:	d0ba      	beq.n	8001a0e <HAL_I2C_Mem_Read+0xea>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <HAL_I2C_Mem_Read+0x1c4>)
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fcc8 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d19d      	bne.n	80019e6 <HAL_I2C_Mem_Read+0xc2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aaa:	6821      	ldr	r1, [r4, #0]
 8001aac:	680b      	ldr	r3, [r1, #0]
 8001aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ab2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
          (*pData++) = hi2c->Instance->DR;
 8001ab6:	6823      	ldr	r3, [r4, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001ab8:	490b      	ldr	r1, [pc, #44]	; (8001ae8 <HAL_I2C_Mem_Read+0x1c4>)
          (*pData++) = hi2c->Instance->DR;
 8001aba:	691b      	ldr	r3, [r3, #16]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001abc:	4620      	mov	r0, r4
          (*pData++) = hi2c->Instance->DR;
 8001abe:	7033      	strb	r3, [r6, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	f7ff fcb7 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d18d      	bne.n	80019e6 <HAL_I2C_Mem_Read+0xc2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
          (*pData++) = hi2c->Instance->DR;
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	7073      	strb	r3, [r6, #1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad8:	b662      	cpsie	i
          (*pData++) = hi2c->Instance->DR;
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	70b3      	strb	r3, [r6, #2]
 8001ae0:	e7cf      	b.n	8001a82 <HAL_I2C_Mem_Read+0x15e>
 8001ae2:	bf00      	nop
 8001ae4:	00100002 	.word	0x00100002
 8001ae8:	00010004 	.word	0x00010004

08001aec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aec:	6803      	ldr	r3, [r0, #0]
{
 8001aee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	07de      	lsls	r6, r3, #31
{
 8001af4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	d434      	bmi.n	8001b62 <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	079c      	lsls	r4, r3, #30
 8001afc:	f100 80a7 	bmi.w	8001c4e <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	071a      	lsls	r2, r3, #28
 8001b04:	d523      	bpl.n	8001b4e <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	69aa      	ldr	r2, [r5, #24]
 8001b08:	4cbe      	ldr	r4, [pc, #760]	; (8001e04 <HAL_RCC_OscConfig+0x318>)
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	49be      	ldr	r1, [pc, #760]	; (8001e08 <HAL_RCC_OscConfig+0x31c>)
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	f000 8115 	beq.w	8001d3e <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b18:	fab2 f282 	clz	r2, r2
 8001b1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fafc 	bl	800111c <HAL_GetTick>
 8001b24:	2602      	movs	r6, #2
 8001b26:	4607      	mov	r7, r0
 8001b28:	fa96 f3a6 	rbit	r3, r6
 8001b2c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b32:	fa96 f3a6 	rbit	r3, r6
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	07db      	lsls	r3, r3, #31
 8001b44:	f140 80f4 	bpl.w	8001d30 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7ff faed 	bl	8001128 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	0759      	lsls	r1, r3, #29
 8001b52:	f100 8114 	bmi.w	8001d7e <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b56:	69ea      	ldr	r2, [r5, #28]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	f040 8193 	bne.w	8001e84 <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e020      	b.n	8001ba4 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b62:	4ca8      	ldr	r4, [pc, #672]	; (8001e04 <HAL_RCC_OscConfig+0x318>)
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d007      	beq.n	8001b7e <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0xbe>
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	03d8      	lsls	r0, r3, #15
 8001b7c:	d515      	bpl.n	8001baa <HAL_RCC_OscConfig+0xbe>
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	07d9      	lsls	r1, r3, #31
 8001b9a:	d5ad      	bpl.n	8001af8 <HAL_RCC_OscConfig+0xc>
 8001b9c:	686b      	ldr	r3, [r5, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1aa      	bne.n	8001af8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
}
 8001ba4:	b003      	add	sp, #12
 8001ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	686b      	ldr	r3, [r5, #4]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x100>
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bba:	f7ff faaf 	bl	800111c <HAL_GetTick>
 8001bbe:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001bc2:	4607      	mov	r7, r0
 8001bc4:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	fa96 f3a6 	rbit	r3, r6
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	07da      	lsls	r2, r3, #31
 8001bdc:	d48c      	bmi.n	8001af8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bde:	f7ff fa9d 	bl	800111c <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	2864      	cmp	r0, #100	; 0x64
 8001be6:	d9ed      	bls.n	8001bc4 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8001be8:	2003      	movs	r0, #3
 8001bea:	e7db      	b.n	8001ba4 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	bb03      	cbnz	r3, 8001c30 <HAL_RCC_OscConfig+0x144>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa8b 	bl	800111c <HAL_GetTick>
 8001c06:	4607      	mov	r7, r0
 8001c08:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	fa96 f3a6 	rbit	r3, r6
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	07db      	lsls	r3, r3, #31
 8001c20:	f57f af6a 	bpl.w	8001af8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fa7a 	bl	800111c <HAL_GetTick>
 8001c28:	1bc0      	subs	r0, r0, r7
 8001c2a:	2864      	cmp	r0, #100	; 0x64
 8001c2c:	d9ec      	bls.n	8001c08 <HAL_RCC_OscConfig+0x11c>
 8001c2e:	e7db      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	d103      	bne.n	8001c40 <HAL_RCC_OscConfig+0x154>
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	e7b8      	b.n	8001bb2 <HAL_RCC_OscConfig+0xc6>
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4c:	e7b4      	b.n	8001bb8 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c4e:	4c6d      	ldr	r4, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x318>)
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	f013 0f0c 	tst.w	r3, #12
 8001c56:	d007      	beq.n	8001c68 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c58:	6863      	ldr	r3, [r4, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d120      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1b8>
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	03df      	lsls	r7, r3, #15
 8001c66:	d41d      	bmi.n	8001ca4 <HAL_RCC_OscConfig+0x1b8>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	07de      	lsls	r6, r3, #31
 8001c82:	d502      	bpl.n	8001c8a <HAL_RCC_OscConfig+0x19e>
 8001c84:	692b      	ldr	r3, [r5, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d18b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	6821      	ldr	r1, [r4, #0]
 8001c8c:	23f8      	movs	r3, #248	; 0xf8
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	fab3 f283 	clz	r2, r3
 8001c96:	696b      	ldr	r3, [r5, #20]
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	e72d      	b.n	8001b00 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	692a      	ldr	r2, [r5, #16]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	b302      	cbz	r2, 8001cec <HAL_RCC_OscConfig+0x200>
 8001caa:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001cb8:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001cbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fa2d 	bl	800111c <HAL_GetTick>
 8001cc2:	2602      	movs	r6, #2
 8001cc4:	4607      	mov	r7, r0
 8001cc6:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	fa96 f3a6 	rbit	r3, r6
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	07d8      	lsls	r0, r3, #31
 8001cde:	d4d4      	bmi.n	8001c8a <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fa1c 	bl	800111c <HAL_GetTick>
 8001ce4:	1bc0      	subs	r0, r0, r7
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9ed      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1da>
 8001cea:	e77d      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
 8001cec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001cfa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001cfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa0c 	bl	800111c <HAL_GetTick>
 8001d04:	2602      	movs	r6, #2
 8001d06:	4607      	mov	r7, r0
 8001d08:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	fa96 f3a6 	rbit	r3, r6
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	07d9      	lsls	r1, r3, #31
 8001d20:	f57f aeee 	bpl.w	8001b00 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff f9fa 	bl	800111c <HAL_GetTick>
 8001d28:	1bc0      	subs	r0, r0, r7
 8001d2a:	2802      	cmp	r0, #2
 8001d2c:	d9ec      	bls.n	8001d08 <HAL_RCC_OscConfig+0x21c>
 8001d2e:	e75b      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff f9f4 	bl	800111c <HAL_GetTick>
 8001d34:	1bc0      	subs	r0, r0, r7
 8001d36:	2802      	cmp	r0, #2
 8001d38:	f67f aef6 	bls.w	8001b28 <HAL_RCC_OscConfig+0x3c>
 8001d3c:	e754      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
 8001d3e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f9e7 	bl	800111c <HAL_GetTick>
 8001d4e:	2602      	movs	r6, #2
 8001d50:	4607      	mov	r7, r0
 8001d52:	fa96 f3a6 	rbit	r3, r6
 8001d56:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d5c:	fa96 f3a6 	rbit	r3, r6
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	07d8      	lsls	r0, r3, #31
 8001d6e:	f57f aeee 	bpl.w	8001b4e <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff f9d3 	bl	800111c <HAL_GetTick>
 8001d76:	1bc0      	subs	r0, r0, r7
 8001d78:	2802      	cmp	r0, #2
 8001d7a:	d9ea      	bls.n	8001d52 <HAL_RCC_OscConfig+0x266>
 8001d7c:	e734      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4c21      	ldr	r4, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d80:	4e22      	ldr	r6, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	69e3      	ldr	r3, [r4, #28]
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61e3      	str	r3, [r4, #28]
 8001d8a:	69e3      	ldr	r3, [r4, #28]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d94:	6833      	ldr	r3, [r6, #0]
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f9be 	bl	800111c <HAL_GetTick>
 8001da0:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001da2:	6833      	ldr	r3, [r6, #0]
 8001da4:	05da      	lsls	r2, r3, #23
 8001da6:	d526      	bpl.n	8001df6 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	68eb      	ldr	r3, [r5, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d130      	bne.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dae:	6a23      	ldr	r3, [r4, #32]
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001db6:	f7ff f9b1 	bl	800111c <HAL_GetTick>
 8001dba:	2602      	movs	r6, #2
 8001dbc:	4681      	mov	r9, r0
 8001dbe:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f241 3788 	movw	r7, #5000	; 0x1388
 8001dc4:	fa96 f3a6 	rbit	r3, r6
 8001dc8:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d055      	beq.n	8001e7c <HAL_RCC_OscConfig+0x390>
 8001dd0:	6a22      	ldr	r2, [r4, #32]
 8001dd2:	fa98 f3a8 	rbit	r3, r8
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	07db      	lsls	r3, r3, #31
 8001de4:	f53f aeb7 	bmi.w	8001b56 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f998 	bl	800111c <HAL_GetTick>
 8001dec:	eba0 0009 	sub.w	r0, r0, r9
 8001df0:	42b8      	cmp	r0, r7
 8001df2:	d9e7      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2d8>
 8001df4:	e6f8      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff f991 	bl	800111c <HAL_GetTick>
 8001dfa:	1bc0      	subs	r0, r0, r7
 8001dfc:	2864      	cmp	r0, #100	; 0x64
 8001dfe:	d9d0      	bls.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
 8001e00:	e6f2      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420480 	.word	0x42420480
 8001e0c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	bb33      	cbnz	r3, 8001e60 <HAL_RCC_OscConfig+0x374>
 8001e12:	6a23      	ldr	r3, [r4, #32]
 8001e14:	2602      	movs	r6, #2
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6223      	str	r3, [r4, #32]
 8001e1c:	6a23      	ldr	r3, [r4, #32]
 8001e1e:	4637      	mov	r7, r6
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e26:	f7ff f979 	bl	800111c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e2e:	4680      	mov	r8, r0
 8001e30:	fa96 f3a6 	rbit	r3, r6
 8001e34:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	b313      	cbz	r3, 8001e80 <HAL_RCC_OscConfig+0x394>
 8001e3a:	6a22      	ldr	r2, [r4, #32]
 8001e3c:	fa97 f3a7 	rbit	r3, r7
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	07d8      	lsls	r0, r3, #31
 8001e4e:	f57f ae82 	bpl.w	8001b56 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff f963 	bl	800111c <HAL_GetTick>
 8001e56:	eba0 0008 	sub.w	r0, r0, r8
 8001e5a:	4548      	cmp	r0, r9
 8001e5c:	d9e8      	bls.n	8001e30 <HAL_RCC_OscConfig+0x344>
 8001e5e:	e6c3      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	6a23      	ldr	r3, [r4, #32]
 8001e64:	d103      	bne.n	8001e6e <HAL_RCC_OscConfig+0x382>
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6223      	str	r3, [r4, #32]
 8001e6c:	e79f      	b.n	8001dae <HAL_RCC_OscConfig+0x2c2>
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6223      	str	r3, [r4, #32]
 8001e74:	6a23      	ldr	r3, [r4, #32]
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	e79b      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e7e:	e7a8      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e82:	e7db      	b.n	8001e3c <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4c44      	ldr	r4, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6863      	ldr	r3, [r4, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	f43f ae88 	beq.w	8001ba2 <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e92:	2a02      	cmp	r2, #2
 8001e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e98:	d159      	bne.n	8001f4e <HAL_RCC_OscConfig+0x462>
 8001e9a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001eaa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001eae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f934 	bl	800111c <HAL_GetTick>
 8001eb4:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001eb8:	4607      	mov	r7, r0
 8001eba:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	fa96 f3a6 	rbit	r3, r6
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	07d9      	lsls	r1, r3, #31
 8001ed2:	d436      	bmi.n	8001f42 <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed4:	6a2b      	ldr	r3, [r5, #32]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001edc:	6862      	ldr	r2, [r4, #4]
 8001ede:	68a9      	ldr	r1, [r5, #8]
 8001ee0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001eec:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	6063      	str	r3, [r4, #4]
 8001ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	2201      	movs	r2, #1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001f0a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001f0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f10:	f7ff f904 	bl	800111c <HAL_GetTick>
 8001f14:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001f18:	4606      	mov	r6, r0
 8001f1a:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	fa95 f3a5 	rbit	r3, r5
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	07da      	lsls	r2, r3, #31
 8001f32:	f53f ae14 	bmi.w	8001b5e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f8f1 	bl	800111c <HAL_GetTick>
 8001f3a:	1b80      	subs	r0, r0, r6
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d9ec      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42e>
 8001f40:	e652      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f8eb 	bl	800111c <HAL_GetTick>
 8001f46:	1bc0      	subs	r0, r0, r7
 8001f48:	2802      	cmp	r0, #2
 8001f4a:	d9b6      	bls.n	8001eba <HAL_RCC_OscConfig+0x3ce>
 8001f4c:	e64c      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
 8001f4e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	2200      	movs	r2, #0
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001f5e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001f62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f64:	f7ff f8da 	bl	800111c <HAL_GetTick>
 8001f68:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001f6c:	4606      	mov	r6, r0
 8001f6e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	fa95 f3a5 	rbit	r3, r5
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	07db      	lsls	r3, r3, #31
 8001f86:	f57f adea 	bpl.w	8001b5e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f8c7 	bl	800111c <HAL_GetTick>
 8001f8e:	1b80      	subs	r0, r0, r6
 8001f90:	2802      	cmp	r0, #2
 8001f92:	d9ec      	bls.n	8001f6e <HAL_RCC_OscConfig+0x482>
 8001f94:	e628      	b.n	8001be8 <HAL_RCC_OscConfig+0xfc>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001fa0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa2:	ac02      	add	r4, sp, #8
 8001fa4:	f103 0510 	add.w	r5, r3, #16
 8001fa8:	4622      	mov	r2, r4
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	c203      	stmia	r2!, {r0, r1}
 8001fb2:	42ab      	cmp	r3, r5
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	d1f7      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f88d 3004 	strb.w	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001fc0:	4c18      	ldr	r4, [pc, #96]	; (8002024 <HAL_RCC_GetSysClockFreq+0x88>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001fc2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001fc6:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	f001 030c 	and.w	r3, r1, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d124      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x7e>
 8001fd0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001fd4:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001fd8:	fab3 f283 	clz	r2, r3
 8001fdc:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8001fe0:	40d3      	lsrs	r3, r2
 8001fe2:	aa06      	add	r2, sp, #24
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fea:	03cb      	lsls	r3, r1, #15
 8001fec:	d513      	bpl.n	8002016 <HAL_RCC_GetSysClockFreq+0x7a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001fee:	6863      	ldr	r3, [r4, #4]
 8001ff0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff4:	fa92 f2a2 	rbit	r2, r2
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	40d3      	lsrs	r3, r2
 8002002:	aa06      	add	r2, sp, #24
 8002004:	4413      	add	r3, r2
 8002006:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_RCC_GetSysClockFreq+0x8c>)
 800200c:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002010:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002012:	b007      	add	sp, #28
 8002014:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetSysClockFreq+0x90>)
 8002018:	e7fa      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <HAL_RCC_GetSysClockFreq+0x8c>)
  return sysclockfreq;
 800201c:	e7f9      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x76>
 800201e:	bf00      	nop
 8002020:	08007648 	.word	0x08007648
 8002024:	40021000 	.word	0x40021000
 8002028:	007a1200 	.word	0x007a1200
 800202c:	003d0900 	.word	0x003d0900

08002030 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002030:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_RCC_ClockConfig+0x158>)
{
 8002032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002036:	6813      	ldr	r3, [r2, #0]
{
 8002038:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	428b      	cmp	r3, r1
{
 8002040:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002042:	d330      	bcc.n	80020a6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	6832      	ldr	r2, [r6, #0]
 8002046:	0794      	lsls	r4, r2, #30
 8002048:	d43a      	bmi.n	80020c0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	07d0      	lsls	r0, r2, #31
 800204c:	d440      	bmi.n	80020d0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800204e:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_RCC_ClockConfig+0x158>)
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	429d      	cmp	r5, r3
 8002058:	f0c0 8084 	bcc.w	8002164 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	6832      	ldr	r2, [r6, #0]
 800205e:	4c4b      	ldr	r4, [pc, #300]	; (800218c <HAL_RCC_ClockConfig+0x15c>)
 8002060:	f012 0f04 	tst.w	r2, #4
 8002064:	f040 8089 	bne.w	800217a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	0713      	lsls	r3, r2, #28
 800206a:	d506      	bpl.n	800207a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206c:	6863      	ldr	r3, [r4, #4]
 800206e:	6932      	ldr	r2, [r6, #16]
 8002070:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002074:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002078:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207a:	f7ff ff8f 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	22f0      	movs	r2, #240	; 0xf0
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208e:	40d3      	lsrs	r3, r2
 8002090:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x160>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	40d8      	lsrs	r0, r3
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <HAL_RCC_ClockConfig+0x164>)
 8002098:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff f812 	bl	80010c4 <HAL_InitTick>
  return HAL_OK;
 80020a0:	2000      	movs	r0, #0
}
 80020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f023 0307 	bic.w	r3, r3, #7
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	4299      	cmp	r1, r3
 80020b8:	d0c4      	beq.n	8002044 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4932      	ldr	r1, [pc, #200]	; (800218c <HAL_RCC_ClockConfig+0x15c>)
 80020c2:	68b0      	ldr	r0, [r6, #8]
 80020c4:	684b      	ldr	r3, [r1, #4]
 80020c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ca:	4303      	orrs	r3, r0
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e7bc      	b.n	800204a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d0:	6872      	ldr	r2, [r6, #4]
 80020d2:	4c2e      	ldr	r4, [pc, #184]	; (800218c <HAL_RCC_ClockConfig+0x15c>)
 80020d4:	2a01      	cmp	r2, #1
 80020d6:	d128      	bne.n	800212a <HAL_RCC_ClockConfig+0xfa>
 80020d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020dc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	6821      	ldr	r1, [r4, #0]
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	fa21 f303 	lsr.w	r3, r1, r3
 80020f2:	07d9      	lsls	r1, r3, #31
 80020f4:	d5e1      	bpl.n	80020ba <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	431a      	orrs	r2, r3
 8002102:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8002104:	f7ff f80a 	bl	800111c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800210a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210c:	2b01      	cmp	r3, #1
 800210e:	d112      	bne.n	8002136 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002110:	6863      	ldr	r3, [r4, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d099      	beq.n	800204e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe ffff 	bl	800111c <HAL_GetTick>
 800211e:	1bc0      	subs	r0, r0, r7
 8002120:	4540      	cmp	r0, r8
 8002122:	d9f5      	bls.n	8002110 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8002124:	2003      	movs	r0, #3
 8002126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	2a02      	cmp	r2, #2
 800212c:	bf0c      	ite	eq
 800212e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002132:	2302      	movne	r3, #2
 8002134:	e7d2      	b.n	80020dc <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	2b02      	cmp	r3, #2
 8002138:	d10f      	bne.n	800215a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213a:	6863      	ldr	r3, [r4, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d084      	beq.n	800204e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ffea 	bl	800111c <HAL_GetTick>
 8002148:	1bc0      	subs	r0, r0, r7
 800214a:	4540      	cmp	r0, r8
 800214c:	d9f5      	bls.n	800213a <HAL_RCC_ClockConfig+0x10a>
 800214e:	e7e9      	b.n	8002124 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe ffe4 	bl	800111c <HAL_GetTick>
 8002154:	1bc0      	subs	r0, r0, r7
 8002156:	4540      	cmp	r0, r8
 8002158:	d8e4      	bhi.n	8002124 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	f013 0f0c 	tst.w	r3, #12
 8002160:	d1f6      	bne.n	8002150 <HAL_RCC_ClockConfig+0x120>
 8002162:	e774      	b.n	800204e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f023 0307 	bic.w	r3, r3, #7
 800216a:	432b      	orrs	r3, r5
 800216c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	429d      	cmp	r5, r3
 8002176:	d1a0      	bne.n	80020ba <HAL_RCC_ClockConfig+0x8a>
 8002178:	e770      	b.n	800205c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	68f1      	ldr	r1, [r6, #12]
 800217e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002182:	430b      	orrs	r3, r1
 8002184:	6063      	str	r3, [r4, #4]
 8002186:	e76f      	b.n	8002068 <HAL_RCC_ClockConfig+0x38>
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	080076cc 	.word	0x080076cc
 8002194:	200001bc 	.word	0x200001bc

08002198 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002198:	4b01      	ldr	r3, [pc, #4]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	200001bc 	.word	0x200001bc

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	fa92 f2a2 	rbit	r2, r2
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b8:	40d3      	lsrs	r3, r2
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80021c0:	6810      	ldr	r0, [r2, #0]
}    
 80021c2:	40d8      	lsrs	r0, r3
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	080076dc 	.word	0x080076dc
 80021d0:	200001bc 	.word	0x200001bc

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021e8:	40d3      	lsrs	r3, r2
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80021f0:	6810      	ldr	r0, [r2, #0]
} 
 80021f2:	40d8      	lsrs	r0, r3
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080076dc 	.word	0x080076dc
 8002200:	200001bc 	.word	0x200001bc

08002204 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002204:	6a03      	ldr	r3, [r0, #32]
{
 8002206:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002212:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002214:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002216:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800221a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800221c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800221e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002222:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002224:	4d0a      	ldr	r5, [pc, #40]	; (8002250 <TIM_OC1_SetConfig+0x4c>)
 8002226:	42a8      	cmp	r0, r5
 8002228:	d10b      	bne.n	8002242 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800222a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800222c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002230:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002232:	698e      	ldr	r6, [r1, #24]
 8002234:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002236:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800223a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800223c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002240:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002242:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002244:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002246:	684a      	ldr	r2, [r1, #4]
 8002248:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224a:	6203      	str	r3, [r0, #32]
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00

08002254 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002254:	6a03      	ldr	r3, [r0, #32]
{
 8002256:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800225c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002262:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002264:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002266:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800226a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800226c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800226e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002272:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002276:	4d0b      	ldr	r5, [pc, #44]	; (80022a4 <TIM_OC3_SetConfig+0x50>)
 8002278:	42a8      	cmp	r0, r5
 800227a:	d10d      	bne.n	8002298 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800227c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800227e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002282:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002286:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002288:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800228a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800228e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002294:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002298:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800229a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800229c:	684a      	ldr	r2, [r1, #4]
 800229e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a0:	6203      	str	r3, [r0, #32]
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022a8:	6a03      	ldr	r3, [r0, #32]
{
 80022aa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022b6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80022c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80022c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 80022c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	4d06      	ldr	r5, [pc, #24]	; (80022e8 <TIM_OC4_SetConfig+0x40>)
 80022ce:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022d0:	bf02      	ittt	eq
 80022d2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022d4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022d8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022de:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022e0:	684a      	ldr	r2, [r1, #4]
 80022e2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e4:	6203      	str	r3, [r0, #32]
 80022e6:	bd30      	pop	{r4, r5, pc}
 80022e8:	40012c00 	.word	0x40012c00

080022ec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <TIM_Base_SetConfig+0x64>)
  tmpcr1 = TIMx->CR1;
 80022ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	4290      	cmp	r0, r2
 80022f2:	d00a      	beq.n	800230a <TIM_Base_SetConfig+0x1e>
 80022f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x1e>
 80022fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022fe:	4290      	cmp	r0, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x1e>
 8002302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002306:	4290      	cmp	r0, r2
 8002308:	d115      	bne.n	8002336 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800230a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002310:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <TIM_Base_SetConfig+0x64>)
 8002314:	4290      	cmp	r0, r2
 8002316:	d00a      	beq.n	800232e <TIM_Base_SetConfig+0x42>
 8002318:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0x42>
 800231e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002322:	4290      	cmp	r0, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0x42>
 8002326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232a:	4290      	cmp	r0, r2
 800232c:	d103      	bne.n	8002336 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002334:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002336:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	688b      	ldr	r3, [r1, #8]
 800233a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800233c:	680b      	ldr	r3, [r1, #0]
 800233e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <TIM_Base_SetConfig+0x64>)
 8002342:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002344:	bf04      	itt	eq
 8002346:	690b      	ldreq	r3, [r1, #16]
 8002348:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800234a:	2301      	movs	r3, #1
 800234c:	6143      	str	r3, [r0, #20]
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00

08002354 <HAL_TIM_PWM_Init>:
{
 8002354:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002356:	4604      	mov	r4, r0
 8002358:	b1a0      	cbz	r0, 8002384 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800235a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800235e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002362:	b91b      	cbnz	r3, 800236c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002364:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002368:	f002 feba 	bl	80050e0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800236c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	1d21      	adds	r1, r4, #4
 8002376:	f7ff ffb9 	bl	80022ec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800237a:	2301      	movs	r3, #1
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800237e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002382:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
}
 8002386:	bd10      	pop	{r4, pc}

08002388 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	6a03      	ldr	r3, [r0, #32]
{
 800238a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238c:	f023 0310 	bic.w	r3, r3, #16
 8002390:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002392:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002394:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002396:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002398:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800239a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800239e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 80023a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80023a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 80023a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ac:	4d0b      	ldr	r5, [pc, #44]	; (80023dc <TIM_OC2_SetConfig+0x54>)
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d10d      	bne.n	80023ce <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80023b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80023b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023bc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80023be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023c4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80023ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80023ce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80023d0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80023d2:	684a      	ldr	r2, [r1, #4]
 80023d4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80023d6:	6203      	str	r3, [r0, #32]
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00

080023e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80023e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80023e6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f04f 0002 	mov.w	r0, #2
 80023ee:	d025      	beq.n	800243c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80023f0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 80023f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  switch (Channel)
 80023fa:	2a0c      	cmp	r2, #12
 80023fc:	d818      	bhi.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
 80023fe:	e8df f002 	tbb	[pc, r2]
 8002402:	1707      	.short	0x1707
 8002404:	171e1717 	.word	0x171e1717
 8002408:	172f1717 	.word	0x172f1717
 800240c:	1717      	.short	0x1717
 800240e:	40          	.byte	0x40
 800240f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	f7ff fef7 	bl	8002204 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002416:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002418:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800242e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002430:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002432:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002434:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002438:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800243c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f7ff ffa2 	bl	8002388 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002444:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002446:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800245e:	e7e6      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	f7ff fef7 	bl	8002254 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002466:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002468:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	f022 0204 	bic.w	r2, r2, #4
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800247e:	61da      	str	r2, [r3, #28]
    break;
 8002480:	e7d6      	b.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	f7ff ff10 	bl	80022a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002488:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800248a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a2:	e7ec      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x9e>

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024a6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024a8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80024aa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80024ac:	ea23 0304 	bic.w	r3, r3, r4
 80024b0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024b2:	6a03      	ldr	r3, [r0, #32]
 80024b4:	408a      	lsls	r2, r1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	6202      	str	r2, [r0, #32]
 80024ba:	bd10      	pop	{r4, pc}

080024bc <HAL_TIM_PWM_Start>:
{
 80024bc:	b510      	push	{r4, lr}
 80024be:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024c0:	2201      	movs	r2, #1
 80024c2:	6800      	ldr	r0, [r0, #0]
 80024c4:	f7ff ffee 	bl	80024a4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_TIM_PWM_Start+0x28>)
}
 80024cc:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ce:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80024d0:	bf02      	ittt	eq
 80024d2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80024d4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80024d8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bd10      	pop	{r4, pc}
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80024ec:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f04f 0302 	mov.w	r3, #2
 80024f4:	d016      	beq.n	8002524 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>

  htim->State = HAL_TIM_STATE_BUSY;
 80024f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80024fa:	e891 0018 	ldmia.w	r1, {r3, r4}
 80024fe:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8002500:	688c      	ldr	r4, [r1, #8]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8002502:	6802      	ldr	r2, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8002504:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->LockLevel        |
 8002506:	68cc      	ldr	r4, [r1, #12]
 8002508:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->DeadTime         |
 800250a:	690c      	ldr	r4, [r1, #16]
 800250c:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakState       |
 800250e:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8002510:	6989      	ldr	r1, [r1, #24]
                                   sBreakDeadTimeConfig->BreakState       |
 8002512:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8002514:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8002516:	6453      	str	r3, [r2, #68]	; 0x44
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 8002518:	2301      	movs	r3, #1
 800251a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800251e:	2300      	movs	r3, #0
 8002520:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002524:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002526:	bd10      	pop	{r4, pc}

08002528 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002528:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 800252c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800252e:	2b01      	cmp	r3, #1
 8002530:	f04f 0302 	mov.w	r3, #2
 8002534:	d018      	beq.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002536:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800253a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800253c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800253e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002540:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002546:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4322      	orrs	r2, r4
 800254c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800255c:	2301      	movs	r3, #1
 800255e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002562:	2300      	movs	r3, #0
 8002564:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002568:	4618      	mov	r0, r3

  return HAL_OK;
}
 800256a:	bd10      	pop	{r4, pc}

0800256c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800256c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002570:	6805      	ldr	r5, [r0, #0]
 8002572:	68c2      	ldr	r2, [r0, #12]
 8002574:	692b      	ldr	r3, [r5, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002576:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800257c:	4313      	orrs	r3, r2
 800257e:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002580:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002582:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002584:	430b      	orrs	r3, r1
 8002586:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002588:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800258c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002590:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002592:	4313      	orrs	r3, r2
 8002594:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002596:	696b      	ldr	r3, [r5, #20]
 8002598:	6982      	ldr	r2, [r0, #24]
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259e:	4313      	orrs	r3, r2
 80025a0:	616b      	str	r3, [r5, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80025a2:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <UART_SetConfig+0x138>)
{
 80025a4:	4681      	mov	r9, r0
  if((huart->Instance == USART1))
 80025a6:	429d      	cmp	r5, r3
 80025a8:	f04f 0419 	mov.w	r4, #25
 80025ac:	d146      	bne.n	800263c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025ae:	f7ff fe11 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 80025b2:	fb04 f300 	mul.w	r3, r4, r0
 80025b6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80025ba:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025be:	00b6      	lsls	r6, r6, #2
 80025c0:	fbb3 f3f6 	udiv	r3, r3, r6
 80025c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80025c8:	011e      	lsls	r6, r3, #4
 80025ca:	f7ff fe03 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 80025ce:	4360      	muls	r0, r4
 80025d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	fbb0 f7f3 	udiv	r7, r0, r3
 80025da:	f7ff fdfb 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 80025de:	4360      	muls	r0, r4
 80025e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80025ee:	fb08 7313 	mls	r3, r8, r3, r7
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	fbb3 f3f8 	udiv	r3, r3, r8
 80025fa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80025fe:	f7ff fde9 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8002602:	4360      	muls	r0, r4
 8002604:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	fbb0 faf2 	udiv	sl, r0, r2
 800260e:	f7ff fde1 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002612:	4360      	muls	r0, r4
 8002614:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002622:	fb08 a313 	mls	r3, r8, r3, sl
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	3332      	adds	r3, #50	; 0x32
 800262a:	fbb3 f3f8 	udiv	r3, r3, r8
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	433b      	orrs	r3, r7
 8002634:	4433      	add	r3, r6
 8002636:	60ab      	str	r3, [r5, #8]
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263c:	f7ff fdb2 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002640:	fb04 f300 	mul.w	r3, r4, r0
 8002644:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002648:	f04f 0864 	mov.w	r8, #100	; 0x64
 800264c:	00b6      	lsls	r6, r6, #2
 800264e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002652:	fbb3 f3f8 	udiv	r3, r3, r8
 8002656:	011e      	lsls	r6, r3, #4
 8002658:	f7ff fda4 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 800265c:	4360      	muls	r0, r4
 800265e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fbb0 f7f3 	udiv	r7, r0, r3
 8002668:	f7ff fd9c 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 800266c:	4360      	muls	r0, r4
 800266e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb0 f3f3 	udiv	r3, r0, r3
 8002678:	fbb3 f3f8 	udiv	r3, r3, r8
 800267c:	fb08 7313 	mls	r3, r8, r3, r7
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	3332      	adds	r3, #50	; 0x32
 8002684:	fbb3 f3f8 	udiv	r3, r3, r8
 8002688:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800268c:	f7ff fd8a 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002690:	4360      	muls	r0, r4
 8002692:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	fbb0 faf2 	udiv	sl, r0, r2
 800269c:	f7ff fd82 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 80026a0:	e7b7      	b.n	8002612 <UART_SetConfig+0xa6>
 80026a2:	bf00      	nop
 80026a4:	40013800 	.word	0x40013800

080026a8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	4604      	mov	r4, r0
 80026ac:	460e      	mov	r6, r1
 80026ae:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80026b0:	f7fe fd34 	bl	800111c <HAL_GetTick>
 80026b4:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	ea36 0303 	bics.w	r3, r6, r3
 80026be:	d101      	bne.n	80026c4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80026c0:	2000      	movs	r0, #0
}
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80026c4:	1c6b      	adds	r3, r5, #1
 80026c6:	d0f7      	beq.n	80026b8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026c8:	b9c5      	cbnz	r5, 80026fc <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ca:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80026cc:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	f022 0220 	bic.w	r2, r2, #32
 80026dc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80026f4:	2300      	movs	r3, #0
 80026f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026fc:	f7fe fd0e 	bl	800111c <HAL_GetTick>
 8002700:	1bc0      	subs	r0, r0, r7
 8002702:	4285      	cmp	r5, r0
 8002704:	d2d7      	bcs.n	80026b6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8002706:	e7e0      	b.n	80026ca <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08002708 <HAL_UART_Init>:
{
 8002708:	b510      	push	{r4, lr}
  if(huart == NULL)
 800270a:	4604      	mov	r4, r0
 800270c:	b330      	cbz	r0, 800275c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800270e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002712:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002716:	b91b      	cbnz	r3, 8002720 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002718:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800271c:	f002 fd58 	bl	80051d0 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8002720:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8002722:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8002724:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002728:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800272a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800272c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002730:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002732:	f7ff ff1b 	bl	800256c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002736:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002748:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002750:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8002752:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002754:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002756:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800275a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
}
 800275e:	bd10      	pop	{r4, pc}

08002760 <HAL_UART_Transmit>:
{
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8002764:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8002768:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800276a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800276c:	2901      	cmp	r1, #1
{
 800276e:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002770:	d001      	beq.n	8002776 <HAL_UART_Transmit+0x16>
 8002772:	2922      	cmp	r1, #34	; 0x22
 8002774:	d14d      	bne.n	8002812 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8002776:	2d00      	cmp	r5, #0
 8002778:	d049      	beq.n	800280e <HAL_UART_Transmit+0xae>
 800277a:	2a00      	cmp	r2, #0
 800277c:	d047      	beq.n	800280e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800277e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002782:	2b01      	cmp	r3, #1
 8002784:	d045      	beq.n	8002812 <HAL_UART_Transmit+0xb2>
 8002786:	2301      	movs	r3, #1
 8002788:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	2300      	movs	r3, #0
 800278e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002790:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002794:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002796:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002798:	bf0c      	ite	eq
 800279a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 800279c:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 800279e:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80027a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80027a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80027a6:	b98a      	cbnz	r2, 80027cc <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80027a8:	4632      	mov	r2, r6
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff7b 	bl	80026a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80027b2:	b9c0      	cbnz	r0, 80027e6 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80027b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80027b8:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80027ba:	bf0c      	ite	eq
 80027bc:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80027be:	2301      	movne	r3, #1
 80027c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80027c4:	2300      	movs	r3, #0
 80027c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027cc:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80027ce:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80027d4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80027d6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80027da:	4632      	mov	r2, r6
 80027dc:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027de:	d10d      	bne.n	80027fc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80027e0:	f7ff ff62 	bl	80026a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80027e4:	b108      	cbz	r0, 80027ea <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80027e6:	2003      	movs	r0, #3
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027ea:	882b      	ldrh	r3, [r5, #0]
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	b943      	cbnz	r3, 800280a <HAL_UART_Transmit+0xaa>
          pData +=2;
 80027f8:	3502      	adds	r5, #2
 80027fa:	e7d3      	b.n	80027a4 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80027fc:	f7ff ff54 	bl	80026a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002800:	2800      	cmp	r0, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	782a      	ldrb	r2, [r5, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	3501      	adds	r5, #1
 800280c:	e7ca      	b.n	80027a4 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002812:	2002      	movs	r0, #2
}
 8002814:	bd70      	pop	{r4, r5, r6, pc}

08002816 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002816:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800281a:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_UART_Receive_IT+0xe>
 8002820:	2b12      	cmp	r3, #18
 8002822:	d128      	bne.n	8002876 <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 8002824:	b329      	cbz	r1, 8002872 <HAL_UART_Receive_IT+0x5c>
 8002826:	b322      	cbz	r2, 8002872 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8002828:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800282c:	2b01      	cmp	r3, #1
 800282e:	d022      	beq.n	8002876 <HAL_UART_Receive_IT+0x60>
 8002830:	2301      	movs	r3, #1
 8002832:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 800283a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800283c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800283e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002842:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002846:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002848:	bf0c      	ite	eq
 800284a:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800284c:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800284e:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002850:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002854:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 8002856:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285c:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800285e:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8002860:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8002870:	4770      	bx	lr
      return HAL_ERROR;
 8002872:	2001      	movs	r0, #1
 8002874:	4770      	bx	lr
    return HAL_BUSY;
 8002876:	2002      	movs	r0, #2
}
 8002878:	4770      	bx	lr

0800287a <HAL_UART_TxCpltCallback>:
 800287a:	4770      	bx	lr

0800287c <HAL_UART_ErrorCallback>:
{
 800287c:	4770      	bx	lr

0800287e <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800287e:	6802      	ldr	r2, [r0, #0]
{
 8002880:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002882:	6811      	ldr	r1, [r2, #0]
{
 8002884:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002886:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002888:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800288a:	d505      	bpl.n	8002898 <HAL_UART_IRQHandler+0x1a>
 800288c:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800288e:	bf42      	ittt	mi
 8002890:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8002892:	f043 0301 	orrmi.w	r3, r3, #1
 8002896:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002898:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800289a:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800289c:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800289e:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028a2:	d504      	bpl.n	80028ae <HAL_UART_IRQHandler+0x30>
 80028a4:	b11b      	cbz	r3, 80028ae <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028a8:	f041 0104 	orr.w	r1, r1, #4
 80028ac:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80028ae:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028b0:	0749      	lsls	r1, r1, #29
 80028b2:	d504      	bpl.n	80028be <HAL_UART_IRQHandler+0x40>
 80028b4:	b11b      	cbz	r3, 80028be <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028b8:	f041 0102 	orr.w	r1, r1, #2
 80028bc:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80028be:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028c0:	0708      	lsls	r0, r1, #28
 80028c2:	d504      	bpl.n	80028ce <HAL_UART_IRQHandler+0x50>
 80028c4:	b11b      	cbz	r3, 80028ce <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80028ce:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80028d0:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028d2:	0689      	lsls	r1, r1, #26
 80028d4:	d533      	bpl.n	800293e <HAL_UART_IRQHandler+0xc0>
 80028d6:	0698      	lsls	r0, r3, #26
 80028d8:	d531      	bpl.n	800293e <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 80028da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80028de:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80028e2:	2b22      	cmp	r3, #34	; 0x22
 80028e4:	d12b      	bne.n	800293e <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	6921      	ldr	r1, [r4, #16]
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f0:	d176      	bne.n	80029e0 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d16f      	bne.n	80029d8 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8002900:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002902:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002904:	3b01      	subs	r3, #1
 8002906:	b29b      	uxth	r3, r3
 8002908:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800290a:	b9c3      	cbnz	r3, 800293e <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800290c:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 800290e:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	f022 0220 	bic.w	r2, r2, #32
 8002916:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002918:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800291c:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800291e:	bf17      	itett	ne
 8002920:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002922:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002924:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002928:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800292a:	bf1f      	itttt	ne
 800292c:	695a      	ldrne	r2, [r3, #20]
 800292e:	f022 0201 	bicne.w	r2, r2, #1
 8002932:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8002934:	2301      	movne	r3, #1
 8002936:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 800293a:	f002 fb23 	bl	8004f84 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002942:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002944:	0609      	lsls	r1, r1, #24
 8002946:	d522      	bpl.n	800298e <HAL_UART_IRQHandler+0x110>
 8002948:	0610      	lsls	r0, r2, #24
 800294a:	d520      	bpl.n	800298e <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 800294c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002950:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002954:	2a12      	cmp	r2, #18
 8002956:	d11a      	bne.n	800298e <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002958:	68a2      	ldr	r2, [r4, #8]
 800295a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800295e:	6a22      	ldr	r2, [r4, #32]
 8002960:	d14c      	bne.n	80029fc <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002968:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800296a:	6921      	ldr	r1, [r4, #16]
 800296c:	2900      	cmp	r1, #0
 800296e:	d143      	bne.n	80029f8 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8002970:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8002972:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8002974:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002976:	3a01      	subs	r2, #1
 8002978:	b292      	uxth	r2, r2
 800297a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800297c:	b93a      	cbnz	r2, 800298e <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002984:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298c:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800298e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002990:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002992:	0649      	lsls	r1, r1, #25
 8002994:	d510      	bpl.n	80029b8 <HAL_UART_IRQHandler+0x13a>
 8002996:	0652      	lsls	r2, r2, #25
 8002998:	d50e      	bpl.n	80029b8 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800299a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800299c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800299e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a2:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80029a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80029a8:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 80029aa:	bf0c      	ite	eq
 80029ac:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 80029ae:	2301      	movne	r3, #1
 80029b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80029b4:	f7ff ff61 	bl	800287a <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029ba:	b15b      	cbz	r3, 80029d4 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80029bc:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 80029be:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	9201      	str	r2, [sp, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80029d0:	f7ff ff54 	bl	800287c <HAL_UART_ErrorCallback>
}
 80029d4:	b002      	add	sp, #8
 80029d6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f823 2b01 	strh.w	r2, [r3], #1
 80029de:	e78f      	b.n	8002900 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80029e0:	b921      	cbnz	r1, 80029ec <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	6852      	ldr	r2, [r2, #4]
 80029e6:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e78a      	b.n	8002902 <HAL_UART_IRQHandler+0x84>
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	62a1      	str	r1, [r4, #40]	; 0x28
 80029f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029f6:	e7f7      	b.n	80029e8 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80029f8:	3201      	adds	r2, #1
 80029fa:	e7ba      	b.n	8002972 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029fc:	1c51      	adds	r1, r2, #1
 80029fe:	6221      	str	r1, [r4, #32]
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e7b6      	b.n	8002974 <HAL_UART_IRQHandler+0xf6>
	...

08002a08 <MPU9250_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MPU9250_Init()
 ***********************************/
void MPU9250_Init()
{
 8002a08:	b510      	push	{r4, lr}
	// Verify device
	uint8_t data = I2C_ReadByte(MPU9250_ADDRESS, WHO_AM_I, __FILE__, __LINE__);
 8002a0a:	233d      	movs	r3, #61	; 0x3d
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <MPU9250_Init+0x80>)
 8002a0e:	2175      	movs	r1, #117	; 0x75
 8002a10:	20d0      	movs	r0, #208	; 0xd0
 8002a12:	f001 faeb 	bl	8003fec <I2C_ReadByte>
	if (data != WHO_AM_I_VALUE) _Error_Handler(__FILE__, __LINE__);
 8002a16:	2871      	cmp	r0, #113	; 0x71
 8002a18:	d003      	beq.n	8002a22 <MPU9250_Init+0x1a>
 8002a1a:	213e      	movs	r1, #62	; 0x3e
 8002a1c:	481a      	ldr	r0, [pc, #104]	; (8002a88 <MPU9250_Init+0x80>)
 8002a1e:	f001 ff1b 	bl	8004858 <_Error_Handler>

	// Device configuration
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_1, 0x80, 1);	// Reset
 8002a22:	2301      	movs	r3, #1
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	216b      	movs	r1, #107	; 0x6b
 8002a28:	20d0      	movs	r0, #208	; 0xd0
 8002a2a:	f001 fabf 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_1, 0x01, 1);	// Set clock source to be PLL with x-axis gyroscope reference
 8002a2e:	2301      	movs	r3, #1
 8002a30:	216b      	movs	r1, #107	; 0x6b
 8002a32:	461a      	mov	r2, r3
 8002a34:	20d0      	movs	r0, #208	; 0xd0
 8002a36:	f001 fab9 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU_PWR_MGMT_2, 0x00, 1);	// Enable Accel and Gyro
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	216c      	movs	r1, #108	; 0x6c
 8002a40:	20d0      	movs	r0, #208	; 0xd0
 8002a42:	f001 fab3 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 	   0x00, 1);	// Sample Rate Divider (Not set)
 8002a46:	2301      	movs	r3, #1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2119      	movs	r1, #25
 8002a4c:	20d0      	movs	r0, #208	; 0xd0
 8002a4e:	f001 faad 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG2,  0x03, 1);	// DLPF 184Hz
 8002a52:	2301      	movs	r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	211d      	movs	r1, #29
 8002a58:	20d0      	movs	r0, #208	; 0xd0
 8002a5a:	f001 faa7 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, MPU9250_CONFIG, 0x03, 1);	// DLPF 184Hz
 8002a5e:	2301      	movs	r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	211a      	movs	r1, #26
 8002a64:	20d0      	movs	r0, #208	; 0xd0
 8002a66:	f001 faa1 	bl	8003fac <I2C_WriteByte>

	// Full scale settings
	I2C_WriteByte(MPU9250_ADDRESS, GYRO_CONFIG, GYRO_FS_1000_DPS, 1);
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	211b      	movs	r1, #27
 8002a70:	20d0      	movs	r0, #208	; 0xd0
 8002a72:	f001 fa9b 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, ACC_FS_4_G, 1);
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, ACC_FS_4_G, 1);
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	211c      	movs	r1, #28
 8002a80:	20d0      	movs	r0, #208	; 0xd0
 8002a82:	f001 ba93 	b.w	8003fac <I2C_WriteByte>
 8002a86:	bf00      	nop
 8002a88:	08007658 	.word	0x08007658

08002a8c <MPU9250_ReadAccelData>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MPU9250_ReadAccelData()
 ***********************************/
void MPU9250_ReadAccelData()
{
 8002a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Data buffer
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0};
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	f8ad 300c 	strh.w	r3, [sp, #12]

	// Read raw data
	I2C_ReadByteArray(MPU9250_ADDRESS, ACCEL_XOUT_H, raw_data, 6, __FILE__, __LINE__);
 8002a96:	235a      	movs	r3, #90	; 0x5a
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <MPU9250_ReadAccelData+0x9c>)
 8002a9c:	aa02      	add	r2, sp, #8
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	213b      	movs	r1, #59	; 0x3b
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	20d0      	movs	r0, #208	; 0xd0
 8002aa6:	f001 fad7 	bl	8004058 <I2C_ReadByteArray>

	// Convert and store it
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
	accelRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002aaa:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002aae:	f89d 500b 	ldrb.w	r5, [sp, #11]
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002ab2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002ab6:	f89d 0009 	ldrb.w	r0, [sp, #9]
	accelRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002aba:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	accelRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002abe:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002ac2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002ac6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	accelRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002aca:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <MPU9250_ReadAccelData+0xa0>)
	accelRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002ad0:	b22d      	sxth	r5, r5
	accelRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002ad2:	b224      	sxth	r4, r4
	accelRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002ad4:	b200      	sxth	r0, r0
 8002ad6:	8018      	strh	r0, [r3, #0]
	accelRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002ad8:	805d      	strh	r5, [r3, #2]
	accelRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002ada:	809c      	strh	r4, [r3, #4]

	accelData.x = (float) accelRaw.x * 4.0f/32768.0f;
 8002adc:	f7fe f8b2 	bl	8000c44 <__aeabi_i2f>
 8002ae0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ae4:	f7fe f902 	bl	8000cec <__aeabi_fmul>
 8002ae8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002aec:	f7fe f8fe 	bl	8000cec <__aeabi_fmul>
 8002af0:	4e0f      	ldr	r6, [pc, #60]	; (8002b30 <MPU9250_ReadAccelData+0xa4>)
 8002af2:	6030      	str	r0, [r6, #0]
	accelData.y = (float) accelRaw.y * 4.0f/32768.0f;
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7fe f8a5 	bl	8000c44 <__aeabi_i2f>
 8002afa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002afe:	f7fe f8f5 	bl	8000cec <__aeabi_fmul>
 8002b02:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002b06:	f7fe f8f1 	bl	8000cec <__aeabi_fmul>
 8002b0a:	6070      	str	r0, [r6, #4]
	accelData.z = (float) accelRaw.z * 4.0f/32768.0f;
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7fe f899 	bl	8000c44 <__aeabi_i2f>
 8002b12:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b16:	f7fe f8e9 	bl	8000cec <__aeabi_fmul>
 8002b1a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002b1e:	f7fe f8e5 	bl	8000cec <__aeabi_fmul>
 8002b22:	60b0      	str	r0, [r6, #8]
	serialFloat(accelData.y);
	serialWrite('\t');
	serialFloat(accelData.z);
	serialWrite('\n');
#endif
}
 8002b24:	b004      	add	sp, #16
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	08007658 	.word	0x08007658
 8002b2c:	200002f0 	.word	0x200002f0
 8002b30:	200002cc 	.word	0x200002cc

08002b34 <MPU9250_ReadGyroData>:
 Example Call	:	MPU9250_ReadGyroData()
 ***********************************/
void MPU9250_ReadGyroData()
{
	// Data buffer
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0};
 8002b34:	2300      	movs	r3, #0
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b085      	sub	sp, #20
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0};
 8002b3a:	9302      	str	r3, [sp, #8]
 8002b3c:	f8ad 300c 	strh.w	r3, [sp, #12]

	// Read raw data
	I2C_ReadByteArray(MPU9250_ADDRESS, GYRO_XOUT_H, raw_data, 6, __FILE__, __LINE__);
 8002b40:	237c      	movs	r3, #124	; 0x7c
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <MPU9250_ReadGyroData+0xac>)
 8002b46:	aa02      	add	r2, sp, #8
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2143      	movs	r1, #67	; 0x43
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	20d0      	movs	r0, #208	; 0xd0
 8002b50:	f001 fa82 	bl	8004058 <I2C_ReadByteArray>

	// Convert and store it
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
	gyroRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002b54:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002b58:	f89d 500b 	ldrb.w	r5, [sp, #11]
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002b5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002b60:	f89d 0009 	ldrb.w	r0, [sp, #9]
	gyroRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002b64:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	gyroRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002b68:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002b6c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002b70:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	gyroRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002b74:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MPU9250_ReadGyroData+0xb0>)
	gyroRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002b7a:	b22d      	sxth	r5, r5
	gyroRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002b7c:	b224      	sxth	r4, r4
	gyroRaw.x = (int16_t) ((raw_data[0]<<8) | raw_data[1]);
 8002b7e:	b200      	sxth	r0, r0
 8002b80:	8018      	strh	r0, [r3, #0]
	gyroRaw.y = (int16_t) ((raw_data[2]<<8) | raw_data[3]);
 8002b82:	805d      	strh	r5, [r3, #2]
	gyroRaw.z = (int16_t) ((raw_data[4]<<8) | raw_data[5]);
 8002b84:	809c      	strh	r4, [r3, #4]

	gyroData.x = ((float) gyroRaw.x * 1000.0f/32768.0f) - gyroBias.x;
 8002b86:	f7fe f85d 	bl	8000c44 <__aeabi_i2f>
 8002b8a:	4f17      	ldr	r7, [pc, #92]	; (8002be8 <MPU9250_ReadGyroData+0xb4>)
 8002b8c:	4917      	ldr	r1, [pc, #92]	; (8002bec <MPU9250_ReadGyroData+0xb8>)
 8002b8e:	f7fe f8ad 	bl	8000cec <__aeabi_fmul>
 8002b92:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002b96:	f7fe f8a9 	bl	8000cec <__aeabi_fmul>
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	f7fd ff9c 	bl	8000ad8 <__aeabi_fsub>
 8002ba0:	4e13      	ldr	r6, [pc, #76]	; (8002bf0 <MPU9250_ReadGyroData+0xbc>)
 8002ba2:	6030      	str	r0, [r6, #0]
	gyroData.y = ((float) gyroRaw.y * 1000.0f/32768.0f) - gyroBias.y;
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f7fe f84d 	bl	8000c44 <__aeabi_i2f>
 8002baa:	4910      	ldr	r1, [pc, #64]	; (8002bec <MPU9250_ReadGyroData+0xb8>)
 8002bac:	f7fe f89e 	bl	8000cec <__aeabi_fmul>
 8002bb0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002bb4:	f7fe f89a 	bl	8000cec <__aeabi_fmul>
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	f7fd ff8d 	bl	8000ad8 <__aeabi_fsub>
 8002bbe:	6070      	str	r0, [r6, #4]
	gyroData.z = ((float) gyroRaw.z * 1000.0f/32768.0f) - gyroBias.z;
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fe f83f 	bl	8000c44 <__aeabi_i2f>
 8002bc6:	4909      	ldr	r1, [pc, #36]	; (8002bec <MPU9250_ReadGyroData+0xb8>)
 8002bc8:	f7fe f890 	bl	8000cec <__aeabi_fmul>
 8002bcc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8002bd0:	f7fe f88c 	bl	8000cec <__aeabi_fmul>
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	f7fd ff7f 	bl	8000ad8 <__aeabi_fsub>
 8002bda:	60b0      	str	r0, [r6, #8]
	serialFloat(gyroData.y);
	serialWrite('\t');
	serialFloat(gyroData.z);
	serialWrite('\n');
#endif
}
 8002bdc:	b005      	add	sp, #20
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be0:	08007658 	.word	0x08007658
 8002be4:	200002ba 	.word	0x200002ba
 8002be8:	20000000 	.word	0x20000000
 8002bec:	447a0000 	.word	0x447a0000
 8002bf0:	200002c0 	.word	0x200002c0

08002bf4 <AK8963_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	AK8963_Init()
 ***********************************/
void AK8963_Init()
{
 8002bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Enable access to Magnetometer via MPU
	I2C_WriteByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22, 1);	// Set bypass mode for external I2C master connection
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2222      	movs	r2, #34	; 0x22
 8002bfa:	2137      	movs	r1, #55	; 0x37
 8002bfc:	20d0      	movs	r0, #208	; 0xd0
 8002bfe:	f001 f9d5 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MPU9250_ADDRESS, USER_CTRL,   0x01, 1); 	// Disable master mode and clear all signal paths
 8002c02:	2301      	movs	r3, #1
 8002c04:	216a      	movs	r1, #106	; 0x6a
 8002c06:	461a      	mov	r2, r3
 8002c08:	20d0      	movs	r0, #208	; 0xd0
 8002c0a:	f001 f9cf 	bl	8003fac <I2C_WriteByte>

	// Verify magnetometer
	uint8_t data = I2C_ReadByte(MAG_ADDRESS, MAG_WIA, __FILE__, __LINE__);
 8002c0e:	23ad      	movs	r3, #173	; 0xad
 8002c10:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <AK8963_Init+0xdc>)
 8002c12:	2100      	movs	r1, #0
 8002c14:	2018      	movs	r0, #24
 8002c16:	f001 f9e9 	bl	8003fec <I2C_ReadByte>
	if (data != MAG_WIA_VALUE) _Error_Handler(__FILE__, __LINE__);
 8002c1a:	2848      	cmp	r0, #72	; 0x48
 8002c1c:	4c2c      	ldr	r4, [pc, #176]	; (8002cd0 <AK8963_Init+0xdc>)
 8002c1e:	d003      	beq.n	8002c28 <AK8963_Init+0x34>
 8002c20:	21ae      	movs	r1, #174	; 0xae
 8002c22:	4620      	mov	r0, r4
 8002c24:	f001 fe18 	bl	8004858 <_Error_Handler>

	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL2, 0x01, 1);		// Reset magnetometer
 8002c28:	2301      	movs	r3, #1
 8002c2a:	210b      	movs	r1, #11
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2018      	movs	r0, #24
 8002c30:	f001 f9bc 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x00, 1);		// Power down magnetometer
 8002c34:	2301      	movs	r3, #1
 8002c36:	2200      	movs	r2, #0
 8002c38:	210a      	movs	r1, #10
 8002c3a:	2018      	movs	r0, #24
 8002c3c:	f001 f9b6 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x0F, 1); 	// Enter Fuse ROM access mode
 8002c40:	2301      	movs	r3, #1
 8002c42:	220f      	movs	r2, #15
 8002c44:	210a      	movs	r1, #10
 8002c46:	2018      	movs	r0, #24
 8002c48:	f001 f9b0 	bl	8003fac <I2C_WriteByte>

	// Read calibration registers
	uint8_t rawData[3];
	I2C_ReadByteArray(MAG_ADDRESS, MAG_ASAX, rawData, 3, __FILE__, __LINE__);
 8002c4c:	23b6      	movs	r3, #182	; 0xb6
 8002c4e:	aa03      	add	r2, sp, #12
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	9400      	str	r4, [sp, #0]
 8002c54:	2303      	movs	r3, #3
 8002c56:	2110      	movs	r1, #16
 8002c58:	2018      	movs	r0, #24
 8002c5a:	f001 f9fd 	bl	8004058 <I2C_ReadByteArray>

	// Calibrate magnetometer factory offset
	magCalib.x =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values
 8002c5e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c62:	4c1c      	ldr	r4, [pc, #112]	; (8002cd4 <AK8963_Init+0xe0>)
 8002c64:	3880      	subs	r0, #128	; 0x80
 8002c66:	f7fd ffed 	bl	8000c44 <__aeabi_i2f>
 8002c6a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8002c6e:	f7fe f83d 	bl	8000cec <__aeabi_fmul>
 8002c72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c76:	f7fd ff31 	bl	8000adc <__addsf3>
 8002c7a:	6020      	str	r0, [r4, #0]
	magCalib.y =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8002c7c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002c80:	3880      	subs	r0, #128	; 0x80
 8002c82:	f7fd ffdf 	bl	8000c44 <__aeabi_i2f>
 8002c86:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8002c8a:	f7fe f82f 	bl	8000cec <__aeabi_fmul>
 8002c8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c92:	f7fd ff23 	bl	8000adc <__addsf3>
 8002c96:	6060      	str	r0, [r4, #4]
	magCalib.z =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8002c98:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002c9c:	3880      	subs	r0, #128	; 0x80
 8002c9e:	f7fd ffd1 	bl	8000c44 <__aeabi_i2f>
 8002ca2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8002ca6:	f7fe f821 	bl	8000cec <__aeabi_fmul>
 8002caa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002cae:	f7fd ff15 	bl	8000adc <__addsf3>
	serialFloat(magCalib.z);
	serialWrite('\n');
#endif

	// Magnetometer settings
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x00, 1);		// Power down magnetometer
 8002cb2:	2301      	movs	r3, #1
	magCalib.z =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8002cb4:	60a0      	str	r0, [r4, #8]
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x00, 1);		// Power down magnetometer
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	210a      	movs	r1, #10
 8002cba:	2018      	movs	r0, #24
 8002cbc:	f001 f976 	bl	8003fac <I2C_WriteByte>
	I2C_WriteByte(MAG_ADDRESS, MAG_CNTL1, 0x16, 1); 	// Res: 16 Bit, Mode: Continuous Mode 2 (100Hz)
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	2216      	movs	r2, #22
 8002cc4:	210a      	movs	r1, #10
 8002cc6:	2018      	movs	r0, #24
 8002cc8:	f001 f970 	bl	8003fac <I2C_WriteByte>
}
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd10      	pop	{r4, pc}
 8002cd0:	08007658 	.word	0x08007658
 8002cd4:	200002e4 	.word	0x200002e4

08002cd8 <AK8963_ReadData>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	AK8963_ReadData()
 ***********************************/
void AK8963_ReadData()
{
 8002cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0, 0};
 8002cdc:	2300      	movs	r3, #0

	// Check if data is ready
	if (I2C_ReadByte(MAG_ADDRESS, MAG_ST1, __FILE__, __LINE__) & 0x01)
 8002cde:	4c3c      	ldr	r4, [pc, #240]	; (8002dd0 <AK8963_ReadData+0xf8>)
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0, 0};
 8002ce0:	9302      	str	r3, [sp, #8]
	if (I2C_ReadByte(MAG_ADDRESS, MAG_ST1, __FILE__, __LINE__) & 0x01)
 8002ce2:	4622      	mov	r2, r4
	uint8_t raw_data[] = {0, 0, 0, 0, 0, 0, 0};
 8002ce4:	f8cd 300b 	str.w	r3, [sp, #11]
	if (I2C_ReadByte(MAG_ADDRESS, MAG_ST1, __FILE__, __LINE__) & 0x01)
 8002ce8:	2102      	movs	r1, #2
 8002cea:	23d7      	movs	r3, #215	; 0xd7
 8002cec:	2018      	movs	r0, #24
 8002cee:	f001 f97d 	bl	8003fec <I2C_ReadByte>
 8002cf2:	07c2      	lsls	r2, r0, #31
 8002cf4:	d563      	bpl.n	8002dbe <AK8963_ReadData+0xe6>
	{
		// Read data registers and ST2 register to check overflow
		I2C_ReadByteArray(MAG_ADDRESS, MAG_HXL, raw_data, 7, __FILE__, __LINE__);
 8002cf6:	23da      	movs	r3, #218	; 0xda
 8002cf8:	9400      	str	r4, [sp, #0]
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	aa02      	add	r2, sp, #8
 8002cfe:	2307      	movs	r3, #7
 8002d00:	2103      	movs	r1, #3
 8002d02:	2018      	movs	r0, #24
 8002d04:	f001 f9a8 	bl	8004058 <I2C_ReadByteArray>
		uint8_t OVF = raw_data[6];

		// Store data if no overflow occurred
		if (!(OVF & 0x08))
 8002d08:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002d0c:	071b      	lsls	r3, r3, #28
 8002d0e:	d459      	bmi.n	8002dc4 <AK8963_ReadData+0xec>
		{
			// Pack into 16-bit data
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
			magRaw.y = (int16_t) ((raw_data[3]<<8) | raw_data[2]);
 8002d10:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002d14:	f89d 500a 	ldrb.w	r5, [sp, #10]
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 8002d18:	f89d 3009 	ldrb.w	r3, [sp, #9]
			magRaw.y = (int16_t) ((raw_data[3]<<8) | raw_data[2]);
 8002d1c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 8002d20:	f89d 0008 	ldrb.w	r0, [sp, #8]
			magRaw.z = (int16_t) ((raw_data[5]<<8) | raw_data[4]);
 8002d24:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002d28:	f89d 400c 	ldrb.w	r4, [sp, #12]
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 8002d2c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			magRaw.z = (int16_t) ((raw_data[5]<<8) | raw_data[4]);
 8002d30:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <AK8963_ReadData+0xfc>)
 8002d36:	b200      	sxth	r0, r0
			magRaw.y = (int16_t) ((raw_data[3]<<8) | raw_data[2]);
 8002d38:	b22d      	sxth	r5, r5
			magRaw.z = (int16_t) ((raw_data[5]<<8) | raw_data[4]);
 8002d3a:	b224      	sxth	r4, r4
			magRaw.x = (int16_t) ((raw_data[1]<<8) | raw_data[0]);
 8002d3c:	8018      	strh	r0, [r3, #0]
			magRaw.y = (int16_t) ((raw_data[3]<<8) | raw_data[2]);
 8002d3e:	805d      	strh	r5, [r3, #2]
			magRaw.z = (int16_t) ((raw_data[5]<<8) | raw_data[4]);
 8002d40:	809c      	strh	r4, [r3, #4]

			// Apply the calibration and conversion factors
			magData.x = (((float) magRaw.x * mRes * magCalib.x) - magBias.x) * magScale.x;
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <AK8963_ReadData+0x100>)
 8002d44:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002de8 <AK8963_ReadData+0x110>
 8002d48:	f8d3 a000 	ldr.w	sl, [r3]
 8002d4c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8002dec <AK8963_ReadData+0x114>
 8002d50:	f7fd ff78 	bl	8000c44 <__aeabi_i2f>
 8002d54:	4651      	mov	r1, sl
 8002d56:	f7fd ffc9 	bl	8000cec <__aeabi_fmul>
 8002d5a:	4f20      	ldr	r7, [pc, #128]	; (8002ddc <AK8963_ReadData+0x104>)
 8002d5c:	f8d9 1000 	ldr.w	r1, [r9]
 8002d60:	f7fd ffc4 	bl	8000cec <__aeabi_fmul>
 8002d64:	f8d8 1000 	ldr.w	r1, [r8]
 8002d68:	f7fd feb6 	bl	8000ad8 <__aeabi_fsub>
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	f7fd ffbd 	bl	8000cec <__aeabi_fmul>
 8002d72:	4e1b      	ldr	r6, [pc, #108]	; (8002de0 <AK8963_ReadData+0x108>)
 8002d74:	6030      	str	r0, [r6, #0]
			magData.y = (((float) magRaw.y * mRes * magCalib.y) - magBias.y) * magScale.y;
 8002d76:	4628      	mov	r0, r5
 8002d78:	f7fd ff64 	bl	8000c44 <__aeabi_i2f>
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	f7fd ffb5 	bl	8000cec <__aeabi_fmul>
 8002d82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002d86:	f7fd ffb1 	bl	8000cec <__aeabi_fmul>
 8002d8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002d8e:	f7fd fea3 	bl	8000ad8 <__aeabi_fsub>
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	f7fd ffaa 	bl	8000cec <__aeabi_fmul>
 8002d98:	6070      	str	r0, [r6, #4]
			magData.z = (((float) magRaw.z * mRes * magCalib.z) - magBias.z) * magScale.z;
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7fd ff52 	bl	8000c44 <__aeabi_i2f>
 8002da0:	4651      	mov	r1, sl
 8002da2:	f7fd ffa3 	bl	8000cec <__aeabi_fmul>
 8002da6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8002daa:	f7fd ff9f 	bl	8000cec <__aeabi_fmul>
 8002dae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002db2:	f7fd fe91 	bl	8000ad8 <__aeabi_fsub>
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	f7fd ff98 	bl	8000cec <__aeabi_fmul>
 8002dbc:	60b0      	str	r0, [r6, #8]
		{
			msp_txf_status.i2c_errors_count++;
			//serialPrint("\n* Magnetometer Overflow *\n;");
		}
	}
}
 8002dbe:	b004      	add	sp, #16
 8002dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			msp_txf_status.i2c_errors_count++;
 8002dc4:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <AK8963_ReadData+0x10c>)
 8002dc6:	8853      	ldrh	r3, [r2, #2]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	8053      	strh	r3, [r2, #2]
}
 8002dcc:	e7f7      	b.n	8002dbe <AK8963_ReadData+0xe6>
 8002dce:	bf00      	nop
 8002dd0:	08007658 	.word	0x08007658
 8002dd4:	200002b4 	.word	0x200002b4
 8002dd8:	2000001c 	.word	0x2000001c
 8002ddc:	2000002c 	.word	0x2000002c
 8002de0:	200002d8 	.word	0x200002d8
 8002de4:	20001435 	.word	0x20001435
 8002de8:	200002e4 	.word	0x200002e4
 8002dec:	20000020 	.word	0x20000020

08002df0 <IMU_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	IMU_Init()
 ***********************************/
void IMU_Init()
{
 8002df0:	b508      	push	{r3, lr}
	MPU9250_Init();
 8002df2:	f7ff fe09 	bl	8002a08 <MPU9250_Init>
	AK8963_Init();
 8002df6:	f7ff fefd 	bl	8002bf4 <AK8963_Init>

	//float GyroMeasError = M_PI * (60.0f / 180.0f);	// Gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
	//float beta = sqrt(3.0f / 4.0f) * GyroMeasError;	// Compute beta

	MadgwickSetBeta(0.6f);
 8002dfa:	4804      	ldr	r0, [pc, #16]	; (8002e0c <IMU_Init+0x1c>)
 8002dfc:	f000 fa32 	bl	8003264 <MadgwickSetBeta>
	MadgwickSetDelta(0.0f);
}
 8002e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MadgwickSetDelta(0.0f);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f000 ba33 	b.w	8003270 <MadgwickSetDelta>
 8002e0a:	bf00      	nop
 8002e0c:	3f19999a 	.word	0x3f19999a

08002e10 <AHRS_GetPitch>:
 Return Value	:	Pitch angle
 Example Call	:	AHRS_GetPitch()
 ***********************************/
float AHRS_GetPitch()
{
	return lowPassFilter(&lpf_pitch, AHRS_Angle[1]);
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <AHRS_GetPitch+0xc>)
 8002e12:	4803      	ldr	r0, [pc, #12]	; (8002e20 <AHRS_GetPitch+0x10>)
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	f001 b833 	b.w	8003e80 <lowPassFilter>
 8002e1a:	bf00      	nop
 8002e1c:	20000248 	.word	0x20000248
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <AHRS_GetRoll>:
 Return Value	:	Roll angle
 Example Call	:	AHRS_GetRoll()
 ***********************************/
float AHRS_GetRoll()
{
	return lowPassFilter(&lpf_roll, AHRS_Angle[0]);
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <AHRS_GetRoll+0xc>)
 8002e26:	4803      	ldr	r0, [pc, #12]	; (8002e34 <AHRS_GetRoll+0x10>)
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	f001 b829 	b.w	8003e80 <lowPassFilter>
 8002e2e:	bf00      	nop
 8002e30:	20000248 	.word	0x20000248
 8002e34:	20000014 	.word	0x20000014

08002e38 <AHRS_GetYaw>:
 Example Call	:	AHRS_GetYaw()
 ***********************************/
float AHRS_GetYaw()
{
	// Shift range to North heading
	float angle = AHRS_Angle[2];
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <AHRS_GetYaw+0x30>)
{
 8002e3a:	b510      	push	{r4, lr}
	float angle = AHRS_Angle[2];
 8002e3c:	689c      	ldr	r4, [r3, #8]
	return ((angle >= -180) && (angle < 90)) ? (angle + 90) : (angle - 270);
 8002e3e:	490b      	ldr	r1, [pc, #44]	; (8002e6c <AHRS_GetYaw+0x34>)
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7fe f905 	bl	8001050 <__aeabi_fcmpge>
 8002e46:	b148      	cbz	r0, 8002e5c <AHRS_GetYaw+0x24>
 8002e48:	4909      	ldr	r1, [pc, #36]	; (8002e70 <AHRS_GetYaw+0x38>)
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7fe f8ec 	bl	8001028 <__aeabi_fcmplt>
 8002e50:	b120      	cbz	r0, 8002e5c <AHRS_GetYaw+0x24>
 8002e52:	4907      	ldr	r1, [pc, #28]	; (8002e70 <AHRS_GetYaw+0x38>)
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fd fe41 	bl	8000adc <__addsf3>
 8002e5a:	bd10      	pop	{r4, pc}
 8002e5c:	4905      	ldr	r1, [pc, #20]	; (8002e74 <AHRS_GetYaw+0x3c>)
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7fd fe3a 	bl	8000ad8 <__aeabi_fsub>
}
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	20000248 	.word	0x20000248
 8002e6c:	c3340000 	.word	0xc3340000
 8002e70:	42b40000 	.word	0x42b40000
 8002e74:	43870000 	.word	0x43870000

08002e78 <AHRS_ComputeAngles>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	AHRS_ComputeAngles()
 ***********************************/
void AHRS_ComputeAngles()
{
 8002e78:	b530      	push	{r4, r5, lr}
 8002e7a:	b087      	sub	sp, #28
	// Read IMU data
	MPU9250_ReadAccelData();
 8002e7c:	f7ff fe06 	bl	8002a8c <MPU9250_ReadAccelData>
	MPU9250_ReadGyroData();
 8002e80:	f7ff fe58 	bl	8002b34 <MPU9250_ReadGyroData>
	AK8963_ReadData();
 8002e84:	f7ff ff28 	bl	8002cd8 <AK8963_ReadData>

	// Set integration time by time elapsed since last filter update
	AHRS_timeNow = micros();
 8002e88:	f002 fa14 	bl	80052b4 <micros>
	float delta = (float)((AHRS_timeNow - AHRS_lastUpdate)/1000.0f) ;
 8002e8c:	4c30      	ldr	r4, [pc, #192]	; (8002f50 <AHRS_ComputeAngles+0xd8>)
	AHRS_timeNow = micros();
 8002e8e:	4d31      	ldr	r5, [pc, #196]	; (8002f54 <AHRS_ComputeAngles+0xdc>)
	float delta = (float)((AHRS_timeNow - AHRS_lastUpdate)/1000.0f) ;
 8002e90:	6823      	ldr	r3, [r4, #0]
	AHRS_timeNow = micros();
 8002e92:	6028      	str	r0, [r5, #0]
	float delta = (float)((AHRS_timeNow - AHRS_lastUpdate)/1000.0f) ;
 8002e94:	1ac0      	subs	r0, r0, r3
 8002e96:	f7fd fed1 	bl	8000c3c <__aeabi_ui2f>
 8002e9a:	492f      	ldr	r1, [pc, #188]	; (8002f58 <AHRS_ComputeAngles+0xe0>)
 8002e9c:	f7fd ffda 	bl	8000e54 <__aeabi_fdiv>
	MadgwickSetDelta(delta);
 8002ea0:	f000 f9e6 	bl	8003270 <MadgwickSetDelta>
	AHRS_lastUpdate = AHRS_timeNow;
 8002ea4:	682b      	ldr	r3, [r5, #0]

	// Filter data and obtain the angles
	MadgwickQuaternionUpdate(-accelData.y, -accelData.x, accelData.z, gyroData.y,
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <AHRS_ComputeAngles+0xe4>)
	AHRS_lastUpdate = AHRS_timeNow;
 8002ea8:	6023      	str	r3, [r4, #0]
	MadgwickQuaternionUpdate(-accelData.y, -accelData.x, accelData.z, gyroData.y,
 8002eaa:	4c2d      	ldr	r4, [pc, #180]	; (8002f60 <AHRS_ComputeAngles+0xe8>)
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	6850      	ldr	r0, [r2, #4]
 8002eb0:	9405      	str	r4, [sp, #20]
 8002eb2:	4c2c      	ldr	r4, [pc, #176]	; (8002f64 <AHRS_ComputeAngles+0xec>)
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <AHRS_ComputeAngles+0xf0>)
 8002eb6:	68a5      	ldr	r5, [r4, #8]
 8002eb8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002ebc:	9504      	str	r5, [sp, #16]
 8002ebe:	6865      	ldr	r5, [r4, #4]
 8002ec0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002ec4:	9503      	str	r5, [sp, #12]
 8002ec6:	6824      	ldr	r4, [r4, #0]
 8002ec8:	9402      	str	r4, [sp, #8]
 8002eca:	689c      	ldr	r4, [r3, #8]
 8002ecc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8002ed0:	9401      	str	r4, [sp, #4]
 8002ed2:	681c      	ldr	r4, [r3, #0]
 8002ed4:	9400      	str	r4, [sp, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	f000 f9d1 	bl	8003280 <MadgwickQuaternionUpdate>
			gyroData.x, -gyroData.z, magData.x,	magData.y, magData.z, AHRS_Angle);

	// Update raw IMU MSP frame
	msp_txf_raw_imu.accx = accelRaw.x / 100;
 8002ede:	2164      	movs	r1, #100	; 0x64
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <AHRS_ComputeAngles+0xf4>)
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <AHRS_ComputeAngles+0xf8>)
 8002ee4:	f9b2 0000 	ldrsh.w	r0, [r2]
	msp_txf_raw_imu.magx = magRaw.x;
	msp_txf_raw_imu.magy = magRaw.y;
	msp_txf_raw_imu.magz = magRaw.z;

	// Update RC MSP frame
	msp_txf_attitude.angx = AHRS_GetRoll() * 10;	// Multiply by 10 -> Required by MSP
 8002ee8:	4c22      	ldr	r4, [pc, #136]	; (8002f74 <AHRS_ComputeAngles+0xfc>)
	msp_txf_raw_imu.accx = accelRaw.x / 100;
 8002eea:	fb90 f0f1 	sdiv	r0, r0, r1
 8002eee:	8018      	strh	r0, [r3, #0]
	msp_txf_raw_imu.accy = accelRaw.y / 100;
 8002ef0:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
	msp_txf_raw_imu.accz = accelRaw.z / 100;
 8002ef4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	msp_txf_raw_imu.accy = accelRaw.y / 100;
 8002ef8:	fb90 f0f1 	sdiv	r0, r0, r1
	msp_txf_raw_imu.accz = accelRaw.z / 100;
 8002efc:	fb92 f2f1 	sdiv	r2, r2, r1
 8002f00:	809a      	strh	r2, [r3, #4]
	msp_txf_raw_imu.gyrx = gyroRaw.x;
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <AHRS_ComputeAngles+0x100>)
	msp_txf_raw_imu.accy = accelRaw.y / 100;
 8002f04:	8058      	strh	r0, [r3, #2]
	msp_txf_raw_imu.gyrx = gyroRaw.x;
 8002f06:	8811      	ldrh	r1, [r2, #0]
 8002f08:	80d9      	strh	r1, [r3, #6]
	msp_txf_raw_imu.gyry = gyroRaw.y;
 8002f0a:	8851      	ldrh	r1, [r2, #2]
	msp_txf_raw_imu.gyrz = gyroRaw.z;
 8002f0c:	8892      	ldrh	r2, [r2, #4]
	msp_txf_raw_imu.gyry = gyroRaw.y;
 8002f0e:	8119      	strh	r1, [r3, #8]
	msp_txf_raw_imu.gyrz = gyroRaw.z;
 8002f10:	815a      	strh	r2, [r3, #10]
	msp_txf_raw_imu.magx = magRaw.x;
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <AHRS_ComputeAngles+0x104>)
 8002f14:	8811      	ldrh	r1, [r2, #0]
 8002f16:	8199      	strh	r1, [r3, #12]
	msp_txf_raw_imu.magy = magRaw.y;
 8002f18:	8851      	ldrh	r1, [r2, #2]
	msp_txf_raw_imu.magz = magRaw.z;
 8002f1a:	8892      	ldrh	r2, [r2, #4]
	msp_txf_raw_imu.magy = magRaw.y;
 8002f1c:	81d9      	strh	r1, [r3, #14]
	msp_txf_raw_imu.magz = magRaw.z;
 8002f1e:	821a      	strh	r2, [r3, #16]
	msp_txf_attitude.angx = AHRS_GetRoll() * 10;	// Multiply by 10 -> Required by MSP
 8002f20:	f7ff ff80 	bl	8002e24 <AHRS_GetRoll>
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <AHRS_ComputeAngles+0x108>)
 8002f26:	f7fd fee1 	bl	8000cec <__aeabi_fmul>
 8002f2a:	f7fe f8a5 	bl	8001078 <__aeabi_f2iz>
 8002f2e:	8020      	strh	r0, [r4, #0]
	msp_txf_attitude.angy = AHRS_GetPitch() * 10;	// Multiply by 10 -> Required by MSP
 8002f30:	f7ff ff6e 	bl	8002e10 <AHRS_GetPitch>
 8002f34:	4912      	ldr	r1, [pc, #72]	; (8002f80 <AHRS_ComputeAngles+0x108>)
 8002f36:	f7fd fed9 	bl	8000cec <__aeabi_fmul>
 8002f3a:	f7fe f89d 	bl	8001078 <__aeabi_f2iz>
 8002f3e:	8060      	strh	r0, [r4, #2]
	msp_txf_attitude.heading = AHRS_GetYaw();
 8002f40:	f7ff ff7a 	bl	8002e38 <AHRS_GetYaw>
 8002f44:	f7fe f898 	bl	8001078 <__aeabi_f2iz>
 8002f48:	80a0      	strh	r0, [r4, #4]
}
 8002f4a:	b007      	add	sp, #28
 8002f4c:	bd30      	pop	{r4, r5, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000254 	.word	0x20000254
 8002f54:	20000258 	.word	0x20000258
 8002f58:	447a0000 	.word	0x447a0000
 8002f5c:	200002cc 	.word	0x200002cc
 8002f60:	20000248 	.word	0x20000248
 8002f64:	200002d8 	.word	0x200002d8
 8002f68:	200002c0 	.word	0x200002c0
 8002f6c:	200002f0 	.word	0x200002f0
 8002f70:	200014a6 	.word	0x200014a6
 8002f74:	20001411 	.word	0x20001411
 8002f78:	200002ba 	.word	0x200002ba
 8002f7c:	200002b4 	.word	0x200002b4
 8002f80:	41200000 	.word	0x41200000

08002f84 <MS5611_ReadADC>:
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
	return ((rxbuf[0] << 8) | rxbuf[1]);
}

static uint32_t MS5611_ReadADC(void)
{
 8002f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t rxbuf[3];
	I2C_ReadBytes(MS5611_ADDRESS, MS5611_CMD_ADC_READ, rxbuf, 3, __FILE__, __LINE__); // Read ADC 3 bytes
 8002f86:	235b      	movs	r3, #91	; 0x5b
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <MS5611_ReadADC+0x30>)
 8002f8c:	aa03      	add	r2, sp, #12
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2100      	movs	r1, #0
 8002f92:	2303      	movs	r3, #3
 8002f94:	20ee      	movs	r0, #238	; 0xee
 8002f96:	f001 f847 	bl	8004028 <I2C_ReadBytes>

	// Combine the 3 bytes to form the 24 bit ADC value
	return ((uint32_t)(rxbuf[0] << 16) | ((uint32_t)rxbuf[1] << 8) | (uint32_t)rxbuf[2]);
 8002f9a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002f9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002fa2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002fa6:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
 8002faa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002fae:	b005      	add	sp, #20
 8002fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fb4:	08007669 	.word	0x08007669

08002fb8 <MS5611_GetFilteredAltitude>:
}

float MS5611_GetFilteredAltitude(void)
{
	return MS5611_FilteredAltitude;
}
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <MS5611_GetFilteredAltitude+0x8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	200002f8 	.word	0x200002f8
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <MS5611_Update>:

void MS5611_Update(void)
{
 8002fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (TEMP_READY && PRESSURE_READY)
 8002fcc:	4e74      	ldr	r6, [pc, #464]	; (80031a0 <MS5611_Update+0x1d8>)
 8002fce:	7833      	ldrb	r3, [r6, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80ad 	beq.w	8003130 <MS5611_Update+0x168>
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <MS5611_Update+0x1dc>)
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	469a      	mov	sl, r3
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	f000 80a7 	beq.w	8003130 <MS5611_Update+0x168>
	int32_t dT = MS5611_RawTemperature - ((uint32_t) MS5611_Coefficients[5] << 8);
 8002fe2:	4a71      	ldr	r2, [pc, #452]	; (80031a8 <MS5611_Update+0x1e0>)
 8002fe4:	4971      	ldr	r1, [pc, #452]	; (80031ac <MS5611_Update+0x1e4>)
 8002fe6:	8953      	ldrh	r3, [r2, #10]
 8002fe8:	6809      	ldr	r1, [r1, #0]
	TEMP = 2000 + (((int64_t) dT * MS5611_Coefficients[6]) >> 23);
 8002fea:	8990      	ldrh	r0, [r2, #12]
	int32_t dT = MS5611_RawTemperature - ((uint32_t) MS5611_Coefficients[5] << 8);
 8002fec:	eba1 2e03 	sub.w	lr, r1, r3, lsl #8
	TEMP = 2000 + (((int64_t) dT * MS5611_Coefficients[6]) >> 23);
 8002ff0:	fb80 010e 	smull	r0, r1, r0, lr
 8002ff4:	0dc3      	lsrs	r3, r0, #23
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8002ff6:	8910      	ldrh	r0, [r2, #8]
	TEMP = 2000 + (((int64_t) dT * MS5611_Coefficients[6]) >> 23);
 8002ff8:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8002ffc:	fb80 010e 	smull	r0, r1, r0, lr
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 8003000:	f8b2 8006 	ldrh.w	r8, [r2, #6]
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8003004:	09c4      	lsrs	r4, r0, #7
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 8003006:	fb88 890e 	smull	r8, r9, r8, lr
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 800300a:	ea44 6441 	orr.w	r4, r4, r1, lsl #25
 800300e:	11cd      	asrs	r5, r1, #7
 8003010:	8891      	ldrh	r1, [r2, #4]
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 8003012:	8852      	ldrh	r2, [r2, #2]
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8003014:	0409      	lsls	r1, r1, #16
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 8003016:	ea4f 2018 	mov.w	r0, r8, lsr #8
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 800301a:	1864      	adds	r4, r4, r1
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 800301c:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
 8003020:	ea4f 32c2 	mov.w	r2, r2, lsl #15
	TEMP = 2000 + (((int64_t) dT * MS5611_Coefficients[6]) >> 23);
 8003024:	f503 67fa 	add.w	r7, r3, #2000	; 0x7d0
	int64_t OFF = ((uint32_t) MS5611_Coefficients[2] << 16) + (((int64_t) dT * MS5611_Coefficients[4]) >> 7);
 8003028:	f145 0500 	adc.w	r5, r5, #0
	int64_t SENS = ((uint32_t) MS5611_Coefficients[1] << 15) + (((int64_t) dT * MS5611_Coefficients[3]) >> 8);
 800302c:	ea4f 2129 	mov.w	r1, r9, asr #8
 8003030:	1880      	adds	r0, r0, r2
 8003032:	f141 0100 	adc.w	r1, r1, #0
	if (TEMP < 2000)
 8003036:	f5b7 6ffa 	cmp.w	r7, #2000	; 0x7d0
		SENS2 = 0;
 800303a:	bfa7      	ittee	ge
 800303c:	2300      	movge	r3, #0
		OFF2 = 0;
 800303e:	469e      	movge	lr, r3
		TT = TT * TT;
 8003040:	435b      	mullt	r3, r3
		OFF2 = (5 * TT) >> 1;
 8003042:	eb03 0383 	addlt.w	r3, r3, r3, lsl #2
 8003046:	bfbc      	itt	lt
 8003048:	ea4f 0e63 	movlt.w	lr, r3, asr #1
		SENS2 = (5 * TT) >> 2;
 800304c:	109b      	asrlt	r3, r3, #2
	SENS -= SENS2;
 800304e:	1ac0      	subs	r0, r0, r3
 8003050:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
	P = (((MS5611_RawPressure * SENS) >> 21) - OFF) >> 15;
 8003054:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <MS5611_Update+0x1e8>)
	OFF  -= OFF2;
 8003056:	ebb4 040e 	subs.w	r4, r4, lr
	P = (((MS5611_RawPressure * SENS) >> 21) - OFF) >> 15;
 800305a:	681b      	ldr	r3, [r3, #0]
	OFF  -= OFF2;
 800305c:	eb65 75ee 	sbc.w	r5, r5, lr, asr #31
	P = (((MS5611_RawPressure * SENS) >> 21) - OFF) >> 15;
 8003060:	fba0 8903 	umull	r8, r9, r0, r3
 8003064:	fb03 9901 	mla	r9, r3, r1, r9
 8003068:	ea4f 5258 	mov.w	r2, r8, lsr #21
 800306c:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
 8003070:	1b12      	subs	r2, r2, r4
 8003072:	ea4f 5369 	mov.w	r3, r9, asr #21
 8003076:	eb63 0305 	sbc.w	r3, r3, r5
 800307a:	0bd0      	lsrs	r0, r2, #15
	MS5611_CompensatedPressure = (float) P / 100.0f;
 800307c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8003080:	f7fd fde0 	bl	8000c44 <__aeabi_i2f>
 8003084:	494b      	ldr	r1, [pc, #300]	; (80031b4 <MS5611_Update+0x1ec>)
 8003086:	f7fd fee5 	bl	8000e54 <__aeabi_fdiv>
 800308a:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <MS5611_Update+0x1f0>)
 800308c:	4604      	mov	r4, r0
 800308e:	6018      	str	r0, [r3, #0]
	MS5611_CompensatedTemperature = (float) TEMP / 100.0f;
 8003090:	4638      	mov	r0, r7
 8003092:	f7fd fdd7 	bl	8000c44 <__aeabi_i2f>
 8003096:	4947      	ldr	r1, [pc, #284]	; (80031b4 <MS5611_Update+0x1ec>)
 8003098:	f7fd fedc 	bl	8000e54 <__aeabi_fdiv>
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <MS5611_Update+0x1f4>)
	MS5611_Altitude = 44330.0f * (1.0f - pow(MS5611_CompensatedPressure / SEA_LEVEL_PRESSURE, 0.1902949f));
 800309e:	4948      	ldr	r1, [pc, #288]	; (80031c0 <MS5611_Update+0x1f8>)
	MS5611_CompensatedTemperature = (float) TEMP / 100.0f;
 80030a0:	6018      	str	r0, [r3, #0]
	MS5611_Altitude = 44330.0f * (1.0f - pow(MS5611_CompensatedPressure / SEA_LEVEL_PRESSURE, 0.1902949f));
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7fd fed6 	bl	8000e54 <__aeabi_fdiv>
 80030a8:	f7fd f9be 	bl	8000428 <__aeabi_f2d>
 80030ac:	a338      	add	r3, pc, #224	; (adr r3, 8003190 <MS5611_Update+0x1c8>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f002 fdcf 	bl	8005c54 <pow>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	2000      	movs	r0, #0
 80030bc:	4941      	ldr	r1, [pc, #260]	; (80031c4 <MS5611_Update+0x1fc>)
 80030be:	f7fd f853 	bl	8000168 <__aeabi_dsub>
 80030c2:	a335      	add	r3, pc, #212	; (adr r3, 8003198 <MS5611_Update+0x1d0>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd fa02 	bl	80004d0 <__aeabi_dmul>
 80030cc:	f7fd fcb0 	bl	8000a30 <__aeabi_d2f>
 80030d0:	4c3d      	ldr	r4, [pc, #244]	; (80031c8 <MS5611_Update+0x200>)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <MS5611_Update+0x204>)
 80030d4:	4605      	mov	r5, r0
 80030d6:	6018      	str	r0, [r3, #0]
 80030d8:	4627      	mov	r7, r4
	float sum = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	f104 084c 	add.w	r8, r4, #76	; 0x4c
		alt_filter[i] = alt_filter[i+1];
 80030e0:	f854 1f04 	ldr.w	r1, [r4, #4]!
		sum += alt_filter[i];
 80030e4:	4618      	mov	r0, r3
		alt_filter[i] = alt_filter[i+1];
 80030e6:	f844 1c04 	str.w	r1, [r4, #-4]
		sum += alt_filter[i];
 80030ea:	f7fd fcf7 	bl	8000adc <__addsf3>
	for (int i=0; i<19; i++)
 80030ee:	45a0      	cmp	r8, r4
		sum += alt_filter[i];
 80030f0:	4603      	mov	r3, r0
	for (int i=0; i<19; i++)
 80030f2:	d1f5      	bne.n	80030e0 <MS5611_Update+0x118>
	sum += alt_filter[19];
 80030f4:	4629      	mov	r1, r5
	alt_filter[19] = MS5611_Altitude;
 80030f6:	64fd      	str	r5, [r7, #76]	; 0x4c
	sum += alt_filter[19];
 80030f8:	f7fd fcf0 	bl	8000adc <__addsf3>
	MS5611_FilteredAltitude = sum/20.0f;
 80030fc:	4934      	ldr	r1, [pc, #208]	; (80031d0 <MS5611_Update+0x208>)
 80030fe:	f7fd fea9 	bl	8000e54 <__aeabi_fdiv>
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <MS5611_Update+0x20c>)
 8003104:	6018      	str	r0, [r3, #0]
		// Compute altitude
		MS5611_ComputeAltitude();
		MS5611_FilterAltitude();

		// Update MSP frame
		msp_txf_altitude.est_alt = (int32_t) MS5611_FilteredAltitude * 100;
 8003106:	f7fd ffb7 	bl	8001078 <__aeabi_f2iz>
 800310a:	2364      	movs	r3, #100	; 0x64
 800310c:	4358      	muls	r0, r3
 800310e:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <MS5611_Update+0x210>)
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + MS5611_OSR, 1, 0); // Start D2 (temperature) conversion
 8003110:	4a32      	ldr	r2, [pc, #200]	; (80031dc <MS5611_Update+0x214>)
		msp_txf_altitude.est_alt = (int32_t) MS5611_FilteredAltitude * 100;
 8003112:	6018      	str	r0, [r3, #0]
		serialFloat(MS5611_GetFilteredAltitude());
		serialPrint(" m\n");
#endif

		// Reset conversion flags for next reading
		TEMP_READY = 0;
 8003114:	2300      	movs	r3, #0
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + MS5611_OSR, 1, 0); // Start D2 (temperature) conversion
 8003116:	7811      	ldrb	r1, [r2, #0]
 8003118:	20ee      	movs	r0, #238	; 0xee
 800311a:	2201      	movs	r2, #1
 800311c:	3150      	adds	r1, #80	; 0x50
		TEMP_READY = 0;
 800311e:	7033      	strb	r3, [r6, #0]
		PRESSURE_READY = 0;
 8003120:	f88a 3000 	strb.w	r3, [sl]
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + MS5611_OSR, 1, 0); // Start D2 (temperature) conversion
 8003124:	f000 ff42 	bl	8003fac <I2C_WriteByte>

		// Start new conversion
		MS5611_StartTemperatureConversion();
		temp_time = millis();
 8003128:	f002 f8c2 	bl	80052b0 <millis>
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <MS5611_Update+0x218>)
 800312e:	6018      	str	r0, [r3, #0]
	}

	// 10ms delay for ADC conversion
	if (((millis() - temp_time) > 10) && !(TEMP_READY) && !(PRESSURE_READY))
 8003130:	f002 f8be 	bl	80052b0 <millis>
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <MS5611_Update+0x218>)
 8003136:	4c2b      	ldr	r4, [pc, #172]	; (80031e4 <MS5611_Update+0x21c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1ac0      	subs	r0, r0, r3
 800313c:	280a      	cmp	r0, #10
 800313e:	d914      	bls.n	800316a <MS5611_Update+0x1a2>
 8003140:	7833      	ldrb	r3, [r6, #0]
 8003142:	b993      	cbnz	r3, 800316a <MS5611_Update+0x1a2>
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MS5611_Update+0x1dc>)
 8003146:	781d      	ldrb	r5, [r3, #0]
 8003148:	b97d      	cbnz	r5, 800316a <MS5611_Update+0x1a2>
	MS5611_RawTemperature = MS5611_ReadADC();
 800314a:	f7ff ff1b 	bl	8002f84 <MS5611_ReadADC>
	{
		MS5611_ReadTemperature();
		TEMP_READY = 1;
 800314e:	2201      	movs	r2, #1
	MS5611_RawTemperature = MS5611_ReadADC();
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <MS5611_Update+0x1e4>)
		TEMP_READY = 1;
 8003152:	7032      	strb	r2, [r6, #0]
	MS5611_RawTemperature = MS5611_ReadADC();
 8003154:	6018      	str	r0, [r3, #0]
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + MS5611_OSR, 1, 0); // Start D1 (pressure) conversion
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <MS5611_Update+0x214>)
 8003158:	20ee      	movs	r0, #238	; 0xee
 800315a:	7819      	ldrb	r1, [r3, #0]
 800315c:	462b      	mov	r3, r5
 800315e:	3140      	adds	r1, #64	; 0x40
 8003160:	f000 ff24 	bl	8003fac <I2C_WriteByte>

		MS5611_StartPressureConversion();
		pressure_time = millis();
 8003164:	f002 f8a4 	bl	80052b0 <millis>
 8003168:	6020      	str	r0, [r4, #0]
	}

	if (((millis() - pressure_time) > 10) && TEMP_READY && !(PRESSURE_READY))
 800316a:	f002 f8a1 	bl	80052b0 <millis>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	1ac0      	subs	r0, r0, r3
 8003172:	280a      	cmp	r0, #10
 8003174:	d90a      	bls.n	800318c <MS5611_Update+0x1c4>
 8003176:	7833      	ldrb	r3, [r6, #0]
 8003178:	b143      	cbz	r3, 800318c <MS5611_Update+0x1c4>
 800317a:	4c0a      	ldr	r4, [pc, #40]	; (80031a4 <MS5611_Update+0x1dc>)
 800317c:	7823      	ldrb	r3, [r4, #0]
 800317e:	b92b      	cbnz	r3, 800318c <MS5611_Update+0x1c4>
	MS5611_RawPressure = MS5611_ReadADC();
 8003180:	f7ff ff00 	bl	8002f84 <MS5611_ReadADC>
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <MS5611_Update+0x1e8>)
 8003186:	6018      	str	r0, [r3, #0]
	{
		MS5611_ReadPressure();
		PRESSURE_READY = 1;
 8003188:	2301      	movs	r3, #1
 800318a:	7023      	strb	r3, [r4, #0]
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	60000000 	.word	0x60000000
 8003194:	3fc85b95 	.word	0x3fc85b95
 8003198:	00000000 	.word	0x00000000
 800319c:	40e5a540 	.word	0x40e5a540
 80031a0:	20000275 	.word	0x20000275
 80031a4:	20000274 	.word	0x20000274
 80031a8:	2000025c 	.word	0x2000025c
 80031ac:	20000270 	.word	0x20000270
 80031b0:	2000026c 	.word	0x2000026c
 80031b4:	42c80000 	.word	0x42c80000
 80031b8:	20000350 	.word	0x20000350
 80031bc:	20000354 	.word	0x20000354
 80031c0:	447d5000 	.word	0x447d5000
 80031c4:	3ff00000 	.word	0x3ff00000
 80031c8:	200002fc 	.word	0x200002fc
 80031cc:	2000034c 	.word	0x2000034c
 80031d0:	41a00000 	.word	0x41a00000
 80031d4:	200002f8 	.word	0x200002f8
 80031d8:	20001527 	.word	0x20001527
 80031dc:	20000038 	.word	0x20000038
 80031e0:	2000027c 	.word	0x2000027c
 80031e4:	20000278 	.word	0x20000278

080031e8 <MS5611_Init>:
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_RESET, 1, 1);
 80031e8:	2301      	movs	r3, #1
	}
}

void MS5611_Init(void)
{
 80031ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	MS5611_OSR = osr;
 80031ec:	2400      	movs	r4, #0
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_RESET, 1, 1);
 80031ee:	461a      	mov	r2, r3
{
 80031f0:	b085      	sub	sp, #20
	I2C_WriteByte(MS5611_ADDRESS, MS5611_CMD_RESET, 1, 1);
 80031f2:	211e      	movs	r1, #30
 80031f4:	20ee      	movs	r0, #238	; 0xee
 80031f6:	f000 fed9 	bl	8003fac <I2C_WriteByte>
	delay_ms(10); // Minimum delay of 2.8 ms required
 80031fa:	200a      	movs	r0, #10
 80031fc:	f002 f85c 	bl	80052b8 <delay_ms>
	MS5611_OSR = osr;
 8003200:	2208      	movs	r2, #8
	uint8_t rxbuf[2] = {0, 0};
 8003202:	4625      	mov	r5, r4
	MS5611_OSR = osr;
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MS5611_Init+0x6c>)
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
 8003206:	4f14      	ldr	r7, [pc, #80]	; (8003258 <MS5611_Init+0x70>)
	MS5611_Reset();
	MS5611_SetOSR(MS5611_OSR_4096);

	for (int i=0; i<MS5611_PROM_NB; i++)
		MS5611_Coefficients[i] = MS5611_ReadPROM(i);
 8003208:	4e14      	ldr	r6, [pc, #80]	; (800325c <MS5611_Init+0x74>)
	MS5611_OSR = osr;
 800320a:	701a      	strb	r2, [r3, #0]
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
 800320c:	2354      	movs	r3, #84	; 0x54
 800320e:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	aa03      	add	r2, sp, #12
 8003216:	2302      	movs	r3, #2
 8003218:	9700      	str	r7, [sp, #0]
 800321a:	b289      	uxth	r1, r1
 800321c:	20ee      	movs	r0, #238	; 0xee
	uint8_t rxbuf[2] = {0, 0};
 800321e:	f88d 500c 	strb.w	r5, [sp, #12]
 8003222:	f88d 500d 	strb.w	r5, [sp, #13]
	I2C_ReadByteArray(MS5611_ADDRESS, MS5611_CMD_READ_PROM + (coef_num * 2), rxbuf, 2, __FILE__, __LINE__); // Send PROM READ command
 8003226:	f000 ff17 	bl	8004058 <I2C_ReadByteArray>
	return ((rxbuf[0] << 8) | rxbuf[1]);
 800322a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800322e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003232:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		MS5611_Coefficients[i] = MS5611_ReadPROM(i);
 8003236:	53a3      	strh	r3, [r4, r6]
 8003238:	3402      	adds	r4, #2
	for (int i=0; i<MS5611_PROM_NB; i++)
 800323a:	2c10      	cmp	r4, #16
 800323c:	d1e6      	bne.n	800320c <MS5611_Init+0x24>
 800323e:	2300      	movs	r3, #0

	for (int i=0; i<20; i++)
		alt_filter[i] = 0;
 8003240:	2100      	movs	r1, #0
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <MS5611_Init+0x78>)
 8003244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<20; i++)
 8003248:	3301      	adds	r3, #1
 800324a:	2b14      	cmp	r3, #20
 800324c:	d1fa      	bne.n	8003244 <MS5611_Init+0x5c>
}
 800324e:	b005      	add	sp, #20
 8003250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003252:	bf00      	nop
 8003254:	20000038 	.word	0x20000038
 8003258:	08007669 	.word	0x08007669
 800325c:	2000025c 	.word	0x2000025c
 8003260:	200002fc 	.word	0x200002fc

08003264 <MadgwickSetBeta>:
 Return Value	:	None
 Example Call	:	MadgwickSetBeta()
 ***********************************/
void MadgwickSetBeta(float _beta)
{
	beta = _beta;
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <MadgwickSetBeta+0x8>)
 8003266:	6018      	str	r0, [r3, #0]
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000358 	.word	0x20000358

08003270 <MadgwickSetDelta>:
 Return Value	:	None
 Example Call	:	MadgwickSetDelta()
 ***********************************/
void MadgwickSetDelta(float _deltat)
{
	deltat = _deltat;
 8003270:	4b01      	ldr	r3, [pc, #4]	; (8003278 <MadgwickSetDelta+0x8>)
 8003272:	6018      	str	r0, [r3, #0]
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000035c 	.word	0x2000035c
 800327c:	00000000 	.word	0x00000000

08003280 <MadgwickQuaternionUpdate>:
 Return Value	:	None
 Example Call	:	MadgwickQuaternionUpdate()
 ***********************************/
void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz, float *angle)
{
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	4698      	mov	r8, r3
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 8003286:	4ba8      	ldr	r3, [pc, #672]	; (8003528 <MadgwickQuaternionUpdate+0x2a8>)
{
 8003288:	b099      	sub	sp, #100	; 0x64
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 800328a:	681b      	ldr	r3, [r3, #0]
{
 800328c:	910e      	str	r1, [sp, #56]	; 0x38
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	4ba5      	ldr	r3, [pc, #660]	; (8003528 <MadgwickQuaternionUpdate+0x2a8>)
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8003292:	4601      	mov	r1, r0
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 8003294:	685b      	ldr	r3, [r3, #4]
{
 8003296:	9210      	str	r2, [sp, #64]	; 0x40
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	4ba3      	ldr	r3, [pc, #652]	; (8003528 <MadgwickQuaternionUpdate+0x2a8>)
{
 800329c:	900d      	str	r0, [sp, #52]	; 0x34
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
 800329e:	689d      	ldr	r5, [r3, #8]
 80032a0:	68dc      	ldr	r4, [r3, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 80032a2:	f7fd fd23 	bl	8000cec <__aeabi_fmul>
 80032a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80032a8:	4606      	mov	r6, r0
 80032aa:	4608      	mov	r0, r1
 80032ac:	f7fd fd1e 	bl	8000cec <__aeabi_fmul>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4630      	mov	r0, r6
 80032b4:	f7fd fc12 	bl	8000adc <__addsf3>
 80032b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80032ba:	4606      	mov	r6, r0
 80032bc:	4608      	mov	r0, r1
 80032be:	f7fd fd15 	bl	8000cec <__aeabi_fmul>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4630      	mov	r0, r6
 80032c6:	f7fd fc09 	bl	8000adc <__addsf3>
 80032ca:	f7fd f8ad 	bl	8000428 <__aeabi_f2d>
 80032ce:	f002 fe25 	bl	8005f1c <sqrt>
 80032d2:	f7fd fbad 	bl	8000a30 <__aeabi_d2f>
	if (norm == 0.0f) return; // handle NaN
 80032d6:	2100      	movs	r1, #0
	norm = sqrt(ax * ax + ay * ay + az * az);
 80032d8:	4607      	mov	r7, r0
	if (norm == 0.0f) return; // handle NaN
 80032da:	f7fd fe9b 	bl	8001014 <__aeabi_fcmpeq>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f040 8582 	bne.w	8003de8 <MadgwickQuaternionUpdate+0xb68>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrt(mx * mx + my * my + mz * mz);
 80032e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80032e6:	4608      	mov	r0, r1
 80032e8:	f7fd fd00 	bl	8000cec <__aeabi_fmul>
 80032ec:	9925      	ldr	r1, [sp, #148]	; 0x94
 80032ee:	4606      	mov	r6, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	f7fd fcfb 	bl	8000cec <__aeabi_fmul>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4630      	mov	r0, r6
 80032fa:	f7fd fbef 	bl	8000adc <__addsf3>
 80032fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8003300:	4606      	mov	r6, r0
 8003302:	4608      	mov	r0, r1
 8003304:	f7fd fcf2 	bl	8000cec <__aeabi_fmul>
 8003308:	4601      	mov	r1, r0
 800330a:	4630      	mov	r0, r6
 800330c:	f7fd fbe6 	bl	8000adc <__addsf3>
 8003310:	f7fd f88a 	bl	8000428 <__aeabi_f2d>
 8003314:	f002 fe02 	bl	8005f1c <sqrt>
 8003318:	f7fd fb8a 	bl	8000a30 <__aeabi_d2f>
	if (norm == 0.0f) return; // handle NaN
 800331c:	2100      	movs	r1, #0
	norm = sqrt(mx * mx + my * my + mz * mz);
 800331e:	4606      	mov	r6, r0
	if (norm == 0.0f) return; // handle NaN
 8003320:	f7fd fe78 	bl	8001014 <__aeabi_fcmpeq>
 8003324:	2800      	cmp	r0, #0
 8003326:	f040 855f 	bne.w	8003de8 <MadgwickQuaternionUpdate+0xb68>
	gx *= M_PI / 180;
 800332a:	4640      	mov	r0, r8
 800332c:	f7fd f87c 	bl	8000428 <__aeabi_f2d>
 8003330:	a37b      	add	r3, pc, #492	; (adr r3, 8003520 <MadgwickQuaternionUpdate+0x2a0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f8cb 	bl	80004d0 <__aeabi_dmul>
 800333a:	f7fd fb79 	bl	8000a30 <__aeabi_d2f>
 800333e:	9008      	str	r0, [sp, #32]
	gy *= M_PI / 180;
 8003340:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003342:	f7fd f871 	bl	8000428 <__aeabi_f2d>
 8003346:	a376      	add	r3, pc, #472	; (adr r3, 8003520 <MadgwickQuaternionUpdate+0x2a0>)
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f7fd f8c0 	bl	80004d0 <__aeabi_dmul>
 8003350:	f7fd fb6e 	bl	8000a30 <__aeabi_d2f>
 8003354:	9009      	str	r0, [sp, #36]	; 0x24
	gz *= M_PI / 180;
 8003356:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8003358:	f7fd f866 	bl	8000428 <__aeabi_f2d>
 800335c:	a370      	add	r3, pc, #448	; (adr r3, 8003520 <MadgwickQuaternionUpdate+0x2a0>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fd f8b5 	bl	80004d0 <__aeabi_dmul>
 8003366:	f7fd fb63 	bl	8000a30 <__aeabi_d2f>
	float _2q1 = 2.0f * q1;
 800336a:	9902      	ldr	r1, [sp, #8]
	gz *= M_PI / 180;
 800336c:	900a      	str	r0, [sp, #40]	; 0x28
	float _2q1 = 2.0f * q1;
 800336e:	4608      	mov	r0, r1
 8003370:	f7fd fbb4 	bl	8000adc <__addsf3>
	float _2q2 = 2.0f * q2;
 8003374:	9901      	ldr	r1, [sp, #4]
	float _2q1 = 2.0f * q1;
 8003376:	9003      	str	r0, [sp, #12]
	float _2q2 = 2.0f * q2;
 8003378:	4608      	mov	r0, r1
 800337a:	f7fd fbaf 	bl	8000adc <__addsf3>
	float _2q3 = 2.0f * q3;
 800337e:	4629      	mov	r1, r5
	float _2q2 = 2.0f * q2;
 8003380:	9005      	str	r0, [sp, #20]
	float _2q3 = 2.0f * q3;
 8003382:	4628      	mov	r0, r5
 8003384:	f7fd fbaa 	bl	8000adc <__addsf3>
	float _2q4 = 2.0f * q4;
 8003388:	4621      	mov	r1, r4
	float _2q3 = 2.0f * q3;
 800338a:	9006      	str	r0, [sp, #24]
	float _2q4 = 2.0f * q4;
 800338c:	4620      	mov	r0, r4
 800338e:	f7fd fba5 	bl	8000adc <__addsf3>
	float q1q1 = q1 * q1;
 8003392:	9902      	ldr	r1, [sp, #8]
	float _2q4 = 2.0f * q4;
 8003394:	9014      	str	r0, [sp, #80]	; 0x50
	float q1q1 = q1 * q1;
 8003396:	4608      	mov	r0, r1
 8003398:	f7fd fca8 	bl	8000cec <__aeabi_fmul>
	float q1q2 = q1 * q2;
 800339c:	9901      	ldr	r1, [sp, #4]
	float q1q1 = q1 * q1;
 800339e:	4680      	mov	r8, r0
	float q1q2 = q1 * q2;
 80033a0:	9802      	ldr	r0, [sp, #8]
 80033a2:	f7fd fca3 	bl	8000cec <__aeabi_fmul>
	float q1q3 = q1 * q3;
 80033a6:	4629      	mov	r1, r5
	float q1q2 = q1 * q2;
 80033a8:	900f      	str	r0, [sp, #60]	; 0x3c
	float q1q3 = q1 * q3;
 80033aa:	9802      	ldr	r0, [sp, #8]
 80033ac:	f7fd fc9e 	bl	8000cec <__aeabi_fmul>
	float q2q2 = q2 * q2;
 80033b0:	9901      	ldr	r1, [sp, #4]
	float q1q3 = q1 * q3;
 80033b2:	9012      	str	r0, [sp, #72]	; 0x48
	float q2q2 = q2 * q2;
 80033b4:	4608      	mov	r0, r1
 80033b6:	f7fd fc99 	bl	8000cec <__aeabi_fmul>
	float q2q4 = q2 * q4;
 80033ba:	4621      	mov	r1, r4
	float q2q2 = q2 * q2;
 80033bc:	9007      	str	r0, [sp, #28]
	float q2q4 = q2 * q4;
 80033be:	9801      	ldr	r0, [sp, #4]
 80033c0:	f7fd fc94 	bl	8000cec <__aeabi_fmul>
	float q3q3 = q3 * q3;
 80033c4:	4629      	mov	r1, r5
	float q2q4 = q2 * q4;
 80033c6:	900b      	str	r0, [sp, #44]	; 0x2c
	float q3q3 = q3 * q3;
 80033c8:	4628      	mov	r0, r5
 80033ca:	f7fd fc8f 	bl	8000cec <__aeabi_fmul>
	float q4q4 = q4 * q4;
 80033ce:	4621      	mov	r1, r4
	float q3q3 = q3 * q3;
 80033d0:	9004      	str	r0, [sp, #16]
	float q4q4 = q4 * q4;
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7fd fc8a 	bl	8000cec <__aeabi_fmul>
	norm = 1.0f / norm;
 80033d8:	4639      	mov	r1, r7
	float q4q4 = q4 * q4;
 80033da:	900c      	str	r0, [sp, #48]	; 0x30
	norm = 1.0f / norm;
 80033dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80033e0:	f7fd fd38 	bl	8000e54 <__aeabi_fdiv>
	norm = 1.0f / norm;
 80033e4:	4631      	mov	r1, r6
	norm = 1.0f / norm;
 80033e6:	9011      	str	r0, [sp, #68]	; 0x44
	norm = 1.0f / norm;
 80033e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80033ec:	f7fd fd32 	bl	8000e54 <__aeabi_fdiv>
 80033f0:	4606      	mov	r6, r0
	mx *= norm;
 80033f2:	4601      	mov	r1, r0
 80033f4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80033f6:	f7fd fc79 	bl	8000cec <__aeabi_fmul>
	my *= norm;
 80033fa:	4631      	mov	r1, r6
	mx *= norm;
 80033fc:	4682      	mov	sl, r0
	my *= norm;
 80033fe:	9825      	ldr	r0, [sp, #148]	; 0x94
 8003400:	f7fd fc74 	bl	8000cec <__aeabi_fmul>
	mz *= norm;
 8003404:	4631      	mov	r1, r6
	my *= norm;
 8003406:	4607      	mov	r7, r0
	mz *= norm;
 8003408:	9826      	ldr	r0, [sp, #152]	; 0x98
 800340a:	f7fd fc6f 	bl	8000cec <__aeabi_fmul>

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 800340e:	4651      	mov	r1, sl
	mz *= norm;
 8003410:	4681      	mov	r9, r0
	_2q1mx = 2.0f * q1 * mx;
 8003412:	9803      	ldr	r0, [sp, #12]
 8003414:	f7fd fc6a 	bl	8000cec <__aeabi_fmul>
	_2q1my = 2.0f * q1 * my;
 8003418:	4639      	mov	r1, r7
	_2q1mx = 2.0f * q1 * mx;
 800341a:	9013      	str	r0, [sp, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 800341c:	9803      	ldr	r0, [sp, #12]
 800341e:	f7fd fc65 	bl	8000cec <__aeabi_fmul>
	_2q1mz = 2.0f * q1 * mz;
 8003422:	4649      	mov	r1, r9
	_2q1my = 2.0f * q1 * my;
 8003424:	4683      	mov	fp, r0
	_2q1mz = 2.0f * q1 * mz;
 8003426:	9803      	ldr	r0, [sp, #12]
 8003428:	f7fd fc60 	bl	8000cec <__aeabi_fmul>
	_2q2mx = 2.0f * q2 * mx;
 800342c:	4651      	mov	r1, sl
	_2q1mz = 2.0f * q1 * mz;
 800342e:	4606      	mov	r6, r0
	_2q2mx = 2.0f * q2 * mx;
 8003430:	9805      	ldr	r0, [sp, #20]
 8003432:	f7fd fc5b 	bl	8000cec <__aeabi_fmul>
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8003436:	4651      	mov	r1, sl
	_2q2mx = 2.0f * q2 * mx;
 8003438:	9015      	str	r0, [sp, #84]	; 0x54
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 800343a:	4640      	mov	r0, r8
 800343c:	f7fd fc56 	bl	8000cec <__aeabi_fmul>
 8003440:	4659      	mov	r1, fp
 8003442:	9016      	str	r0, [sp, #88]	; 0x58
 8003444:	4620      	mov	r0, r4
 8003446:	f7fd fc51 	bl	8000cec <__aeabi_fmul>
 800344a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800344c:	4601      	mov	r1, r0
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fb42 	bl	8000ad8 <__aeabi_fsub>
 8003454:	4631      	mov	r1, r6
 8003456:	9016      	str	r0, [sp, #88]	; 0x58
 8003458:	4628      	mov	r0, r5
 800345a:	f7fd fc47 	bl	8000cec <__aeabi_fmul>
 800345e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003460:	4601      	mov	r1, r0
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fb3a 	bl	8000adc <__addsf3>
 8003468:	4651      	mov	r1, sl
 800346a:	9016      	str	r0, [sp, #88]	; 0x58
 800346c:	9807      	ldr	r0, [sp, #28]
 800346e:	f7fd fc3d 	bl	8000cec <__aeabi_fmul>
 8003472:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003474:	4601      	mov	r1, r0
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fb30 	bl	8000adc <__addsf3>
 800347c:	4639      	mov	r1, r7
 800347e:	9016      	str	r0, [sp, #88]	; 0x58
 8003480:	9805      	ldr	r0, [sp, #20]
 8003482:	f7fd fc33 	bl	8000cec <__aeabi_fmul>
 8003486:	4629      	mov	r1, r5
 8003488:	f7fd fc30 	bl	8000cec <__aeabi_fmul>
 800348c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800348e:	4601      	mov	r1, r0
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fb23 	bl	8000adc <__addsf3>
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8003496:	4649      	mov	r1, r9
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8003498:	9016      	str	r0, [sp, #88]	; 0x58
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800349a:	9805      	ldr	r0, [sp, #20]
 800349c:	f7fd fc26 	bl	8000cec <__aeabi_fmul>
 80034a0:	4621      	mov	r1, r4
 80034a2:	f7fd fc23 	bl	8000cec <__aeabi_fmul>
 80034a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034a8:	4601      	mov	r1, r0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fb16 	bl	8000adc <__addsf3>
 80034b0:	4651      	mov	r1, sl
 80034b2:	9016      	str	r0, [sp, #88]	; 0x58
 80034b4:	9804      	ldr	r0, [sp, #16]
 80034b6:	f7fd fc19 	bl	8000cec <__aeabi_fmul>
 80034ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034bc:	4601      	mov	r1, r0
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fb0a 	bl	8000ad8 <__aeabi_fsub>
 80034c4:	4651      	mov	r1, sl
 80034c6:	9016      	str	r0, [sp, #88]	; 0x58
 80034c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80034ca:	f7fd fc0f 	bl	8000cec <__aeabi_fmul>
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80034ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034d0:	4601      	mov	r1, r0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fb00 	bl	8000ad8 <__aeabi_fsub>
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80034d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 80034da:	9017      	str	r0, [sp, #92]	; 0x5c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 80034dc:	4620      	mov	r0, r4
 80034de:	f7fd fc05 	bl	8000cec <__aeabi_fmul>
 80034e2:	4639      	mov	r1, r7
 80034e4:	9016      	str	r0, [sp, #88]	; 0x58
 80034e6:	4640      	mov	r0, r8
 80034e8:	f7fd fc00 	bl	8000cec <__aeabi_fmul>
 80034ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034ee:	4601      	mov	r1, r0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd faf3 	bl	8000adc <__addsf3>
 80034f6:	4631      	mov	r1, r6
 80034f8:	9016      	str	r0, [sp, #88]	; 0x58
 80034fa:	9801      	ldr	r0, [sp, #4]
 80034fc:	f7fd fbf6 	bl	8000cec <__aeabi_fmul>
 8003500:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003502:	4601      	mov	r1, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fae7 	bl	8000ad8 <__aeabi_fsub>
 800350a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800350c:	4606      	mov	r6, r0
 800350e:	4628      	mov	r0, r5
 8003510:	f7fd fbec 	bl	8000cec <__aeabi_fmul>
 8003514:	4601      	mov	r1, r0
 8003516:	4630      	mov	r0, r6
 8003518:	e008      	b.n	800352c <MadgwickQuaternionUpdate+0x2ac>
 800351a:	bf00      	nop
 800351c:	f3af 8000 	nop.w
 8003520:	a2529d39 	.word	0xa2529d39
 8003524:	3f91df46 	.word	0x3f91df46
 8003528:	2000003c 	.word	0x2000003c
 800352c:	f7fd fad6 	bl	8000adc <__addsf3>
 8003530:	4639      	mov	r1, r7
 8003532:	4606      	mov	r6, r0
 8003534:	9807      	ldr	r0, [sp, #28]
 8003536:	f7fd fbd9 	bl	8000cec <__aeabi_fmul>
 800353a:	4601      	mov	r1, r0
 800353c:	4630      	mov	r0, r6
 800353e:	f7fd facb 	bl	8000ad8 <__aeabi_fsub>
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8003542:	4639      	mov	r1, r7
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8003544:	4606      	mov	r6, r0
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8003546:	9804      	ldr	r0, [sp, #16]
 8003548:	f7fd fbd0 	bl	8000cec <__aeabi_fmul>
 800354c:	4601      	mov	r1, r0
 800354e:	4630      	mov	r0, r6
 8003550:	f7fd fac4 	bl	8000adc <__addsf3>
 8003554:	4649      	mov	r1, r9
 8003556:	4606      	mov	r6, r0
 8003558:	9806      	ldr	r0, [sp, #24]
 800355a:	f7fd fbc7 	bl	8000cec <__aeabi_fmul>
 800355e:	4621      	mov	r1, r4
 8003560:	f7fd fbc4 	bl	8000cec <__aeabi_fmul>
 8003564:	4601      	mov	r1, r0
 8003566:	4630      	mov	r0, r6
 8003568:	f7fd fab8 	bl	8000adc <__addsf3>
 800356c:	4639      	mov	r1, r7
 800356e:	4606      	mov	r6, r0
 8003570:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003572:	f7fd fbbb 	bl	8000cec <__aeabi_fmul>
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8003576:	4601      	mov	r1, r0
 8003578:	4630      	mov	r0, r6
 800357a:	f7fd faad 	bl	8000ad8 <__aeabi_fsub>
	_2bx = sqrt(hx * hx + hy * hy);
 800357e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8003580:	9016      	str	r0, [sp, #88]	; 0x58
	_2bx = sqrt(hx * hx + hy * hy);
 8003582:	4611      	mov	r1, r2
 8003584:	4610      	mov	r0, r2
 8003586:	f7fd fbb1 	bl	8000cec <__aeabi_fmul>
 800358a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800358c:	4606      	mov	r6, r0
 800358e:	4619      	mov	r1, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fbab 	bl	8000cec <__aeabi_fmul>
 8003596:	4601      	mov	r1, r0
 8003598:	4630      	mov	r0, r6
 800359a:	f7fd fa9f 	bl	8000adc <__addsf3>
 800359e:	f7fc ff43 	bl	8000428 <__aeabi_f2d>
 80035a2:	f002 fcbb 	bl	8005f1c <sqrt>
 80035a6:	f7fd fa43 	bl	8000a30 <__aeabi_d2f>
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 80035aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 80035ac:	4606      	mov	r6, r0
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 80035ae:	4629      	mov	r1, r5
 80035b0:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 80035b4:	f7fd fb9a 	bl	8000cec <__aeabi_fmul>
 80035b8:	4659      	mov	r1, fp
 80035ba:	9013      	str	r0, [sp, #76]	; 0x4c
 80035bc:	9801      	ldr	r0, [sp, #4]
 80035be:	f7fd fb95 	bl	8000cec <__aeabi_fmul>
 80035c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035c4:	4601      	mov	r1, r0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fa88 	bl	8000adc <__addsf3>
 80035cc:	4649      	mov	r1, r9
 80035ce:	4683      	mov	fp, r0
 80035d0:	4640      	mov	r0, r8
 80035d2:	f7fd fb8b 	bl	8000cec <__aeabi_fmul>
 80035d6:	4601      	mov	r1, r0
 80035d8:	4658      	mov	r0, fp
 80035da:	f7fd fa7f 	bl	8000adc <__addsf3>
 80035de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80035e0:	4680      	mov	r8, r0
 80035e2:	4620      	mov	r0, r4
 80035e4:	f7fd fb82 	bl	8000cec <__aeabi_fmul>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4640      	mov	r0, r8
 80035ec:	f7fd fa76 	bl	8000adc <__addsf3>
 80035f0:	4649      	mov	r1, r9
 80035f2:	4680      	mov	r8, r0
 80035f4:	9807      	ldr	r0, [sp, #28]
 80035f6:	f7fd fb79 	bl	8000cec <__aeabi_fmul>
 80035fa:	4601      	mov	r1, r0
 80035fc:	4640      	mov	r0, r8
 80035fe:	f7fd fa6b 	bl	8000ad8 <__aeabi_fsub>
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8003602:	4639      	mov	r1, r7
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8003604:	4680      	mov	r8, r0
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8003606:	9806      	ldr	r0, [sp, #24]
 8003608:	f7fd fb70 	bl	8000cec <__aeabi_fmul>
 800360c:	4621      	mov	r1, r4
 800360e:	f7fd fb6d 	bl	8000cec <__aeabi_fmul>
 8003612:	4601      	mov	r1, r0
 8003614:	4640      	mov	r0, r8
 8003616:	f7fd fa61 	bl	8000adc <__addsf3>
 800361a:	4649      	mov	r1, r9
 800361c:	4680      	mov	r8, r0
 800361e:	9804      	ldr	r0, [sp, #16]
 8003620:	f7fd fb64 	bl	8000cec <__aeabi_fmul>
 8003624:	4601      	mov	r1, r0
 8003626:	4640      	mov	r0, r8
 8003628:	f7fd fa56 	bl	8000ad8 <__aeabi_fsub>
 800362c:	4649      	mov	r1, r9
 800362e:	4680      	mov	r8, r0
 8003630:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003632:	f7fd fb5b 	bl	8000cec <__aeabi_fmul>
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8003636:	4601      	mov	r1, r0
 8003638:	4640      	mov	r0, r8
 800363a:	f7fd fa4f 	bl	8000adc <__addsf3>
	_4bx = 2.0f * _2bx;
	_4bz = 2.0f * _2bz;
 800363e:	4601      	mov	r1, r0
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8003640:	4680      	mov	r8, r0
	_4bz = 2.0f * _2bz;
 8003642:	f7fd fa4b 	bl	8000adc <__addsf3>

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003646:	990b      	ldr	r1, [sp, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8003648:	9015      	str	r0, [sp, #84]	; 0x54
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 800364a:	4608      	mov	r0, r1
 800364c:	f7fd fa46 	bl	8000adc <__addsf3>
	float _2q1q3 = 2.0f * q1 * q3;
 8003650:	9903      	ldr	r1, [sp, #12]
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003652:	4683      	mov	fp, r0
	float _2q1q3 = 2.0f * q1 * q3;
 8003654:	4628      	mov	r0, r5
 8003656:	f7fd fb49 	bl	8000cec <__aeabi_fmul>
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 800365a:	4601      	mov	r1, r0
 800365c:	4658      	mov	r0, fp
 800365e:	f7fd fa3b 	bl	8000ad8 <__aeabi_fsub>
	ax *= norm;
 8003662:	9911      	ldr	r1, [sp, #68]	; 0x44
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003664:	4683      	mov	fp, r0
	ax *= norm;
 8003666:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003668:	f7fd fb40 	bl	8000cec <__aeabi_fmul>
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 800366c:	4601      	mov	r1, r0
 800366e:	4658      	mov	r0, fp
 8003670:	f7fd fa32 	bl	8000ad8 <__aeabi_fsub>
	float _2q3q4 = 2.0f * q3 * q4;
 8003674:	9906      	ldr	r1, [sp, #24]
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003676:	900d      	str	r0, [sp, #52]	; 0x34
	float _2q3q4 = 2.0f * q3 * q4;
 8003678:	4620      	mov	r0, r4
 800367a:	f7fd fb37 	bl	8000cec <__aeabi_fmul>
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800367e:	990f      	ldr	r1, [sp, #60]	; 0x3c
	float _2q3q4 = 2.0f * q3 * q4;
 8003680:	4683      	mov	fp, r0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003682:	4608      	mov	r0, r1
 8003684:	f7fd fa2a 	bl	8000adc <__addsf3>
 8003688:	4601      	mov	r1, r0
 800368a:	4658      	mov	r0, fp
 800368c:	f7fd fa26 	bl	8000adc <__addsf3>
	ay *= norm;
 8003690:	9911      	ldr	r1, [sp, #68]	; 0x44
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003692:	4683      	mov	fp, r0
	ay *= norm;
 8003694:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003696:	f7fd fb29 	bl	8000cec <__aeabi_fmul>
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800369a:	4601      	mov	r1, r0
 800369c:	4658      	mov	r0, fp
 800369e:	f7fd fa1b 	bl	8000ad8 <__aeabi_fsub>
			- _2bz * q3
 80036a2:	4641      	mov	r1, r8
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 80036a4:	900e      	str	r0, [sp, #56]	; 0x38
			- _2bz * q3
 80036a6:	4628      	mov	r0, r5
 80036a8:	f7fd fb20 	bl	8000cec <__aeabi_fmul>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80036ac:	9904      	ldr	r1, [sp, #16]
			- _2bz * q3
 80036ae:	9016      	str	r0, [sp, #88]	; 0x58
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80036b0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80036b4:	f7fd fa10 	bl	8000ad8 <__aeabi_fsub>
 80036b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036ba:	f7fd fa0d 	bl	8000ad8 <__aeabi_fsub>
 80036be:	4631      	mov	r1, r6
 80036c0:	f7fd fb14 	bl	8000cec <__aeabi_fmul>
 80036c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80036c6:	4683      	mov	fp, r0
 80036c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80036ca:	f7fd fa05 	bl	8000ad8 <__aeabi_fsub>
 80036ce:	4641      	mov	r1, r8
 80036d0:	f7fd fb0c 	bl	8000cec <__aeabi_fmul>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4658      	mov	r0, fp
 80036d8:	f7fd fa00 	bl	8000adc <__addsf3>
 80036dc:	4651      	mov	r1, sl
 80036de:	f7fd f9fb 	bl	8000ad8 <__aeabi_fsub>
			+ (-_2bx * q4 + _2bz * q2)
 80036e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80036e6:	4641      	mov	r1, r8
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80036e8:	900c      	str	r0, [sp, #48]	; 0x30
			+ (-_2bx * q4 + _2bz * q2)
 80036ea:	9801      	ldr	r0, [sp, #4]
 80036ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80036ee:	f7fd fafd 	bl	8000cec <__aeabi_fmul>
	float q2q3 = q2 * q3;
 80036f2:	4629      	mov	r1, r5
			+ (-_2bx * q4 + _2bz * q2)
 80036f4:	9017      	str	r0, [sp, #92]	; 0x5c
	float q2q3 = q2 * q3;
 80036f6:	9801      	ldr	r0, [sp, #4]
 80036f8:	f7fd faf8 	bl	8000cec <__aeabi_fmul>
	float q1q4 = q1 * q4;
 80036fc:	4621      	mov	r1, r4
	float q2q3 = q2 * q3;
 80036fe:	4682      	mov	sl, r0
	float q1q4 = q1 * q4;
 8003700:	9802      	ldr	r0, [sp, #8]
 8003702:	f7fd faf3 	bl	8000cec <__aeabi_fmul>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003706:	4601      	mov	r1, r0
 8003708:	4650      	mov	r0, sl
 800370a:	f7fd f9e5 	bl	8000ad8 <__aeabi_fsub>
 800370e:	4631      	mov	r1, r6
 8003710:	f7fd faec 	bl	8000cec <__aeabi_fmul>
	float q3q4 = q3 * q4;
 8003714:	4621      	mov	r1, r4
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003716:	4682      	mov	sl, r0
	float q3q4 = q3 * q4;
 8003718:	4628      	mov	r0, r5
 800371a:	f7fd fae7 	bl	8000cec <__aeabi_fmul>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800371e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003720:	f7fd f9dc 	bl	8000adc <__addsf3>
 8003724:	4641      	mov	r1, r8
 8003726:	f7fd fae1 	bl	8000cec <__aeabi_fmul>
 800372a:	4601      	mov	r1, r0
 800372c:	4650      	mov	r0, sl
 800372e:	f7fd f9d5 	bl	8000adc <__addsf3>
 8003732:	4639      	mov	r1, r7
 8003734:	f7fd f9d0 	bl	8000ad8 <__aeabi_fsub>
			+ _2bx * q3
 8003738:	4631      	mov	r1, r6
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800373a:	900f      	str	r0, [sp, #60]	; 0x3c
			+ _2bx * q3
 800373c:	4628      	mov	r0, r5
 800373e:	f7fd fad5 	bl	8000cec <__aeabi_fmul>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003742:	9907      	ldr	r1, [sp, #28]
			+ _2bx * q3
 8003744:	4607      	mov	r7, r0
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003746:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800374a:	f7fd f9c5 	bl	8000ad8 <__aeabi_fsub>
 800374e:	9904      	ldr	r1, [sp, #16]
 8003750:	f7fd f9c2 	bl	8000ad8 <__aeabi_fsub>
 8003754:	4641      	mov	r1, r8
 8003756:	f7fd fac9 	bl	8000cec <__aeabi_fmul>
 800375a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800375c:	4682      	mov	sl, r0
 800375e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003760:	f7fd f9bc 	bl	8000adc <__addsf3>
 8003764:	4631      	mov	r1, r6
 8003766:	f7fd fac1 	bl	8000cec <__aeabi_fmul>
 800376a:	4601      	mov	r1, r0
 800376c:	4650      	mov	r0, sl
 800376e:	f7fd f9b5 	bl	8000adc <__addsf3>
 8003772:	4649      	mov	r1, r9
 8003774:	f7fd f9b0 	bl	8000ad8 <__aeabi_fsub>
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003778:	9b06      	ldr	r3, [sp, #24]
 800377a:	990d      	ldr	r1, [sp, #52]	; 0x34
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800377c:	900b      	str	r0, [sp, #44]	; 0x2c
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 800377e:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8003782:	f7fd fab3 	bl	8000cec <__aeabi_fmul>
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003786:	990e      	ldr	r1, [sp, #56]	; 0x38
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8003788:	4681      	mov	r9, r0
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800378a:	9805      	ldr	r0, [sp, #20]
 800378c:	f7fd faae 	bl	8000cec <__aeabi_fmul>
 8003790:	4601      	mov	r1, r0
 8003792:	4648      	mov	r0, r9
 8003794:	f7fd f9a2 	bl	8000adc <__addsf3>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003798:	990c      	ldr	r1, [sp, #48]	; 0x30
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 800379a:	4681      	mov	r9, r0
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 800379c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800379e:	f7fd faa5 	bl	8000cec <__aeabi_fmul>
			- _2bz * q3
 80037a2:	4601      	mov	r1, r0
 80037a4:	4648      	mov	r0, r9
 80037a6:	f7fd f997 	bl	8000ad8 <__aeabi_fsub>
			+ (-_2bx * q4 + _2bz * q2)
 80037aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
			- _2bz * q3
 80037ac:	4681      	mov	r9, r0
			+ (-_2bx * q4 + _2bz * q2)
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7fd fa9c 	bl	8000cec <__aeabi_fmul>
 80037b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80037b6:	f7fd f991 	bl	8000adc <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80037ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037bc:	f7fd fa96 	bl	8000cec <__aeabi_fmul>
			+ (-_2bx * q4 + _2bz * q2)
 80037c0:	4601      	mov	r1, r0
 80037c2:	4648      	mov	r0, r9
 80037c4:	f7fd f98a 	bl	8000adc <__addsf3>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80037c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
			+ (-_2bx * q4 + _2bz * q2)
 80037ca:	4681      	mov	r9, r0
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7fd fa8d 	bl	8000cec <__aeabi_fmul>
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 80037d2:	4601      	mov	r1, r0
 80037d4:	4648      	mov	r0, r9
 80037d6:	f7fd f981 	bl	8000adc <__addsf3>
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80037da:	9907      	ldr	r1, [sp, #28]
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 80037dc:	9012      	str	r0, [sp, #72]	; 0x48
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80037de:	4608      	mov	r0, r1
 80037e0:	f7fd f97c 	bl	8000adc <__addsf3>
 80037e4:	4601      	mov	r1, r0
 80037e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80037ea:	f7fd f975 	bl	8000ad8 <__aeabi_fsub>
 80037ee:	9904      	ldr	r1, [sp, #16]
 80037f0:	4681      	mov	r9, r0
 80037f2:	4608      	mov	r0, r1
 80037f4:	f7fd f972 	bl	8000adc <__addsf3>
 80037f8:	4601      	mov	r1, r0
 80037fa:	4648      	mov	r0, r9
 80037fc:	f7fd f96c 	bl	8000ad8 <__aeabi_fsub>
	az *= norm;
 8003800:	9911      	ldr	r1, [sp, #68]	; 0x44
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003802:	4681      	mov	r9, r0
	az *= norm;
 8003804:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003806:	f7fd fa71 	bl	8000cec <__aeabi_fmul>
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 800380a:	4601      	mov	r1, r0
 800380c:	4648      	mov	r0, r9
 800380e:	f7fd f963 	bl	8000ad8 <__aeabi_fsub>
			+ _2bz * q4
 8003812:	4641      	mov	r1, r8
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003814:	4683      	mov	fp, r0
			+ _2bz * q4
 8003816:	4620      	mov	r0, r4
 8003818:	f7fd fa68 	bl	8000cec <__aeabi_fmul>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
			+ (_2bx * q3 + _2bz * q1)
 800381c:	4641      	mov	r1, r8
			+ _2bz * q4
 800381e:	4681      	mov	r9, r0
			+ (_2bx * q3 + _2bz * q1)
 8003820:	9802      	ldr	r0, [sp, #8]
 8003822:	f7fd fa63 	bl	8000cec <__aeabi_fmul>
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 8003826:	990d      	ldr	r1, [sp, #52]	; 0x34
			+ (_2bx * q3 + _2bz * q1)
 8003828:	4682      	mov	sl, r0
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 800382a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800382c:	f7fd fa5e 	bl	8000cec <__aeabi_fmul>
 8003830:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003832:	4680      	mov	r8, r0
 8003834:	9803      	ldr	r0, [sp, #12]
 8003836:	f7fd fa59 	bl	8000cec <__aeabi_fmul>
 800383a:	4601      	mov	r1, r0
 800383c:	4640      	mov	r0, r8
 800383e:	f7fd f94d 	bl	8000adc <__addsf3>
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003842:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 8003846:	4680      	mov	r8, r0
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003848:	9801      	ldr	r0, [sp, #4]
 800384a:	f7fd fa4f 	bl	8000cec <__aeabi_fmul>
 800384e:	4659      	mov	r1, fp
 8003850:	f7fd fa4c 	bl	8000cec <__aeabi_fmul>
 8003854:	4601      	mov	r1, r0
 8003856:	4640      	mov	r0, r8
 8003858:	f7fd f93e 	bl	8000ad8 <__aeabi_fsub>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 800385c:	4649      	mov	r1, r9
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 800385e:	4680      	mov	r8, r0
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003860:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003862:	f7fd fa43 	bl	8000cec <__aeabi_fmul>
			+ _2bz * q4
 8003866:	4601      	mov	r1, r0
 8003868:	4640      	mov	r0, r8
 800386a:	f7fd f937 	bl	8000adc <__addsf3>
			+ (_2bx * q3 + _2bz * q1)
 800386e:	4651      	mov	r1, sl
			+ _2bz * q4
 8003870:	4680      	mov	r8, r0
			+ (_2bx * q3 + _2bz * q1)
 8003872:	4638      	mov	r0, r7
 8003874:	f7fd f932 	bl	8000adc <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003878:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800387a:	f7fd fa37 	bl	8000cec <__aeabi_fmul>
			+ (_2bx * q3 + _2bz * q1)
 800387e:	4601      	mov	r1, r0
 8003880:	4640      	mov	r0, r8
 8003882:	f7fd f92b 	bl	8000adc <__addsf3>
			+ (_2bx * q4 - _4bz * q2)
 8003886:	4631      	mov	r1, r6
			+ (_2bx * q3 + _2bz * q1)
 8003888:	4607      	mov	r7, r0
			+ (_2bx * q4 - _4bz * q2)
 800388a:	4620      	mov	r0, r4
 800388c:	f7fd fa2e 	bl	8000cec <__aeabi_fmul>
 8003890:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003892:	4680      	mov	r8, r0
 8003894:	9801      	ldr	r0, [sp, #4]
 8003896:	f7fd fa29 	bl	8000cec <__aeabi_fmul>
 800389a:	4601      	mov	r1, r0
 800389c:	4640      	mov	r0, r8
 800389e:	f7fd f91b 	bl	8000ad8 <__aeabi_fsub>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80038a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038a4:	f7fd fa22 	bl	8000cec <__aeabi_fmul>
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80038a8:	4601      	mov	r1, r0
 80038aa:	4638      	mov	r0, r7
 80038ac:	f7fd f916 	bl	8000adc <__addsf3>
	_4bx = 2.0f * _2bx;
 80038b0:	4631      	mov	r1, r6
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80038b2:	9004      	str	r0, [sp, #16]
	_4bx = 2.0f * _2bx;
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7fd f911 	bl	8000adc <__addsf3>
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
			+ (-_4bx * q3 - _2bz * q1)
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
			+ (_2bx * q2 + _2bz * q4)
 80038ba:	4631      	mov	r1, r6
			+ (-_4bx * q3 - _2bz * q1)
 80038bc:	f100 4800 	add.w	r8, r0, #2147483648	; 0x80000000
			+ (_2bx * q2 + _2bz * q4)
 80038c0:	9801      	ldr	r0, [sp, #4]
 80038c2:	f7fd fa13 	bl	8000cec <__aeabi_fmul>
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 80038c6:	9b03      	ldr	r3, [sp, #12]
			+ (_2bx * q2 + _2bz * q4)
 80038c8:	4607      	mov	r7, r0
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 80038ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038cc:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 80038d0:	f7fd fa0c 	bl	8000cec <__aeabi_fmul>
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 80038d4:	990e      	ldr	r1, [sp, #56]	; 0x38
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 80038d6:	9003      	str	r0, [sp, #12]
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 80038d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80038da:	f7fd fa07 	bl	8000cec <__aeabi_fmul>
 80038de:	9b03      	ldr	r3, [sp, #12]
 80038e0:	4601      	mov	r1, r0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f8fa 	bl	8000adc <__addsf3>
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80038e8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 80038ec:	9003      	str	r0, [sp, #12]
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 80038ee:	4628      	mov	r0, r5
 80038f0:	f7fd f9fc 	bl	8000cec <__aeabi_fmul>
 80038f4:	4659      	mov	r1, fp
 80038f6:	f7fd f9f9 	bl	8000cec <__aeabi_fmul>
 80038fa:	9b03      	ldr	r3, [sp, #12]
 80038fc:	4601      	mov	r1, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd f8ea 	bl	8000ad8 <__aeabi_fsub>
			+ (-_4bx * q3 - _2bz * q1)
 8003904:	4641      	mov	r1, r8
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003906:	4683      	mov	fp, r0
			+ (-_4bx * q3 - _2bz * q1)
 8003908:	4628      	mov	r0, r5
 800390a:	f7fd f9ef 	bl	8000cec <__aeabi_fmul>
 800390e:	4651      	mov	r1, sl
 8003910:	f7fd f8e2 	bl	8000ad8 <__aeabi_fsub>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003916:	f7fd f9e9 	bl	8000cec <__aeabi_fmul>
			+ (-_4bx * q3 - _2bz * q1)
 800391a:	4601      	mov	r1, r0
 800391c:	4658      	mov	r0, fp
 800391e:	f7fd f8dd 	bl	8000adc <__addsf3>
			+ (_2bx * q2 + _2bz * q4)
 8003922:	4639      	mov	r1, r7
			+ (-_4bx * q3 - _2bz * q1)
 8003924:	4682      	mov	sl, r0
			+ (_2bx * q2 + _2bz * q4)
 8003926:	4648      	mov	r0, r9
 8003928:	f7fd f8d8 	bl	8000adc <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800392c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800392e:	f7fd f9dd 	bl	8000cec <__aeabi_fmul>
			+ (_2bx * q2 + _2bz * q4)
 8003932:	4601      	mov	r1, r0
 8003934:	4650      	mov	r0, sl
 8003936:	f7fd f8d1 	bl	8000adc <__addsf3>
			+ (_2bx * q1 - _4bz * q3)
 800393a:	4631      	mov	r1, r6
			+ (_2bx * q2 + _2bz * q4)
 800393c:	4681      	mov	r9, r0
			+ (_2bx * q1 - _4bz * q3)
 800393e:	9802      	ldr	r0, [sp, #8]
 8003940:	f7fd f9d4 	bl	8000cec <__aeabi_fmul>
 8003944:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003946:	4606      	mov	r6, r0
 8003948:	4628      	mov	r0, r5
 800394a:	f7fd f9cf 	bl	8000cec <__aeabi_fmul>
 800394e:	4601      	mov	r1, r0
 8003950:	4630      	mov	r0, r6
 8003952:	f7fd f8c1 	bl	8000ad8 <__aeabi_fsub>
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003958:	f7fd f9c8 	bl	8000cec <__aeabi_fmul>
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 800395c:	4601      	mov	r1, r0
 800395e:	4648      	mov	r0, r9
 8003960:	f7fd f8bc 	bl	8000adc <__addsf3>
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 8003964:	990d      	ldr	r1, [sp, #52]	; 0x34
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 8003966:	4683      	mov	fp, r0
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 8003968:	9805      	ldr	r0, [sp, #20]
 800396a:	f7fd f9bf 	bl	8000cec <__aeabi_fmul>
 800396e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003970:	4606      	mov	r6, r0
 8003972:	9806      	ldr	r0, [sp, #24]
 8003974:	f7fd f9ba 	bl	8000cec <__aeabi_fmul>
 8003978:	4601      	mov	r1, r0
 800397a:	4630      	mov	r0, r6
 800397c:	f7fd f8ae 	bl	8000adc <__addsf3>
			+ (-_4bx * q4 + _2bz * q2)
 8003980:	4641      	mov	r1, r8
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 8003982:	4606      	mov	r6, r0
			+ (-_4bx * q4 + _2bz * q2)
 8003984:	4620      	mov	r0, r4
 8003986:	f7fd f9b1 	bl	8000cec <__aeabi_fmul>
 800398a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800398c:	f7fd f8a6 	bl	8000adc <__addsf3>
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003990:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003992:	f7fd f9ab 	bl	8000cec <__aeabi_fmul>
			+ (-_4bx * q4 + _2bz * q2)
 8003996:	4601      	mov	r1, r0
 8003998:	4630      	mov	r0, r6
 800399a:	f7fd f89f 	bl	8000adc <__addsf3>
			+ (-_2bx * q1 + _2bz * q3)
 800399e:	9913      	ldr	r1, [sp, #76]	; 0x4c
			+ (-_4bx * q4 + _2bz * q2)
 80039a0:	4606      	mov	r6, r0
			+ (-_2bx * q1 + _2bz * q3)
 80039a2:	9802      	ldr	r0, [sp, #8]
 80039a4:	f7fd f9a2 	bl	8000cec <__aeabi_fmul>
 80039a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80039aa:	f7fd f897 	bl	8000adc <__addsf3>
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80039ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80039b0:	f7fd f99c 	bl	8000cec <__aeabi_fmul>
			+ (-_2bx * q1 + _2bz * q3)
 80039b4:	4601      	mov	r1, r0
 80039b6:	4630      	mov	r0, r6
 80039b8:	f7fd f890 	bl	8000adc <__addsf3>
			+ _2bx * q2
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80039bc:	4639      	mov	r1, r7
			+ (-_2bx * q1 + _2bz * q3)
 80039be:	4606      	mov	r6, r0
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80039c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039c2:	f7fd f993 	bl	8000cec <__aeabi_fmul>
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 80039c6:	4601      	mov	r1, r0
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7fd f887 	bl	8000adc <__addsf3>
	norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // Normalize step magnitude
 80039ce:	9912      	ldr	r1, [sp, #72]	; 0x48
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 80039d0:	4682      	mov	sl, r0
	norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // Normalize step magnitude
 80039d2:	4608      	mov	r0, r1
 80039d4:	f7fd f98a 	bl	8000cec <__aeabi_fmul>
 80039d8:	9904      	ldr	r1, [sp, #16]
 80039da:	4606      	mov	r6, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	f7fd f985 	bl	8000cec <__aeabi_fmul>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4630      	mov	r0, r6
 80039e6:	f7fd f879 	bl	8000adc <__addsf3>
 80039ea:	4659      	mov	r1, fp
 80039ec:	4606      	mov	r6, r0
 80039ee:	4658      	mov	r0, fp
 80039f0:	f7fd f97c 	bl	8000cec <__aeabi_fmul>
 80039f4:	4601      	mov	r1, r0
 80039f6:	4630      	mov	r0, r6
 80039f8:	f7fd f870 	bl	8000adc <__addsf3>
 80039fc:	4651      	mov	r1, sl
 80039fe:	4606      	mov	r6, r0
 8003a00:	4650      	mov	r0, sl
 8003a02:	f7fd f973 	bl	8000cec <__aeabi_fmul>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7fd f867 	bl	8000adc <__addsf3>
 8003a0e:	f7fc fd0b 	bl	8000428 <__aeabi_f2d>
 8003a12:	f002 fa83 	bl	8005f1c <sqrt>
 8003a16:	f7fd f80b 	bl	8000a30 <__aeabi_d2f>
	norm = 1.0f / norm;
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a20:	f7fd fa18 	bl	8000e54 <__aeabi_fdiv>
	s2 *= norm;
	s3 *= norm;
	s4 *= norm;

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a24:	49aa      	ldr	r1, [pc, #680]	; (8003cd0 <MadgwickQuaternionUpdate+0xa50>)
	norm = 1.0f / norm;
 8003a26:	4606      	mov	r6, r0
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a28:	680b      	ldr	r3, [r1, #0]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003a2a:	680a      	ldr	r2, [r1, #0]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a2c:	9306      	str	r3, [sp, #24]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003a2e:	680b      	ldr	r3, [r1, #0]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003a30:	9207      	str	r2, [sp, #28]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003a32:	9303      	str	r3, [sp, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003a34:	680b      	ldr	r3, [r1, #0]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a36:	9908      	ldr	r1, [sp, #32]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003a38:	9305      	str	r3, [sp, #20]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a3a:	9b01      	ldr	r3, [sp, #4]

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 8003a3c:	4fa5      	ldr	r7, [pc, #660]	; (8003cd4 <MadgwickQuaternionUpdate+0xa54>)
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a3e:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8003a42:	f7fd f953 	bl	8000cec <__aeabi_fmul>
 8003a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a48:	4681      	mov	r9, r0
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7fd f94e 	bl	8000cec <__aeabi_fmul>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4648      	mov	r0, r9
 8003a54:	f7fd f840 	bl	8000ad8 <__aeabi_fsub>
 8003a58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a5a:	4681      	mov	r9, r0
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7fd f945 	bl	8000cec <__aeabi_fmul>
 8003a62:	4601      	mov	r1, r0
 8003a64:	4648      	mov	r0, r9
 8003a66:	f7fd f837 	bl	8000ad8 <__aeabi_fsub>
 8003a6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a6e:	f7fd f93d 	bl	8000cec <__aeabi_fmul>
	s1 *= norm;
 8003a72:	4631      	mov	r1, r6
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a74:	4681      	mov	r9, r0
	s1 *= norm;
 8003a76:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003a78:	f7fd f938 	bl	8000cec <__aeabi_fmul>
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a7c:	9b06      	ldr	r3, [sp, #24]
	q1 += qDot1 * deltat;
 8003a7e:	f8d7 8000 	ldr.w	r8, [r7]
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7fd f932 	bl	8000cec <__aeabi_fmul>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4648      	mov	r0, r9
 8003a8c:	f7fd f824 	bl	8000ad8 <__aeabi_fsub>
	q1 += qDot1 * deltat;
 8003a90:	4641      	mov	r1, r8
 8003a92:	f7fd f92b 	bl	8000cec <__aeabi_fmul>
 8003a96:	9902      	ldr	r1, [sp, #8]
 8003a98:	f7fd f820 	bl	8000adc <__addsf3>
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003a9c:	9908      	ldr	r1, [sp, #32]
	q1 += qDot1 * deltat;
 8003a9e:	4681      	mov	r9, r0
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003aa0:	9802      	ldr	r0, [sp, #8]
 8003aa2:	f7fd f923 	bl	8000cec <__aeabi_fmul>
 8003aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003aa8:	9006      	str	r0, [sp, #24]
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7fd f91e 	bl	8000cec <__aeabi_fmul>
 8003ab0:	9b06      	ldr	r3, [sp, #24]
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	4618      	mov	r0, r3
	q2 += qDot2 * deltat;
 8003ab6:	f8d7 8000 	ldr.w	r8, [r7]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003aba:	f7fd f80f 	bl	8000adc <__addsf3>
 8003abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ac0:	9006      	str	r0, [sp, #24]
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fd f912 	bl	8000cec <__aeabi_fmul>
 8003ac8:	9b06      	ldr	r3, [sp, #24]
 8003aca:	4601      	mov	r1, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd f803 	bl	8000ad8 <__aeabi_fsub>
 8003ad2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ad6:	f7fd f909 	bl	8000cec <__aeabi_fmul>
	s2 *= norm;
 8003ada:	4631      	mov	r1, r6
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003adc:	9006      	str	r0, [sp, #24]
	s2 *= norm;
 8003ade:	9804      	ldr	r0, [sp, #16]
 8003ae0:	f7fd f904 	bl	8000cec <__aeabi_fmul>
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8003ae4:	9a07      	ldr	r2, [sp, #28]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	f7fd f900 	bl	8000cec <__aeabi_fmul>
 8003aec:	9b06      	ldr	r3, [sp, #24]
 8003aee:	4601      	mov	r1, r0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fff1 	bl	8000ad8 <__aeabi_fsub>
	q2 += qDot2 * deltat;
 8003af6:	4641      	mov	r1, r8
 8003af8:	f7fd f8f8 	bl	8000cec <__aeabi_fmul>
 8003afc:	9901      	ldr	r1, [sp, #4]
 8003afe:	f7fc ffed 	bl	8000adc <__addsf3>
	q3 += qDot3 * deltat;
 8003b02:	683b      	ldr	r3, [r7, #0]
	q2 += qDot2 * deltat;
 8003b04:	4680      	mov	r8, r0
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b08:	9802      	ldr	r0, [sp, #8]
	q3 += qDot3 * deltat;
 8003b0a:	9306      	str	r3, [sp, #24]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003b0c:	f7fd f8ee 	bl	8000cec <__aeabi_fmul>
 8003b10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b12:	9004      	str	r0, [sp, #16]
 8003b14:	9801      	ldr	r0, [sp, #4]
 8003b16:	f7fd f8e9 	bl	8000cec <__aeabi_fmul>
 8003b1a:	9a04      	ldr	r2, [sp, #16]
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7fc ffda 	bl	8000ad8 <__aeabi_fsub>
 8003b24:	9908      	ldr	r1, [sp, #32]
 8003b26:	9004      	str	r0, [sp, #16]
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7fd f8df 	bl	8000cec <__aeabi_fmul>
 8003b2e:	9a04      	ldr	r2, [sp, #16]
 8003b30:	4601      	mov	r1, r0
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fc ffd2 	bl	8000adc <__addsf3>
 8003b38:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b3c:	f7fd f8d6 	bl	8000cec <__aeabi_fmul>
	s3 *= norm;
 8003b40:	4631      	mov	r1, r6
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003b42:	9004      	str	r0, [sp, #16]
	s3 *= norm;
 8003b44:	4658      	mov	r0, fp
 8003b46:	f7fd f8d1 	bl	8000cec <__aeabi_fmul>
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003b4a:	9903      	ldr	r1, [sp, #12]
 8003b4c:	f7fd f8ce 	bl	8000cec <__aeabi_fmul>
 8003b50:	9a04      	ldr	r2, [sp, #16]
 8003b52:	4601      	mov	r1, r0
 8003b54:	4610      	mov	r0, r2
 8003b56:	f7fc ffbf 	bl	8000ad8 <__aeabi_fsub>
	q3 += qDot3 * deltat;
 8003b5a:	9b06      	ldr	r3, [sp, #24]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fd f8c5 	bl	8000cec <__aeabi_fmul>
 8003b62:	4629      	mov	r1, r5
 8003b64:	f7fc ffba 	bl	8000adc <__addsf3>
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003b68:	990a      	ldr	r1, [sp, #40]	; 0x28
	q3 += qDot3 * deltat;
 8003b6a:	4683      	mov	fp, r0
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003b6c:	9802      	ldr	r0, [sp, #8]
 8003b6e:	f7fd f8bd 	bl	8000cec <__aeabi_fmul>
 8003b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b74:	9002      	str	r0, [sp, #8]
 8003b76:	9801      	ldr	r0, [sp, #4]
 8003b78:	f7fd f8b8 	bl	8000cec <__aeabi_fmul>
 8003b7c:	9b02      	ldr	r3, [sp, #8]
 8003b7e:	4601      	mov	r1, r0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc ffab 	bl	8000adc <__addsf3>
 8003b86:	9908      	ldr	r1, [sp, #32]
 8003b88:	9001      	str	r0, [sp, #4]
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f7fd f8ae 	bl	8000cec <__aeabi_fmul>
 8003b90:	9b01      	ldr	r3, [sp, #4]
 8003b92:	4601      	mov	r1, r0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc ff9f 	bl	8000ad8 <__aeabi_fsub>
 8003b9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b9e:	f7fd f8a5 	bl	8000cec <__aeabi_fmul>
	s4 *= norm;
 8003ba2:	4631      	mov	r1, r6
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003ba4:	4605      	mov	r5, r0
	s4 *= norm;
 8003ba6:	4650      	mov	r0, sl
 8003ba8:	f7fd f8a0 	bl	8000cec <__aeabi_fmul>
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003bac:	9905      	ldr	r1, [sp, #20]
 8003bae:	f7fd f89d 	bl	8000cec <__aeabi_fmul>
	q4 += qDot4 * deltat;
 8003bb2:	683f      	ldr	r7, [r7, #0]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8003bb4:	4601      	mov	r1, r0
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7fc ff8e 	bl	8000ad8 <__aeabi_fsub>
	q4 += qDot4 * deltat;
 8003bbc:	4639      	mov	r1, r7
 8003bbe:	f7fd f895 	bl	8000cec <__aeabi_fmul>
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	f7fc ff8a 	bl	8000adc <__addsf3>
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);  // Normalize quaternion
 8003bc8:	4649      	mov	r1, r9
	q4 += qDot4 * deltat;
 8003bca:	4606      	mov	r6, r0
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);  // Normalize quaternion
 8003bcc:	4648      	mov	r0, r9
 8003bce:	f7fd f88d 	bl	8000cec <__aeabi_fmul>
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f7fd f888 	bl	8000cec <__aeabi_fmul>
 8003bdc:	4601      	mov	r1, r0
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fc ff7c 	bl	8000adc <__addsf3>
 8003be4:	4659      	mov	r1, fp
 8003be6:	4604      	mov	r4, r0
 8003be8:	4658      	mov	r0, fp
 8003bea:	f7fd f87f 	bl	8000cec <__aeabi_fmul>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7fc ff73 	bl	8000adc <__addsf3>
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7fd f876 	bl	8000cec <__aeabi_fmul>
 8003c00:	4601      	mov	r1, r0
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7fc ff6a 	bl	8000adc <__addsf3>
 8003c08:	f7fc fc0e 	bl	8000428 <__aeabi_f2d>
 8003c0c:	f002 f986 	bl	8005f1c <sqrt>
 8003c10:	f7fc ff0e 	bl	8000a30 <__aeabi_d2f>
	norm = 1.0f / norm;
 8003c14:	4601      	mov	r1, r0
 8003c16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c1a:	f7fd f91b 	bl	8000e54 <__aeabi_fdiv>
 8003c1e:	4605      	mov	r5, r0
	q[0] = q1 * norm;
 8003c20:	4601      	mov	r1, r0
 8003c22:	4648      	mov	r0, r9
 8003c24:	f7fd f862 	bl	8000cec <__aeabi_fmul>
 8003c28:	4c2b      	ldr	r4, [pc, #172]	; (8003cd8 <MadgwickQuaternionUpdate+0xa58>)
 8003c2a:	4607      	mov	r7, r0
 8003c2c:	6020      	str	r0, [r4, #0]
	q[1] = q2 * norm;
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4640      	mov	r0, r8
 8003c32:	f7fd f85b 	bl	8000cec <__aeabi_fmul>
	q[2] = q3 * norm;
 8003c36:	4629      	mov	r1, r5
	q[1] = q2 * norm;
 8003c38:	4681      	mov	r9, r0
 8003c3a:	6060      	str	r0, [r4, #4]
	q[2] = q3 * norm;
 8003c3c:	4658      	mov	r0, fp
 8003c3e:	f7fd f855 	bl	8000cec <__aeabi_fmul>
	q[3] = q4 * norm;
 8003c42:	4629      	mov	r1, r5
	q[2] = q3 * norm;
 8003c44:	4680      	mov	r8, r0
 8003c46:	60a0      	str	r0, [r4, #8]
	q[3] = q4 * norm;
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f7fd f84f 	bl	8000cec <__aeabi_fmul>
 8003c4e:	4601      	mov	r1, r0
 8003c50:	60e0      	str	r0, [r4, #12]

	// Calculate pitch, roll and yaw
	angle[0] = -asin(2.0f * (q[1] * q[3] - q[0] * q[2])) * 180 / M_PI;
 8003c52:	4648      	mov	r0, r9
 8003c54:	f7fd f84a 	bl	8000cec <__aeabi_fmul>
 8003c58:	4641      	mov	r1, r8
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f7fd f845 	bl	8000cec <__aeabi_fmul>
 8003c62:	4601      	mov	r1, r0
 8003c64:	4628      	mov	r0, r5
 8003c66:	f7fc ff37 	bl	8000ad8 <__aeabi_fsub>
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	f7fc ff36 	bl	8000adc <__addsf3>
 8003c70:	f7fc fbda 	bl	8000428 <__aeabi_f2d>
 8003c74:	f001 ff98 	bl	8005ba8 <asin>
 8003c78:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <MadgwickQuaternionUpdate+0xa5c>)
 8003c80:	4639      	mov	r1, r7
 8003c82:	f7fc fc25 	bl	80004d0 <__aeabi_dmul>
 8003c86:	a310      	add	r3, pc, #64	; (adr r3, 8003cc8 <MadgwickQuaternionUpdate+0xa48>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fd4a 	bl	8000724 <__aeabi_ddiv>
 8003c90:	f7fc fece 	bl	8000a30 <__aeabi_d2f>
 8003c94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003c96:	6018      	str	r0, [r3, #0]
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 8003c98:	f8d4 9000 	ldr.w	r9, [r4]
 8003c9c:	f8d4 a004 	ldr.w	sl, [r4, #4]
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4648      	mov	r0, r9
 8003ca4:	f7fd f822 	bl	8000cec <__aeabi_fmul>
 8003ca8:	4651      	mov	r1, sl
 8003caa:	4606      	mov	r6, r0
 8003cac:	4650      	mov	r0, sl
 8003cae:	f7fd f81d 	bl	8000cec <__aeabi_fmul>
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f7fc ff0f 	bl	8000ad8 <__aeabi_fsub>
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 8003cba:	68a5      	ldr	r5, [r4, #8]
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	e00d      	b.n	8003ce0 <MadgwickQuaternionUpdate+0xa60>
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	54442d18 	.word	0x54442d18
 8003ccc:	400921fb 	.word	0x400921fb
 8003cd0:	20000358 	.word	0x20000358
 8003cd4:	2000035c 	.word	0x2000035c
 8003cd8:	2000003c 	.word	0x2000003c
 8003cdc:	40668000 	.word	0x40668000
 8003ce0:	f7fd f804 	bl	8000cec <__aeabi_fmul>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f7fc fef6 	bl	8000ad8 <__aeabi_fsub>
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 8003cec:	f8d4 800c 	ldr.w	r8, [r4, #12]
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	4640      	mov	r0, r8
 8003cf6:	f7fc fff9 	bl	8000cec <__aeabi_fmul>
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7fc feed 	bl	8000adc <__addsf3>
	angle[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]),
 8003d02:	f7fc fb91 	bl	8000428 <__aeabi_f2d>
 8003d06:	4606      	mov	r6, r0
 8003d08:	460f      	mov	r7, r1
 8003d0a:	4648      	mov	r0, r9
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	f7fc ffed 	bl	8000cec <__aeabi_fmul>
 8003d12:	4641      	mov	r1, r8
 8003d14:	4681      	mov	r9, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7fc ffe8 	bl	8000cec <__aeabi_fmul>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4648      	mov	r0, r9
 8003d20:	f7fc fedc 	bl	8000adc <__addsf3>
 8003d24:	4601      	mov	r1, r0
 8003d26:	f7fc fed9 	bl	8000adc <__addsf3>
 8003d2a:	f7fc fb7d 	bl	8000428 <__aeabi_f2d>
 8003d2e:	4632      	mov	r2, r6
 8003d30:	463b      	mov	r3, r7
 8003d32:	f001 ff8d 	bl	8005c50 <atan2>
			q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * 180 / M_PI;
 8003d36:	2200      	movs	r2, #0
 8003d38:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <MadgwickQuaternionUpdate+0xb78>)
 8003d3a:	f7fc fbc9 	bl	80004d0 <__aeabi_dmul>
 8003d3e:	a32c      	add	r3, pc, #176	; (adr r3, 8003df0 <MadgwickQuaternionUpdate+0xb70>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fcee 	bl	8000724 <__aeabi_ddiv>
 8003d48:	f7fc fe72 	bl	8000a30 <__aeabi_d2f>
 8003d4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003d4e:	6058      	str	r0, [r3, #4]
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	f8d4 8004 	ldr.w	r8, [r4, #4]
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 8003d56:	4629      	mov	r1, r5
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f7fc ffc7 	bl	8000cec <__aeabi_fmul>
 8003d5e:	4641      	mov	r1, r8
 8003d60:	4606      	mov	r6, r0
 8003d62:	4640      	mov	r0, r8
 8003d64:	f7fc ffc2 	bl	8000cec <__aeabi_fmul>
 8003d68:	4601      	mov	r1, r0
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f7fc feb6 	bl	8000adc <__addsf3>
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8003d70:	f8d4 9008 	ldr.w	r9, [r4, #8]
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 8003d74:	4606      	mov	r6, r0
 8003d76:	4649      	mov	r1, r9
 8003d78:	4648      	mov	r0, r9
 8003d7a:	f7fc ffb7 	bl	8000cec <__aeabi_fmul>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4630      	mov	r0, r6
 8003d82:	f7fc fea9 	bl	8000ad8 <__aeabi_fsub>
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8003d86:	68e4      	ldr	r4, [r4, #12]
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 8003d88:	4606      	mov	r6, r0
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7fc ffad 	bl	8000cec <__aeabi_fmul>
 8003d92:	4601      	mov	r1, r0
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7fc fe9f 	bl	8000ad8 <__aeabi_fsub>
	angle[2] = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8003d9a:	f7fc fb45 	bl	8000428 <__aeabi_f2d>
 8003d9e:	4606      	mov	r6, r0
 8003da0:	460f      	mov	r7, r1
 8003da2:	4640      	mov	r0, r8
 8003da4:	4649      	mov	r1, r9
 8003da6:	f7fc ffa1 	bl	8000cec <__aeabi_fmul>
 8003daa:	4621      	mov	r1, r4
 8003dac:	4680      	mov	r8, r0
 8003dae:	4628      	mov	r0, r5
 8003db0:	f7fc ff9c 	bl	8000cec <__aeabi_fmul>
 8003db4:	4601      	mov	r1, r0
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7fc fe90 	bl	8000adc <__addsf3>
 8003dbc:	4601      	mov	r1, r0
 8003dbe:	f7fc fe8d 	bl	8000adc <__addsf3>
 8003dc2:	f7fc fb31 	bl	8000428 <__aeabi_f2d>
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	463b      	mov	r3, r7
 8003dca:	f001 ff41 	bl	8005c50 <atan2>
			q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * 180 / M_PI);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MadgwickQuaternionUpdate+0xb78>)
 8003dd2:	f7fc fb7d 	bl	80004d0 <__aeabi_dmul>
 8003dd6:	a306      	add	r3, pc, #24	; (adr r3, 8003df0 <MadgwickQuaternionUpdate+0xb70>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc fca2 	bl	8000724 <__aeabi_ddiv>
 8003de0:	f7fc fe26 	bl	8000a30 <__aeabi_d2f>
 8003de4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003de6:	6098      	str	r0, [r3, #8]
}
 8003de8:	b019      	add	sp, #100	; 0x64
 8003dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dee:	bf00      	nop
 8003df0:	54442d18 	.word	0x54442d18
 8003df4:	400921fb 	.word	0x400921fb
 8003df8:	40668000 	.word	0x40668000

08003dfc <CB_Write>:

CircularBuffer rxc, txc;

int CB_Write(CircularBuffer *cb, uint8_t data)
{
	if ((cb->size >= CBUF_SIZE) && !CBUF_OVERWRITE) return 0;
 8003dfc:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	; 0x804

	cb->size++;
 8003e00:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	; 0x804
 8003e04:	3301      	adds	r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f8a0 3804 	strh.w	r3, [r0, #2052]	; 0x804
	cb->buffer[cb->tail] = data;
 8003e0c:	f8b0 3802 	ldrh.w	r3, [r0, #2050]	; 0x802
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	54c1      	strb	r1, [r0, r3]
	cb->tail = (cb->tail+1) % CBUF_SIZE;
 8003e14:	f8b0 3802 	ldrh.w	r3, [r0, #2050]	; 0x802
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e1e:	f8a0 3802 	strh.w	r3, [r0, #2050]	; 0x802
	return 1;
}
 8003e22:	2001      	movs	r0, #1
 8003e24:	4770      	bx	lr

08003e26 <CB_Read>:

int CB_Read(CircularBuffer *cb, volatile uint8_t *data)
{
	if (cb->size == 0) return 0;
 8003e26:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	; 0x804
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	b1a3      	cbz	r3, 8003e58 <CB_Read+0x32>

	cb->size--;
 8003e2e:	f8b0 3804 	ldrh.w	r3, [r0, #2052]	; 0x804
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f8a0 3804 	strh.w	r3, [r0, #2052]	; 0x804
	*data = cb->buffer[cb->head];
 8003e3a:	f8b0 3800 	ldrh.w	r3, [r0, #2048]	; 0x800
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	5cc3      	ldrb	r3, [r0, r3]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	700b      	strb	r3, [r1, #0]
	cb->head = (cb->head+1) % CBUF_SIZE;
 8003e46:	f8b0 3800 	ldrh.w	r3, [r0, #2048]	; 0x800
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e50:	f8a0 3800 	strh.w	r3, [r0, #2048]	; 0x800
	return 1;
 8003e54:	2001      	movs	r0, #1
 8003e56:	4770      	bx	lr
	if (cb->size == 0) return 0;
 8003e58:	4618      	mov	r0, r3
}
 8003e5a:	4770      	bx	lr

08003e5c <CB_Size>:

uint16_t CB_Size(CircularBuffer *cb)
{
	return (cb->size);
 8003e5c:	f8b0 0804 	ldrh.w	r0, [r0, #2052]	; 0x804
}
 8003e60:	b280      	uxth	r0, r0
 8003e62:	4770      	bx	lr

08003e64 <CB_Init>:

void CB_Init(CircularBuffer *cb)
{
	cb->head = 0;
 8003e64:	2300      	movs	r3, #0
	cb->tail = 0;
	cb->size = 0;
	for (int i=0; i<CBUF_SIZE; i++)
		cb->buffer[i] = 0;
 8003e66:	461a      	mov	r2, r3
	cb->head = 0;
 8003e68:	f8a0 3800 	strh.w	r3, [r0, #2048]	; 0x800
	cb->tail = 0;
 8003e6c:	f8a0 3802 	strh.w	r3, [r0, #2050]	; 0x802
	cb->size = 0;
 8003e70:	f8a0 3804 	strh.w	r3, [r0, #2052]	; 0x804
		cb->buffer[i] = 0;
 8003e74:	54c2      	strb	r2, [r0, r3]
	for (int i=0; i<CBUF_SIZE; i++)
 8003e76:	3301      	adds	r3, #1
 8003e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7c:	d1fa      	bne.n	8003e74 <CB_Init+0x10>
}
 8003e7e:	4770      	bx	lr

08003e80 <lowPassFilter>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float lowPassFilter(struct LPF *var, float current)
{
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	460e      	mov	r6, r1
	current = ((1 - var->beta) * current) + (var->beta * var->last);
 8003e84:	6845      	ldr	r5, [r0, #4]
{
 8003e86:	4604      	mov	r4, r0
	current = ((1 - var->beta) * current) + (var->beta * var->last);
 8003e88:	4629      	mov	r1, r5
 8003e8a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e8e:	f7fc fe23 	bl	8000ad8 <__aeabi_fsub>
 8003e92:	4631      	mov	r1, r6
 8003e94:	f7fc ff2a 	bl	8000cec <__aeabi_fmul>
 8003e98:	4606      	mov	r6, r0
 8003e9a:	6821      	ldr	r1, [r4, #0]
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f7fc ff25 	bl	8000cec <__aeabi_fmul>
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	f7fc fe1a 	bl	8000adc <__addsf3>
	var->last = current;
 8003ea8:	6020      	str	r0, [r4, #0]
	return current;
}
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}

08003eac <toggleLED>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

/* led -> LED Number, val -> Digital output value */
void toggleLED(int led_white, int led_red, int led_blue)
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4615      	mov	r5, r2
	HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, !led_white);
 8003eb0:	fab0 f280 	clz	r2, r0
{
 8003eb4:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, !led_white);
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <toggleLED+0x3c>)
 8003eb8:	0952      	lsrs	r2, r2, #5
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec0:	f7fd fa9a 	bl	80013f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, !led_red);
 8003ec4:	fab6 f286 	clz	r2, r6
 8003ec8:	4620      	mov	r0, r4
 8003eca:	0952      	lsrs	r2, r2, #5
 8003ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ed0:	f7fd fa92 	bl	80013f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, !led_blue);
 8003ed4:	fab5 f285 	clz	r2, r5
 8003ed8:	4620      	mov	r0, r4
}
 8003eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, !led_blue);
 8003ede:	0952      	lsrs	r2, r2, #5
 8003ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ee4:	f7fd ba88 	b.w	80013f8 <HAL_GPIO_WritePin>
 8003ee8:	40011000 	.word	0x40011000

08003eec <LED_StartupSequence>:

/* LED sequence on reset */
void LED_StartupSequence()
{
 8003eec:	b510      	push	{r4, lr}
 8003eee:	2403      	movs	r4, #3
	for (int i=0; i<3; i++)
	{
		toggleLED(1, 0, 0);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	f7ff ffd9 	bl	8003eac <toggleLED>
		delay_ms(100);
 8003efa:	2064      	movs	r0, #100	; 0x64
 8003efc:	f001 f9dc 	bl	80052b8 <delay_ms>

		toggleLED(0, 1, 0);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2101      	movs	r1, #1
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7ff ffd1 	bl	8003eac <toggleLED>
		delay_ms(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f001 f9d4 	bl	80052b8 <delay_ms>

		toggleLED(0, 0, 1);
 8003f10:	2100      	movs	r1, #0
 8003f12:	2201      	movs	r2, #1
 8003f14:	4608      	mov	r0, r1
 8003f16:	f7ff ffc9 	bl	8003eac <toggleLED>
		delay_ms(100);
 8003f1a:	2064      	movs	r0, #100	; 0x64
 8003f1c:	f001 f9cc 	bl	80052b8 <delay_ms>
	for (int i=0; i<3; i++)
 8003f20:	3c01      	subs	r4, #1
 8003f22:	d1e5      	bne.n	8003ef0 <LED_StartupSequence+0x4>
	}

	toggleLED(1, 1, 1);
}
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	toggleLED(1, 1, 1);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7ff bfbd 	b.w	8003eac <toggleLED>
	...

08003f34 <Motor1_SetPWM>:
 Example Call	:	Motor1_SetPWM()
 ***********************************/
void Motor1_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR1_SCALE);
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwm); // Motor 1
 8003f34:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <Motor1_SetPWM+0x8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6418      	str	r0, [r3, #64]	; 0x40
 8003f3a:	4770      	bx	lr
 8003f3c:	20001544 	.word	0x20001544

08003f40 <Motor2_SetPWM>:
 Example Call	:	Motor2_SetPWM()
 ***********************************/
void Motor2_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR2_SCALE);
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm); // Motor 2
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <Motor2_SetPWM+0x8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003f46:	4770      	bx	lr
 8003f48:	20001544 	.word	0x20001544

08003f4c <Motor3_SetPWM>:
 Example Call	:	Motor3_SetPWM()
 ***********************************/
void Motor3_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR3_SCALE);
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm); // Motor 3
 8003f4c:	4b01      	ldr	r3, [pc, #4]	; (8003f54 <Motor3_SetPWM+0x8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6398      	str	r0, [r3, #56]	; 0x38
 8003f52:	4770      	bx	lr
 8003f54:	20001674 	.word	0x20001674

08003f58 <Motor4_SetPWM>:
 Example Call	:	Motor4_SetPWM()
 ***********************************/
void Motor4_SetPWM(int pwm)
{
	pwm = (int)(pwm * MOTOR4_SCALE);
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm); // Motor 4
 8003f58:	4b01      	ldr	r3, [pc, #4]	; (8003f60 <Motor4_SetPWM+0x8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003f5e:	4770      	bx	lr
 8003f60:	200015bc 	.word	0x200015bc

08003f64 <PWM_Init>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	PWM_Init()
 ***********************************/
void PWM_Init(void)
{
 8003f64:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003f66:	2104      	movs	r1, #4
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003f68:	4c08      	ldr	r4, [pc, #32]	; (8003f8c <PWM_Init+0x28>)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003f6a:	4809      	ldr	r0, [pc, #36]	; (8003f90 <PWM_Init+0x2c>)
 8003f6c:	f7fe faa6 	bl	80024bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003f70:	2108      	movs	r1, #8
 8003f72:	4808      	ldr	r0, [pc, #32]	; (8003f94 <PWM_Init+0x30>)
 8003f74:	f7fe faa2 	bl	80024bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003f78:	2108      	movs	r1, #8
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7fe fa9e 	bl	80024bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003f80:	4620      	mov	r0, r4

#ifdef HEXCOPTER
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
#endif
}
 8003f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003f86:	210c      	movs	r1, #12
 8003f88:	f7fe ba98 	b.w	80024bc <HAL_TIM_PWM_Start>
 8003f8c:	20001544 	.word	0x20001544
 8003f90:	20001674 	.word	0x20001674
 8003f94:	200015bc 	.word	0x200015bc

08003f98 <Devices_Init>:
 Arguments		:	PWM Value (0-1000)
 Return Value	:	None
 Example Call	:	Devices_Init()
 ***********************************/
void Devices_Init(void)
{
 8003f98:	b508      	push	{r3, lr}
	Peripherals_Init();
 8003f9a:	f000 fcdb 	bl	8004954 <Peripherals_Init>
	PWM_Init();
 8003f9e:	f7ff ffe1 	bl	8003f64 <PWM_Init>
	LED_StartupSequence();
}
 8003fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LED_StartupSequence();
 8003fa6:	f7ff bfa1 	b.w	8003eec <LED_StartupSequence>
	...

08003fac <I2C_WriteByte>:
 Arguments		:	I2C Device Address, Register Address, Register Value
 Return Value	:	None
 Example Call	:	IMU_WriteByte()
 ***********************************/
void I2C_WriteByte(uint16_t device_add, uint16_t register_add, uint8_t register_val, uint8_t delay_mode)
{
 8003fac:	b530      	push	{r4, r5, lr}
 8003fae:	461d      	mov	r5, r3
	uint8_t byte[] = {register_val}, ret;
	ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 8003fb0:	23c8      	movs	r3, #200	; 0xc8
{
 8003fb2:	b087      	sub	sp, #28
	uint8_t byte[] = {register_val}, ret;
 8003fb4:	ac06      	add	r4, sp, #24
 8003fb6:	f804 2d04 	strb.w	r2, [r4, #-4]!
	ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	9400      	str	r4, [sp, #0]
 8003fc6:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <I2C_WriteByte+0x38>)
 8003fc8:	f7fd fc34 	bl	8001834 <HAL_I2C_Mem_Write>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) byte, 1, 200);
	if (ret != HAL_OK) _Error_Handler(__FILE__, __LINE__);
 8003fcc:	b118      	cbz	r0, 8003fd6 <I2C_WriteByte+0x2a>
 8003fce:	211b      	movs	r1, #27
 8003fd0:	4805      	ldr	r0, [pc, #20]	; (8003fe8 <I2C_WriteByte+0x3c>)
 8003fd2:	f000 fc41 	bl	8004858 <_Error_Handler>

	// Delay for device setup
	if (delay_mode) delay_ms(50);
 8003fd6:	b115      	cbz	r5, 8003fde <I2C_WriteByte+0x32>
 8003fd8:	2032      	movs	r0, #50	; 0x32
 8003fda:	f001 f96d 	bl	80052b8 <delay_ms>
}
 8003fde:	b007      	add	sp, #28
 8003fe0:	bd30      	pop	{r4, r5, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20001580 	.word	0x20001580
 8003fe8:	08007679 	.word	0x08007679

08003fec <I2C_ReadByte>:
 Arguments		:	I2C Device Address, Register Address
 Return Value	:	Register value
 Example Call	:	IMU_ReadByte()
 ***********************************/
uint8_t I2C_ReadByte(uint16_t device_add, uint16_t register_add, char* file, int line)
{
 8003fec:	b530      	push	{r4, r5, lr}
 8003fee:	461d      	mov	r5, r3
	uint8_t byte[] = {0x00}, ret;
 8003ff0:	2300      	movs	r3, #0
{
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	4614      	mov	r4, r2
	uint8_t byte[] = {0x00}, ret;
 8003ff6:	aa06      	add	r2, sp, #24
 8003ff8:	f802 3d04 	strb.w	r3, [r2, #-4]!
	ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 8003ffc:	23c8      	movs	r3, #200	; 0xc8
 8003ffe:	9302      	str	r3, [sp, #8]
 8004000:	2301      	movs	r3, #1
 8004002:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004006:	460a      	mov	r2, r1
 8004008:	4601      	mov	r1, r0
 800400a:	4806      	ldr	r0, [pc, #24]	; (8004024 <I2C_ReadByte+0x38>)
 800400c:	f7fd fc8a 	bl	8001924 <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, byte, 1, 200);
	if (ret != HAL_OK) _Error_Handler(file, line);
 8004010:	b118      	cbz	r0, 800401a <I2C_ReadByte+0x2e>
 8004012:	4629      	mov	r1, r5
 8004014:	4620      	mov	r0, r4
 8004016:	f000 fc1f 	bl	8004858 <_Error_Handler>
	return byte[0];
}
 800401a:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800401e:	b007      	add	sp, #28
 8004020:	bd30      	pop	{r4, r5, pc}
 8004022:	bf00      	nop
 8004024:	20001580 	.word	0x20001580

08004028 <I2C_ReadBytes>:
 Arguments		:	I2C Device Address, Register Address, Buffer, Size
 Return Value	:	Register value
 Example Call	:	I2C_ReadBytes()
 ***********************************/
void I2C_ReadBytes(uint16_t device_add, uint16_t register_add, uint8_t* bytes, uint16_t size, char* file, int line)
{
 8004028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 800402a:	26c8      	movs	r6, #200	; 0xc8
 800402c:	e88d 004c 	stmia.w	sp, {r2, r3, r6}
 8004030:	460a      	mov	r2, r1
 8004032:	2301      	movs	r3, #1
 8004034:	4601      	mov	r1, r0
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <I2C_ReadBytes+0x2c>)
{
 8004038:	9c08      	ldr	r4, [sp, #32]
 800403a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t) device_add, (uint16_t) register_add,
 800403c:	f7fd fc72 	bl	8001924 <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, bytes, size, 200);
	if (ret != HAL_OK) _Error_Handler(file, line);
 8004040:	b130      	cbz	r0, 8004050 <I2C_ReadBytes+0x28>
 8004042:	4629      	mov	r1, r5
 8004044:	4620      	mov	r0, r4
}
 8004046:	b004      	add	sp, #16
 8004048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (ret != HAL_OK) _Error_Handler(file, line);
 800404c:	f000 bc04 	b.w	8004858 <_Error_Handler>
}
 8004050:	b004      	add	sp, #16
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	20001580 	.word	0x20001580

08004058 <I2C_ReadByteArray>:
 Arguments		:	I2C Device Address, Start Register Address, Buffer, Size
 Return Value	:	None
 Example Call	:	IMU_ReadByteArray()
 ***********************************/
void I2C_ReadByteArray(uint16_t device_add, uint16_t register_add, uint8_t* byte_array, uint16_t size, char* file, int line)
{
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	4680      	mov	r8, r0
 800405e:	460f      	mov	r7, r1
 8004060:	461e      	mov	r6, r3
	int i = 0;
 8004062:	2400      	movs	r4, #0
	while (i<size)
	{
		byte_array[i++] = I2C_ReadByte(device_add, register_add++, __FILE__, __LINE__);
 8004064:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8004088 <I2C_ReadByteArray+0x30>
 8004068:	1e55      	subs	r5, r2, #1
 800406a:	1939      	adds	r1, r7, r4
	while (i<size)
 800406c:	42b4      	cmp	r4, r6
 800406e:	b289      	uxth	r1, r1
 8004070:	db01      	blt.n	8004076 <I2C_ReadByteArray+0x1e>
	}
}
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		byte_array[i++] = I2C_ReadByte(device_add, register_add++, __FILE__, __LINE__);
 8004076:	234c      	movs	r3, #76	; 0x4c
 8004078:	464a      	mov	r2, r9
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff ffb6 	bl	8003fec <I2C_ReadByte>
 8004080:	3401      	adds	r4, #1
 8004082:	f805 0f01 	strb.w	r0, [r5, #1]!
 8004086:	e7f0      	b.n	800406a <I2C_ReadByteArray+0x12>
 8004088:	08007679 	.word	0x08007679

0800408c <MSP_SetPID_Callback>:

Debug_Buffer dbuff;
uint8_t debug_buffer[64];

void MSP_SetPID_Callback()
{
 800408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pid_pitch.con_KP = msp_rxf_pid.pitch.p/10.0;
 8004090:	4c63      	ldr	r4, [pc, #396]	; (8004220 <MSP_SetPID_Callback+0x194>)
 8004092:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004248 <MSP_SetPID_Callback+0x1bc>
 8004096:	78e0      	ldrb	r0, [r4, #3]
 8004098:	f7fc f9b4 	bl	8000404 <__aeabi_i2d>
 800409c:	2200      	movs	r2, #0
 800409e:	4b61      	ldr	r3, [pc, #388]	; (8004224 <MSP_SetPID_Callback+0x198>)
 80040a0:	f7fc fb40 	bl	8000724 <__aeabi_ddiv>
 80040a4:	f7fc fcc4 	bl	8000a30 <__aeabi_d2f>
 80040a8:	f8c8 0004 	str.w	r0, [r8, #4]
	pid_pitch.con_KI = msp_rxf_pid.pitch.i/200.0;
 80040ac:	7920      	ldrb	r0, [r4, #4]
 80040ae:	f7fc f9a9 	bl	8000404 <__aeabi_i2d>
 80040b2:	2200      	movs	r2, #0
 80040b4:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <MSP_SetPID_Callback+0x19c>)
 80040b6:	f7fc fb35 	bl	8000724 <__aeabi_ddiv>
 80040ba:	f7fc fcb9 	bl	8000a30 <__aeabi_d2f>
 80040be:	f8c8 0008 	str.w	r0, [r8, #8]
	pid_pitch.con_KD = msp_rxf_pid.pitch.d*4.0;
 80040c2:	7960      	ldrb	r0, [r4, #5]
 80040c4:	f7fc f99e 	bl	8000404 <__aeabi_i2d>
 80040c8:	2200      	movs	r2, #0
 80040ca:	4b58      	ldr	r3, [pc, #352]	; (800422c <MSP_SetPID_Callback+0x1a0>)
 80040cc:	f7fc fa00 	bl	80004d0 <__aeabi_dmul>
 80040d0:	f7fc fcae 	bl	8000a30 <__aeabi_d2f>
 80040d4:	f8c8 000c 	str.w	r0, [r8, #12]

	pid_roll.con_KP = msp_rxf_pid.roll.p/10.0;
 80040d8:	7820      	ldrb	r0, [r4, #0]
 80040da:	f7fc f993 	bl	8000404 <__aeabi_i2d>
 80040de:	2200      	movs	r2, #0
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <MSP_SetPID_Callback+0x198>)
 80040e2:	f7fc fb1f 	bl	8000724 <__aeabi_ddiv>
 80040e6:	f7fc fca3 	bl	8000a30 <__aeabi_d2f>
 80040ea:	4f51      	ldr	r7, [pc, #324]	; (8004230 <MSP_SetPID_Callback+0x1a4>)
	pid_roll.con_KI = msp_rxf_pid.roll.i/200.0;
	pid_roll.con_KD = msp_rxf_pid.roll.d*4.0;

	pid_yaw.con_KP = msp_rxf_pid.yaw.p/10.0;
 80040ec:	4d51      	ldr	r5, [pc, #324]	; (8004234 <MSP_SetPID_Callback+0x1a8>)
	pid_roll.con_KP = msp_rxf_pid.roll.p/10.0;
 80040ee:	6078      	str	r0, [r7, #4]
	pid_roll.con_KI = msp_rxf_pid.roll.i/200.0;
 80040f0:	7860      	ldrb	r0, [r4, #1]
 80040f2:	f7fc f987 	bl	8000404 <__aeabi_i2d>
 80040f6:	2200      	movs	r2, #0
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <MSP_SetPID_Callback+0x19c>)
 80040fa:	f7fc fb13 	bl	8000724 <__aeabi_ddiv>
 80040fe:	f7fc fc97 	bl	8000a30 <__aeabi_d2f>
 8004102:	60b8      	str	r0, [r7, #8]
	pid_roll.con_KD = msp_rxf_pid.roll.d*4.0;
 8004104:	78a0      	ldrb	r0, [r4, #2]
 8004106:	f7fc f97d 	bl	8000404 <__aeabi_i2d>
 800410a:	2200      	movs	r2, #0
 800410c:	4b47      	ldr	r3, [pc, #284]	; (800422c <MSP_SetPID_Callback+0x1a0>)
 800410e:	f7fc f9df 	bl	80004d0 <__aeabi_dmul>
 8004112:	f7fc fc8d 	bl	8000a30 <__aeabi_d2f>
 8004116:	60f8      	str	r0, [r7, #12]
	pid_yaw.con_KP = msp_rxf_pid.yaw.p/10.0;
 8004118:	79a0      	ldrb	r0, [r4, #6]
 800411a:	f7fc f973 	bl	8000404 <__aeabi_i2d>
 800411e:	2200      	movs	r2, #0
 8004120:	4b40      	ldr	r3, [pc, #256]	; (8004224 <MSP_SetPID_Callback+0x198>)
 8004122:	f7fc faff 	bl	8000724 <__aeabi_ddiv>
 8004126:	f7fc fc83 	bl	8000a30 <__aeabi_d2f>
 800412a:	6068      	str	r0, [r5, #4]
	pid_yaw.con_KI = msp_rxf_pid.yaw.i/200.0;
 800412c:	79e0      	ldrb	r0, [r4, #7]
 800412e:	f7fc f969 	bl	8000404 <__aeabi_i2d>
 8004132:	2200      	movs	r2, #0
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <MSP_SetPID_Callback+0x19c>)
 8004136:	f7fc faf5 	bl	8000724 <__aeabi_ddiv>
 800413a:	f7fc fc79 	bl	8000a30 <__aeabi_d2f>
 800413e:	60a8      	str	r0, [r5, #8]
	pid_yaw.con_KD = msp_rxf_pid.yaw.d*4.0;
 8004140:	7a20      	ldrb	r0, [r4, #8]
 8004142:	f7fc f95f 	bl	8000404 <__aeabi_i2d>
 8004146:	2200      	movs	r2, #0
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <MSP_SetPID_Callback+0x1a0>)
 800414a:	f7fc f9c1 	bl	80004d0 <__aeabi_dmul>
 800414e:	f7fc fc6f 	bl	8000a30 <__aeabi_d2f>
	pid_yaw.set_point = 180;
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <MSP_SetPID_Callback+0x1ac>)
	pid_yaw.con_KD = msp_rxf_pid.yaw.d*4.0;
 8004154:	60e8      	str	r0, [r5, #12]

	pid_altitude.con_KP = msp_rxf_pid.alt.p/10.0;
 8004156:	7a60      	ldrb	r0, [r4, #9]
	pid_yaw.set_point = 180;
 8004158:	61eb      	str	r3, [r5, #28]
	pid_altitude.con_KP = msp_rxf_pid.alt.p/10.0;
 800415a:	f7fc f953 	bl	8000404 <__aeabi_i2d>
 800415e:	2200      	movs	r2, #0
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <MSP_SetPID_Callback+0x198>)
 8004162:	f7fc fadf 	bl	8000724 <__aeabi_ddiv>
 8004166:	f7fc fc63 	bl	8000a30 <__aeabi_d2f>
 800416a:	4e34      	ldr	r6, [pc, #208]	; (800423c <MSP_SetPID_Callback+0x1b0>)
 800416c:	6070      	str	r0, [r6, #4]
	pid_altitude.con_KI = msp_rxf_pid.alt.i/200.0;
 800416e:	7aa0      	ldrb	r0, [r4, #10]
 8004170:	f7fc f948 	bl	8000404 <__aeabi_i2d>
 8004174:	2200      	movs	r2, #0
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <MSP_SetPID_Callback+0x19c>)
 8004178:	f7fc fad4 	bl	8000724 <__aeabi_ddiv>
 800417c:	f7fc fc58 	bl	8000a30 <__aeabi_d2f>
 8004180:	60b0      	str	r0, [r6, #8]
	pid_altitude.con_KD = msp_rxf_pid.alt.d*4.0;
 8004182:	7ae0      	ldrb	r0, [r4, #11]
 8004184:	f7fc f93e 	bl	8000404 <__aeabi_i2d>
 8004188:	2200      	movs	r2, #0
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <MSP_SetPID_Callback+0x1a0>)
 800418c:	f7fc f9a0 	bl	80004d0 <__aeabi_dmul>
 8004190:	f7fc fc4e 	bl	8000a30 <__aeabi_d2f>
 8004194:	60f0      	str	r0, [r6, #12]

	/** Send ACK */
	dbuff.pitch.set_point = pid_pitch.set_point + pid_pitch.offset;
 8004196:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800419a:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 800419e:	f7fc fc9d 	bl	8000adc <__addsf3>
 80041a2:	4c27      	ldr	r4, [pc, #156]	; (8004240 <MSP_SetPID_Callback+0x1b4>)
	dbuff.pitch.kp = pid_pitch.con_KP;
 80041a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	dbuff.pitch.set_point = pid_pitch.set_point + pid_pitch.offset;
 80041a8:	6020      	str	r0, [r4, #0]
	dbuff.pitch.kp = pid_pitch.con_KP;
 80041aa:	6063      	str	r3, [r4, #4]
	dbuff.pitch.ki = pid_pitch.con_KI;
 80041ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80041b0:	60a3      	str	r3, [r4, #8]
	dbuff.pitch.kd = pid_pitch.con_KD;
 80041b2:	f8d8 300c 	ldr.w	r3, [r8, #12]

	dbuff.roll.set_point = pid_roll.set_point + pid_roll.offset;
 80041b6:	69f8      	ldr	r0, [r7, #28]
	dbuff.pitch.kd = pid_pitch.con_KD;
 80041b8:	60e3      	str	r3, [r4, #12]
	dbuff.roll.set_point = pid_roll.set_point + pid_roll.offset;
 80041ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041bc:	f7fc fc8e 	bl	8000adc <__addsf3>
	dbuff.roll.kp = pid_roll.con_KP;
 80041c0:	687b      	ldr	r3, [r7, #4]
	dbuff.roll.set_point = pid_roll.set_point + pid_roll.offset;
 80041c2:	6120      	str	r0, [r4, #16]
	dbuff.roll.kp = pid_roll.con_KP;
 80041c4:	6163      	str	r3, [r4, #20]
	dbuff.roll.ki = pid_roll.con_KI;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	61a3      	str	r3, [r4, #24]
	dbuff.roll.kd = pid_roll.con_KD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	61e3      	str	r3, [r4, #28]

	dbuff.yaw.set_point = pid_yaw.set_point + pid_yaw.offset;
 80041ce:	69e8      	ldr	r0, [r5, #28]
 80041d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80041d2:	f7fc fc83 	bl	8000adc <__addsf3>
	dbuff.yaw.kp = pid_yaw.con_KP;
 80041d6:	686b      	ldr	r3, [r5, #4]
	dbuff.yaw.set_point = pid_yaw.set_point + pid_yaw.offset;
 80041d8:	6220      	str	r0, [r4, #32]
	dbuff.yaw.kp = pid_yaw.con_KP;
 80041da:	6263      	str	r3, [r4, #36]	; 0x24
	dbuff.yaw.ki = pid_yaw.con_KI;
 80041dc:	68ab      	ldr	r3, [r5, #8]
 80041de:	62a3      	str	r3, [r4, #40]	; 0x28
	dbuff.yaw.kd = pid_yaw.con_KD;
 80041e0:	68eb      	ldr	r3, [r5, #12]

	dbuff.altitude.set_point = pid_altitude.set_point + pid_altitude.offset;
 80041e2:	69f0      	ldr	r0, [r6, #28]
	dbuff.yaw.kd = pid_yaw.con_KD;
 80041e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	dbuff.altitude.set_point = pid_altitude.set_point + pid_altitude.offset;
 80041e6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80041e8:	f7fc fc78 	bl	8000adc <__addsf3>
	dbuff.altitude.kp = pid_altitude.con_KP;
 80041ec:	6873      	ldr	r3, [r6, #4]
	dbuff.altitude.set_point = pid_altitude.set_point + pid_altitude.offset;
 80041ee:	6320      	str	r0, [r4, #48]	; 0x30
	dbuff.altitude.kp = pid_altitude.con_KP;
 80041f0:	6363      	str	r3, [r4, #52]	; 0x34
	dbuff.altitude.ki = pid_altitude.con_KI;
 80041f2:	68b3      	ldr	r3, [r6, #8]
	dbuff.altitude.kd = pid_altitude.con_KD;

	memcpy(debug_buffer, &dbuff, 64);
 80041f4:	f104 0240 	add.w	r2, r4, #64	; 0x40
	dbuff.altitude.ki = pid_altitude.con_KI;
 80041f8:	63a3      	str	r3, [r4, #56]	; 0x38
	dbuff.altitude.kd = pid_altitude.con_KD;
 80041fa:	68f3      	ldr	r3, [r6, #12]
 80041fc:	63e3      	str	r3, [r4, #60]	; 0x3c
	memcpy(debug_buffer, &dbuff, 64);
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <MSP_SetPID_Callback+0x1b8>)
 8004200:	461d      	mov	r5, r3
 8004202:	f854 1b04 	ldr.w	r1, [r4], #4
 8004206:	4294      	cmp	r4, r2
 8004208:	f843 1b04 	str.w	r1, [r3], #4
 800420c:	d1f9      	bne.n	8004202 <MSP_SetPID_Callback+0x176>
	for (int i=0; i<64; i++)
 800420e:	2400      	movs	r4, #0
		serialWrite(debug_buffer[i]);
 8004210:	5d28      	ldrb	r0, [r5, r4]
	for (int i=0; i<64; i++)
 8004212:	3401      	adds	r4, #1
		serialWrite(debug_buffer[i]);
 8004214:	f000 fe9c 	bl	8004f50 <serialWrite>
	for (int i=0; i<64; i++)
 8004218:	2c40      	cmp	r4, #64	; 0x40
 800421a:	d1f9      	bne.n	8004210 <MSP_SetPID_Callback+0x184>
}
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	200013f3 	.word	0x200013f3
 8004224:	40240000 	.word	0x40240000
 8004228:	40690000 	.word	0x40690000
 800422c:	40100000 	.word	0x40100000
 8004230:	20000104 	.word	0x20000104
 8004234:	20000160 	.word	0x20000160
 8004238:	43340000 	.word	0x43340000
 800423c:	2000004c 	.word	0x2000004c
 8004240:	2000136c 	.word	0x2000136c
 8004244:	200013ac 	.word	0x200013ac
 8004248:	200000a8 	.word	0x200000a8

0800424c <MSP_SetRawRC_Callback>:

void MSP_SetRawRC_Callback()
{
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// AUX1 - Channel 5 - ARM Drone
	if (msp_rxf_raw_rc.aux1 > 1600) joystick.MOTOR_ARM = 1;
 8004250:	4c33      	ldr	r4, [pc, #204]	; (8004320 <MSP_SetRawRC_Callback+0xd4>)
 8004252:	4d34      	ldr	r5, [pc, #208]	; (8004324 <MSP_SetRawRC_Callback+0xd8>)
 8004254:	8923      	ldrh	r3, [r4, #8]
 8004256:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800425a:	bf8c      	ite	hi
 800425c:	2301      	movhi	r3, #1
	else joystick.MOTOR_ARM = 0;
 800425e:	2300      	movls	r3, #0
 8004260:	702b      	strb	r3, [r5, #0]

	// AUX2 - Channel 6 - Altitude Hold
	if (msp_rxf_raw_rc.aux2 > 1600) joystick.ALT_HOLD = 1;
 8004262:	8963      	ldrh	r3, [r4, #10]
 8004264:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004268:	bf8c      	ite	hi
 800426a:	2301      	movhi	r3, #1
	else joystick.ALT_HOLD = 0;
 800426c:	2300      	movls	r3, #0
 800426e:	706b      	strb	r3, [r5, #1]

	// P-R-Y-T - Channel 1-4 - Set Points
	pid_pitch.set_point = constrain((float) msp_rxf_raw_rc.pitch - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 8004270:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8004274:	f7fc fce6 	bl	8000c44 <__aeabi_i2f>
 8004278:	492b      	ldr	r1, [pc, #172]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 800427a:	f7fc fc2d 	bl	8000ad8 <__aeabi_fsub>
 800427e:	492b      	ldr	r1, [pc, #172]	; (800432c <MSP_SetRawRC_Callback+0xe0>)
 8004280:	4606      	mov	r6, r0
 8004282:	f7fc fed1 	bl	8001028 <__aeabi_fcmplt>
 8004286:	2800      	cmp	r0, #0
 8004288:	d142      	bne.n	8004310 <MSP_SetRawRC_Callback+0xc4>
 800428a:	4927      	ldr	r1, [pc, #156]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 800428c:	4630      	mov	r0, r6
 800428e:	f7fc fee9 	bl	8001064 <__aeabi_fcmpgt>
 8004292:	2800      	cmp	r0, #0
 8004294:	d13e      	bne.n	8004314 <MSP_SetRawRC_Callback+0xc8>
 8004296:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800433c <MSP_SetRawRC_Callback+0xf0>
	pid_roll.set_point = constrain((float) msp_rxf_raw_rc.roll - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 800429a:	f9b4 0000 	ldrsh.w	r0, [r4]
	pid_pitch.set_point = constrain((float) msp_rxf_raw_rc.pitch - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 800429e:	f8c8 601c 	str.w	r6, [r8, #28]
	pid_roll.set_point = constrain((float) msp_rxf_raw_rc.roll - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 80042a2:	f7fc fccf 	bl	8000c44 <__aeabi_i2f>
 80042a6:	4920      	ldr	r1, [pc, #128]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 80042a8:	f7fc fc16 	bl	8000ad8 <__aeabi_fsub>
 80042ac:	491f      	ldr	r1, [pc, #124]	; (800432c <MSP_SetRawRC_Callback+0xe0>)
 80042ae:	4607      	mov	r7, r0
 80042b0:	f7fc feba 	bl	8001028 <__aeabi_fcmplt>
 80042b4:	bb80      	cbnz	r0, 8004318 <MSP_SetRawRC_Callback+0xcc>
 80042b6:	491c      	ldr	r1, [pc, #112]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7fc fed3 	bl	8001064 <__aeabi_fcmpgt>
 80042be:	bb68      	cbnz	r0, 800431c <MSP_SetRawRC_Callback+0xd0>
 80042c0:	4e1b      	ldr	r6, [pc, #108]	; (8004330 <MSP_SetRawRC_Callback+0xe4>)
 80042c2:	61f7      	str	r7, [r6, #28]
	pid_yaw.set_point = (float) msp_rxf_raw_rc.yaw - 180.0f;
 80042c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80042c8:	f7fc fcbc 	bl	8000c44 <__aeabi_i2f>
 80042cc:	4919      	ldr	r1, [pc, #100]	; (8004334 <MSP_SetRawRC_Callback+0xe8>)
 80042ce:	f7fc fc03 	bl	8000ad8 <__aeabi_fsub>
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <MSP_SetRawRC_Callback+0xec>)
 80042d4:	61d8      	str	r0, [r3, #28]
	if (!joystick.ALT_HOLD) joystick.throttle = (float) msp_rxf_raw_rc.throttle;
 80042d6:	786b      	ldrb	r3, [r5, #1]
 80042d8:	b91b      	cbnz	r3, 80042e2 <MSP_SetRawRC_Callback+0x96>
 80042da:	88e0      	ldrh	r0, [r4, #6]
 80042dc:	f7fc fcae 	bl	8000c3c <__aeabi_ui2f>
 80042e0:	6068      	str	r0, [r5, #4]

	// AUX 3-4 - Channel 7-8 - Pitch/Roll Trim
	pid_pitch.offset = ((float) msp_rxf_raw_rc.aux3 / 10.0f) - 10.0f;
 80042e2:	89a0      	ldrh	r0, [r4, #12]
 80042e4:	f7fc fcaa 	bl	8000c3c <__aeabi_ui2f>
 80042e8:	490f      	ldr	r1, [pc, #60]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 80042ea:	f7fc fdb3 	bl	8000e54 <__aeabi_fdiv>
 80042ee:	490e      	ldr	r1, [pc, #56]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 80042f0:	f7fc fbf2 	bl	8000ad8 <__aeabi_fsub>
 80042f4:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
	pid_roll.offset  = ((float) msp_rxf_raw_rc.aux4 / 10.0f) - 10.0f;
 80042f8:	89e0      	ldrh	r0, [r4, #14]
 80042fa:	f7fc fc9f 	bl	8000c3c <__aeabi_ui2f>
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 8004300:	f7fc fda8 	bl	8000e54 <__aeabi_fdiv>
 8004304:	4908      	ldr	r1, [pc, #32]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 8004306:	f7fc fbe7 	bl	8000ad8 <__aeabi_fsub>
 800430a:	6270      	str	r0, [r6, #36]	; 0x24
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pid_pitch.set_point = constrain((float) msp_rxf_raw_rc.pitch - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 8004310:	4e06      	ldr	r6, [pc, #24]	; (800432c <MSP_SetRawRC_Callback+0xe0>)
 8004312:	e7c0      	b.n	8004296 <MSP_SetRawRC_Callback+0x4a>
 8004314:	4e04      	ldr	r6, [pc, #16]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 8004316:	e7be      	b.n	8004296 <MSP_SetRawRC_Callback+0x4a>
	pid_roll.set_point = constrain((float) msp_rxf_raw_rc.roll - THROTTLE_LIMIT, -THROTTLE_LIMIT, THROTTLE_LIMIT);
 8004318:	4f04      	ldr	r7, [pc, #16]	; (800432c <MSP_SetRawRC_Callback+0xe0>)
 800431a:	e7d1      	b.n	80042c0 <MSP_SetRawRC_Callback+0x74>
 800431c:	4f02      	ldr	r7, [pc, #8]	; (8004328 <MSP_SetRawRC_Callback+0xdc>)
 800431e:	e7cf      	b.n	80042c0 <MSP_SetRawRC_Callback+0x74>
 8004320:	20001449 	.word	0x20001449
 8004324:	20000280 	.word	0x20000280
 8004328:	41200000 	.word	0x41200000
 800432c:	c1200000 	.word	0xc1200000
 8004330:	20000104 	.word	0x20000104
 8004334:	43340000 	.word	0x43340000
 8004338:	20000160 	.word	0x20000160
 800433c:	200000a8 	.word	0x200000a8

08004340 <taskScheduler>:
volatile uint32_t last_tick1 = 0, last_tick2 = 0, last_tick3 = 0;
extern struct txFrame txf;
extern CircularBuffer rxc, txc;

void taskScheduler()
{
 8004340:	b510      	push	{r4, lr}
	if ((millis() - last_tick1) > 1)
 8004342:	f000 ffb5 	bl	80052b0 <millis>
 8004346:	4c13      	ldr	r4, [pc, #76]	; (8004394 <taskScheduler+0x54>)
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	1ac0      	subs	r0, r0, r3
 800434c:	2801      	cmp	r0, #1
 800434e:	d904      	bls.n	800435a <taskScheduler+0x1a>
	{
		/** Save Time */
		last_tick1 = millis();
 8004350:	f000 ffae 	bl	80052b0 <millis>
 8004354:	6020      	str	r0, [r4, #0]

		/** Tasks */
		/* Sensor Update */
		//AK8963_ReadData();
		AHRS_ComputeAngles();
 8004356:	f7fe fd8f 	bl	8002e78 <AHRS_ComputeAngles>
	}

	if ((millis() - last_tick3) >= 3)
 800435a:	f000 ffa9 	bl	80052b0 <millis>
 800435e:	4c0e      	ldr	r4, [pc, #56]	; (8004398 <taskScheduler+0x58>)
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	1ac0      	subs	r0, r0, r3
 8004364:	2802      	cmp	r0, #2
 8004366:	d904      	bls.n	8004372 <taskScheduler+0x32>
	{
		/** Save Time */
		last_tick3 = millis();
 8004368:	f000 ffa2 	bl	80052b0 <millis>
 800436c:	6020      	str	r0, [r4, #0]

		/* Control */
		PID_Update();
 800436e:	f000 fd73 	bl	8004e58 <PID_Update>
	}

	if ((millis() - last_tick2) > 100)
 8004372:	f000 ff9d 	bl	80052b0 <millis>
 8004376:	4c09      	ldr	r4, [pc, #36]	; (800439c <taskScheduler+0x5c>)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	1ac0      	subs	r0, r0, r3
 800437c:	2864      	cmp	r0, #100	; 0x64
 800437e:	d902      	bls.n	8004386 <taskScheduler+0x46>
	{
		/** Save Time */
		last_tick2 = millis();
 8004380:	f000 ff96 	bl	80052b0 <millis>
 8004384:	6020      	str	r0, [r4, #0]
		txf.z = AHRS_GetYaw();
		sendFrame();*/
	}

	/** Non-blocking tasks */
	MS5611_Update();
 8004386:	f7fe fe1f 	bl	8002fc8 <MS5611_Update>
	MSP_Update();
}
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	MSP_Update();
 800438e:	f000 b9e9 	b.w	8004764 <MSP_Update>
 8004392:	bf00      	nop
 8004394:	20000288 	.word	0x20000288
 8004398:	20000290 	.word	0x20000290
 800439c:	2000028c 	.word	0x2000028c

080043a0 <setup>:

void setup(void)
{
 80043a0:	b508      	push	{r3, lr}
	Devices_Init();
 80043a2:	f7ff fdf9 	bl	8003f98 <Devices_Init>
	serialBegin();
 80043a6:	f000 fe0d 	bl	8004fc4 <serialBegin>
	IMU_Init();
 80043aa:	f7fe fd21 	bl	8002df0 <IMU_Init>
	MS5611_Init();
 80043ae:	f7fe ff1b 	bl	80031e8 <MS5611_Init>
	PID_Init();
}
 80043b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PID_Init();
 80043b6:	f000 bcc3 	b.w	8004d40 <PID_Init>

080043ba <main>:

int main(void)
{
 80043ba:	b508      	push	{r3, lr}
	setup();
 80043bc:	f7ff fff0 	bl	80043a0 <setup>
	while (1)
	{
		taskScheduler();
 80043c0:	f7ff ffbe 	bl	8004340 <taskScheduler>
 80043c4:	e7fc      	b.n	80043c0 <main+0x6>
	...

080043c8 <Motor_UpdateMSP>:

int motor_pwm [4] = {0, 0, 0, 0};

void Motor_UpdateMSP()
{
	msp_txf_motor.motor[0] = motor_pwm[0] + 1000;
 80043c8:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <Motor_UpdateMSP+0x28>)
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <Motor_UpdateMSP+0x2c>)
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80043d2:	8019      	strh	r1, [r3, #0]
	msp_txf_motor.motor[1] = motor_pwm[1] + 1000;
 80043d4:	6851      	ldr	r1, [r2, #4]
 80043d6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80043da:	8059      	strh	r1, [r3, #2]
	msp_txf_motor.motor[2] = motor_pwm[2] + 1000;
 80043dc:	6891      	ldr	r1, [r2, #8]
	msp_txf_motor.motor[3] = motor_pwm[3] + 1000;
 80043de:	68d2      	ldr	r2, [r2, #12]
	msp_txf_motor.motor[2] = motor_pwm[2] + 1000;
 80043e0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
	msp_txf_motor.motor[3] = motor_pwm[3] + 1000;
 80043e4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
	msp_txf_motor.motor[2] = motor_pwm[2] + 1000;
 80043e8:	8099      	strh	r1, [r3, #4]
	msp_txf_motor.motor[3] = motor_pwm[3] + 1000;
 80043ea:	80da      	strh	r2, [r3, #6]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000294 	.word	0x20000294
 80043f4:	20001459 	.word	0x20001459

080043f8 <Motor_UpdatePWM>:
	serialWrite('\n');
#endif
}

void Motor_UpdatePWM()
{
 80043f8:	b510      	push	{r4, lr}
	Motor1_SetPWM(motor_pwm[0]); // Back Right
 80043fa:	4c08      	ldr	r4, [pc, #32]	; (800441c <Motor_UpdatePWM+0x24>)
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	f7ff fd99 	bl	8003f34 <Motor1_SetPWM>
	Motor2_SetPWM(motor_pwm[1]); // Front Right
 8004402:	6860      	ldr	r0, [r4, #4]
 8004404:	f7ff fd9c 	bl	8003f40 <Motor2_SetPWM>
	Motor3_SetPWM(motor_pwm[2]); // Back Left
 8004408:	68a0      	ldr	r0, [r4, #8]
 800440a:	f7ff fd9f 	bl	8003f4c <Motor3_SetPWM>
	Motor4_SetPWM(motor_pwm[3]); // Front Left
 800440e:	68e0      	ldr	r0, [r4, #12]
 8004410:	f7ff fda2 	bl	8003f58 <Motor4_SetPWM>

	Motor_UpdateMSP();
}
 8004414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Motor_UpdateMSP();
 8004418:	f7ff bfd6 	b.w	80043c8 <Motor_UpdateMSP>
 800441c:	20000294 	.word	0x20000294

08004420 <Motor_StopAll>:

void Motor_StopAll()
{
 8004420:	b508      	push	{r3, lr}
	Motor1_SetPWM(0); // Back Right
 8004422:	2000      	movs	r0, #0
 8004424:	f7ff fd86 	bl	8003f34 <Motor1_SetPWM>
	Motor2_SetPWM(0); // Front Right
 8004428:	2000      	movs	r0, #0
 800442a:	f7ff fd89 	bl	8003f40 <Motor2_SetPWM>
	Motor3_SetPWM(0); // Back Left
 800442e:	2000      	movs	r0, #0
 8004430:	f7ff fd8c 	bl	8003f4c <Motor3_SetPWM>
	Motor4_SetPWM(0); // Front Left
}
 8004434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Motor4_SetPWM(0); // Front Left
 8004438:	2000      	movs	r0, #0
 800443a:	f7ff bd8d 	b.w	8003f58 <Motor4_SetPWM>
	...

08004440 <Motor_SetSpeed>:
	Motor_UpdatePWM();
}

void Motor_SetSpeed(int m1, int m2, int m3, int m4)
{
	motor_pwm[0] = constrain(m1, 0, 1000);
 8004440:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004444:	bfa8      	it	ge
 8004446:	f44f 707a 	movge.w	r0, #1000	; 0x3e8
	motor_pwm[1] = constrain(m2, 0, 1000);
 800444a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800444e:	bfa8      	it	ge
 8004450:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
	motor_pwm[2] = constrain(m3, 0, 1000);
 8004454:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004458:	bfa8      	it	ge
 800445a:	f44f 727a 	movge.w	r2, #1000	; 0x3e8
	motor_pwm[3] = constrain(m4, 0, 1000);
 800445e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004462:	bfa8      	it	ge
 8004464:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
{
 8004468:	b410      	push	{r4}
	motor_pwm[0] = constrain(m1, 0, 1000);
 800446a:	4c08      	ldr	r4, [pc, #32]	; (800448c <Motor_SetSpeed+0x4c>)
 800446c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	motor_pwm[1] = constrain(m2, 0, 1000);
 8004470:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	motor_pwm[2] = constrain(m3, 0, 1000);
 8004474:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	motor_pwm[3] = constrain(m4, 0, 1000);
 8004478:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	motor_pwm[0] = constrain(m1, 0, 1000);
 800447c:	6020      	str	r0, [r4, #0]
	motor_pwm[1] = constrain(m2, 0, 1000);
 800447e:	6061      	str	r1, [r4, #4]
	motor_pwm[2] = constrain(m3, 0, 1000);
 8004480:	60a2      	str	r2, [r4, #8]
	motor_pwm[3] = constrain(m4, 0, 1000);
 8004482:	60e3      	str	r3, [r4, #12]

	Motor_UpdatePWM();
}
 8004484:	bc10      	pop	{r4}
	Motor_UpdatePWM();
 8004486:	f7ff bfb7 	b.w	80043f8 <Motor_UpdatePWM>
 800448a:	bf00      	nop
 800448c:	20000294 	.word	0x20000294

08004490 <Motor_DistributeSpeed>:

void Motor_DistributeSpeed(float throttle, float pitch, float roll, float yaw)
{
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	4615      	mov	r5, r2
 8004496:	461c      	mov	r4, r3
 8004498:	4606      	mov	r6, r0
 800449a:	4688      	mov	r8, r1
	float M1, M2, M3, M4;

	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 800449c:	f7fc fb1c 	bl	8000ad8 <__aeabi_fsub>
	M2 = throttle - pitch + roll - yaw - 1000; // Front Right
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80044a0:	4641      	mov	r1, r8
	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 80044a2:	4607      	mov	r7, r0
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80044a4:	4630      	mov	r0, r6
 80044a6:	f7fc fb19 	bl	8000adc <__addsf3>
	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 80044aa:	4629      	mov	r1, r5
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80044ac:	4606      	mov	r6, r0
	M4 = throttle - pitch - roll + yaw - 1000; // Front Left
 80044ae:	4638      	mov	r0, r7
 80044b0:	f7fc fb12 	bl	8000ad8 <__aeabi_fsub>
 80044b4:	4621      	mov	r1, r4
 80044b6:	f7fc fb11 	bl	8000adc <__addsf3>
 80044ba:	4919      	ldr	r1, [pc, #100]	; (8004520 <Motor_DistributeSpeed+0x90>)
 80044bc:	f7fc fb0c 	bl	8000ad8 <__aeabi_fsub>
	M1 = throttle + pitch + roll + yaw - 1000; // Back Right

	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80044c0:	f7fc fdda 	bl	8001078 <__aeabi_f2iz>
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80044c4:	4629      	mov	r1, r5
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80044c6:	4681      	mov	r9, r0
	M3 = throttle + pitch - roll - yaw - 1000; // Back Left
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7fc fb05 	bl	8000ad8 <__aeabi_fsub>
 80044ce:	4621      	mov	r1, r4
 80044d0:	f7fc fb02 	bl	8000ad8 <__aeabi_fsub>
 80044d4:	4912      	ldr	r1, [pc, #72]	; (8004520 <Motor_DistributeSpeed+0x90>)
 80044d6:	f7fc faff 	bl	8000ad8 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80044da:	f7fc fdcd 	bl	8001078 <__aeabi_f2iz>
	M2 = throttle - pitch + roll - yaw - 1000; // Front Right
 80044de:	4629      	mov	r1, r5
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80044e0:	4680      	mov	r8, r0
	M2 = throttle - pitch + roll - yaw - 1000; // Front Right
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7fc fafa 	bl	8000adc <__addsf3>
 80044e8:	4621      	mov	r1, r4
 80044ea:	f7fc faf5 	bl	8000ad8 <__aeabi_fsub>
 80044ee:	490c      	ldr	r1, [pc, #48]	; (8004520 <Motor_DistributeSpeed+0x90>)
 80044f0:	f7fc faf2 	bl	8000ad8 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 80044f4:	f7fc fdc0 	bl	8001078 <__aeabi_f2iz>
 80044f8:	4607      	mov	r7, r0
	M1 = throttle + pitch + roll + yaw - 1000; // Back Right
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	f7fc faed 	bl	8000adc <__addsf3>
 8004502:	4621      	mov	r1, r4
 8004504:	f7fc faea 	bl	8000adc <__addsf3>
 8004508:	4905      	ldr	r1, [pc, #20]	; (8004520 <Motor_DistributeSpeed+0x90>)
 800450a:	f7fc fae5 	bl	8000ad8 <__aeabi_fsub>
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 800450e:	f7fc fdb3 	bl	8001078 <__aeabi_f2iz>
 8004512:	464b      	mov	r3, r9
 8004514:	4642      	mov	r2, r8
 8004516:	4639      	mov	r1, r7
}
 8004518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Motor_SetSpeed((int) M1, (int) M2, (int) M3, (int) M4);
 800451c:	f7ff bf90 	b.w	8004440 <Motor_SetSpeed>
 8004520:	447a0000 	.word	0x447a0000

08004524 <MSP_SendFrame>:
msp_set_head msp_rxf_head;
msp_set_motor msp_rxf_motor;
msp_set_led msp_rxf_led;

static void MSP_SendFrame(uint8_t code, uint8_t *data, uint16_t data_length)
{
 8004524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004528:	4616      	mov	r6, r2
 800452a:	4605      	mov	r5, r0
 800452c:	460f      	mov	r7, r1
	uint8_t checksum = 0;

	// Send Header
	serialPrint("$M>");
 800452e:	480e      	ldr	r0, [pc, #56]	; (8004568 <MSP_SendFrame+0x44>)
	serialWrite(data_length);
 8004530:	b2f4      	uxtb	r4, r6
	serialPrint("$M>");
 8004532:	f000 fd55 	bl	8004fe0 <serialPrint>
	serialWrite(data_length);
 8004536:	4620      	mov	r0, r4
 8004538:	f000 fd0a 	bl	8004f50 <serialWrite>
	serialWrite(code);
 800453c:	4628      	mov	r0, r5
	checksum = code ^ data_length;
 800453e:	406c      	eors	r4, r5
	serialWrite(code);
 8004540:	f000 fd06 	bl	8004f50 <serialWrite>

	for (int i=0; i<data_length; i++)
 8004544:	463d      	mov	r5, r7
 8004546:	1beb      	subs	r3, r5, r7
 8004548:	429e      	cmp	r6, r3
 800454a:	dc04      	bgt.n	8004556 <MSP_SendFrame+0x32>
	{
		serialWrite((char) data[i]);
		checksum ^= data[i];
	}
	serialWrite(checksum);
 800454c:	4620      	mov	r0, r4
}
 800454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	serialWrite(checksum);
 8004552:	f000 bcfd 	b.w	8004f50 <serialWrite>
 8004556:	46a8      	mov	r8, r5
		serialWrite((char) data[i]);
 8004558:	f815 0b01 	ldrb.w	r0, [r5], #1
 800455c:	f000 fcf8 	bl	8004f50 <serialWrite>
		checksum ^= data[i];
 8004560:	f898 3000 	ldrb.w	r3, [r8]
 8004564:	405c      	eors	r4, r3
 8004566:	e7ee      	b.n	8004546 <MSP_SendFrame+0x22>
 8004568:	08007686 	.word	0x08007686

0800456c <MSP_SendIdent>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendIdent()
 ***********************************/
void MSP_SendIdent()
{
 800456c:	b507      	push	{r0, r1, r2, lr}
	msp_txf_ident.version = 233;
 800456e:	22e9      	movs	r2, #233	; 0xe9
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <MSP_SendIdent+0x38>)
	msp_txf_ident.multitype = 3;
	msp_txf_ident.msp_version = 0;
	msp_txf_ident.capability = 4;
 8004572:	2104      	movs	r1, #4
	msp_txf_ident.version = 233;
 8004574:	701a      	strb	r2, [r3, #0]
	msp_txf_ident.multitype = 3;
 8004576:	2203      	movs	r2, #3
 8004578:	705a      	strb	r2, [r3, #1]
	msp_txf_ident.msp_version = 0;
 800457a:	2200      	movs	r2, #0
	msp_txf_ident.capability = 4;
 800457c:	70d9      	strb	r1, [r3, #3]
	msp_txf_ident.msp_version = 0;
 800457e:	709a      	strb	r2, [r3, #2]

	uint16_t data_length = sizeof(msp_ident);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_ident, data_length);				// Convert struct elements to bytes
 8004580:	6818      	ldr	r0, [r3, #0]
	msp_txf_ident.capability = 4;
 8004582:	711a      	strb	r2, [r3, #4]
 8004584:	715a      	strb	r2, [r3, #5]
 8004586:	719a      	strb	r2, [r3, #6]
	memcpy(buff, &msp_txf_ident, data_length);				// Convert struct elements to bytes
 8004588:	889b      	ldrh	r3, [r3, #4]
 800458a:	9000      	str	r0, [sp, #0]
 800458c:	f88d 2006 	strb.w	r2, [sp, #6]
	MSP_SendFrame(MSP_IDENT, buff, data_length);			// Pack into MSP frame and transmit
 8004590:	4669      	mov	r1, sp
 8004592:	2207      	movs	r2, #7
 8004594:	2064      	movs	r0, #100	; 0x64
	memcpy(buff, &msp_txf_ident, data_length);				// Convert struct elements to bytes
 8004596:	f8ad 3004 	strh.w	r3, [sp, #4]
	MSP_SendFrame(MSP_IDENT, buff, data_length);			// Pack into MSP frame and transmit
 800459a:	f7ff ffc3 	bl	8004524 <MSP_SendFrame>
}
 800459e:	b003      	add	sp, #12
 80045a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80045a4:	2000149f 	.word	0x2000149f

080045a8 <MSP_SendStatus>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendStatus()
 ***********************************/
void MSP_SendStatus()
{
 80045a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msp_txf_status.sensor = 7;
 80045aa:	2207      	movs	r2, #7
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <MSP_SendStatus+0x34>)
 80045ae:	2400      	movs	r4, #0
 80045b0:	711a      	strb	r2, [r3, #4]
	msp_txf_status.flag = 42;
 80045b2:	222a      	movs	r2, #42	; 0x2a
	msp_txf_status.sensor = 7;
 80045b4:	715c      	strb	r4, [r3, #5]
	msp_txf_status.flag = 42;
 80045b6:	719a      	strb	r2, [r3, #6]
 80045b8:	71dc      	strb	r4, [r3, #7]
	msp_txf_status.current_set = 0;

	uint16_t data_length = sizeof(msp_status);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_status, data_length);				// Convert struct elements to bytes
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	aa01      	add	r2, sp, #4
 80045c0:	c203      	stmia	r2!, {r0, r1}
	msp_txf_status.flag = 42;
 80045c2:	721c      	strb	r4, [r3, #8]
 80045c4:	725c      	strb	r4, [r3, #9]
	msp_txf_status.current_set = 0;
 80045c6:	729c      	strb	r4, [r3, #10]
	memcpy(buff, &msp_txf_status, data_length);				// Convert struct elements to bytes
 80045c8:	891b      	ldrh	r3, [r3, #8]
 80045ca:	7094      	strb	r4, [r2, #2]
 80045cc:	8013      	strh	r3, [r2, #0]
	MSP_SendFrame(MSP_STATUS, buff, data_length);			// Pack into MSP frame and transmit
 80045ce:	a901      	add	r1, sp, #4
 80045d0:	220b      	movs	r2, #11
 80045d2:	2065      	movs	r0, #101	; 0x65
 80045d4:	f7ff ffa6 	bl	8004524 <MSP_SendFrame>
}
 80045d8:	b004      	add	sp, #16
 80045da:	bd10      	pop	{r4, pc}
 80045dc:	20001435 	.word	0x20001435

080045e0 <MSP_SendRawIMU>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendRawIMU()
 ***********************************/
void MSP_SendRawIMU()
{
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	b086      	sub	sp, #24
	uint16_t data_length = sizeof(msp_raw_imu);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_raw_imu, data_length);			// Convert struct elements to bytes
 80045e4:	aa01      	add	r2, sp, #4
 80045e6:	4615      	mov	r5, r2
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MSP_SendRawIMU+0x30>)
 80045ea:	f103 0610 	add.w	r6, r3, #16
 80045ee:	4614      	mov	r4, r2
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	3308      	adds	r3, #8
 80045f6:	c403      	stmia	r4!, {r0, r1}
 80045f8:	42b3      	cmp	r3, r6
 80045fa:	4622      	mov	r2, r4
 80045fc:	d1f7      	bne.n	80045ee <MSP_SendRawIMU+0xe>
 80045fe:	881b      	ldrh	r3, [r3, #0]
	MSP_SendFrame(MSP_RAW_IMU, buff, data_length);			// Pack into MSP frame and transmit
 8004600:	2212      	movs	r2, #18
	memcpy(buff, &msp_txf_raw_imu, data_length);			// Convert struct elements to bytes
 8004602:	8023      	strh	r3, [r4, #0]
	MSP_SendFrame(MSP_RAW_IMU, buff, data_length);			// Pack into MSP frame and transmit
 8004604:	4629      	mov	r1, r5
 8004606:	2066      	movs	r0, #102	; 0x66
 8004608:	f7ff ff8c 	bl	8004524 <MSP_SendFrame>
}
 800460c:	b006      	add	sp, #24
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	200014a6 	.word	0x200014a6

08004614 <MSP_SendMotor>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendMotor()
 ***********************************/
void MSP_SendMotor()
{
 8004614:	b507      	push	{r0, r1, r2, lr}
	uint16_t data_length = sizeof(msp_motor);				// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_motor, data_length);				// Convert struct elements to bytes
 8004616:	466b      	mov	r3, sp
 8004618:	4a05      	ldr	r2, [pc, #20]	; (8004630 <MSP_SendMotor+0x1c>)
 800461a:	6810      	ldr	r0, [r2, #0]
 800461c:	6851      	ldr	r1, [r2, #4]
	MSP_SendFrame(MSP_MOTOR, buff, data_length);			// Pack into MSP frame and transmit
 800461e:	2208      	movs	r2, #8
	memcpy(buff, &msp_txf_motor, data_length);				// Convert struct elements to bytes
 8004620:	c303      	stmia	r3!, {r0, r1}
	MSP_SendFrame(MSP_MOTOR, buff, data_length);			// Pack into MSP frame and transmit
 8004622:	4669      	mov	r1, sp
 8004624:	2068      	movs	r0, #104	; 0x68
 8004626:	f7ff ff7d 	bl	8004524 <MSP_SendFrame>
}
 800462a:	b003      	add	sp, #12
 800462c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004630:	20001459 	.word	0x20001459

08004634 <MSP_SendRC>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendRC()
 ***********************************/
void MSP_SendRC()
{
 8004634:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint16_t data_length = sizeof(msp_rc);					// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_rc, data_length);					// Convert struct elements to bytes
 8004636:	466a      	mov	r2, sp
 8004638:	466d      	mov	r5, sp
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <MSP_SendRC+0x2c>)
 800463c:	f103 0610 	add.w	r6, r3, #16
 8004640:	4614      	mov	r4, r2
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
 8004646:	3308      	adds	r3, #8
 8004648:	c403      	stmia	r4!, {r0, r1}
 800464a:	42b3      	cmp	r3, r6
 800464c:	4622      	mov	r2, r4
 800464e:	d1f7      	bne.n	8004640 <MSP_SendRC+0xc>
	MSP_SendFrame(MSP_RC, buff, data_length);				// Pack into MSP frame and transmit
 8004650:	2210      	movs	r2, #16
 8004652:	4629      	mov	r1, r5
 8004654:	2069      	movs	r0, #105	; 0x69
 8004656:	f7ff ff65 	bl	8004524 <MSP_SendFrame>
}
 800465a:	b004      	add	sp, #16
 800465c:	bd70      	pop	{r4, r5, r6, pc}
 800465e:	bf00      	nop
 8004660:	20001534 	.word	0x20001534

08004664 <MSP_SendAttitude>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendAttitude()
 ***********************************/
void MSP_SendAttitude()
{
 8004664:	b507      	push	{r0, r1, r2, lr}
	uint16_t data_length = sizeof(msp_attitude);			// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_attitude, data_length);			// Convert struct elements to bytes
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <MSP_SendAttitude+0x20>)
	MSP_SendFrame(MSP_ATTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004668:	2206      	movs	r2, #6
	memcpy(buff, &msp_txf_attitude, data_length);			// Convert struct elements to bytes
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	889b      	ldrh	r3, [r3, #4]
 800466e:	9000      	str	r0, [sp, #0]
	MSP_SendFrame(MSP_ATTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004670:	4669      	mov	r1, sp
 8004672:	206c      	movs	r0, #108	; 0x6c
	memcpy(buff, &msp_txf_attitude, data_length);			// Convert struct elements to bytes
 8004674:	f8ad 3004 	strh.w	r3, [sp, #4]
	MSP_SendFrame(MSP_ATTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004678:	f7ff ff54 	bl	8004524 <MSP_SendFrame>
}
 800467c:	b003      	add	sp, #12
 800467e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004682:	bf00      	nop
 8004684:	20001411 	.word	0x20001411

08004688 <MSP_SendAltitude>:
 Arguments		:	None
 Return Value	:	None
 Example Call	:	MSP_SendAltitude()
 ***********************************/
void MSP_SendAltitude()
{
 8004688:	b507      	push	{r0, r1, r2, lr}
	uint16_t data_length = sizeof(msp_altitude);			// Get payload size
	uint8_t buff[data_length];								// Payload buffer
	memcpy(buff, &msp_txf_altitude, data_length);			// Convert struct elements to bytes
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <MSP_SendAltitude+0x20>)
	MSP_SendFrame(MSP_ALTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 800468c:	2206      	movs	r2, #6
	memcpy(buff, &msp_txf_altitude, data_length);			// Convert struct elements to bytes
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	889b      	ldrh	r3, [r3, #4]
 8004692:	9000      	str	r0, [sp, #0]
	MSP_SendFrame(MSP_ALTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 8004694:	4669      	mov	r1, sp
 8004696:	206d      	movs	r0, #109	; 0x6d
	memcpy(buff, &msp_txf_altitude, data_length);			// Convert struct elements to bytes
 8004698:	f8ad 3004 	strh.w	r3, [sp, #4]
	MSP_SendFrame(MSP_ALTITUDE, buff, data_length);			// Pack into MSP frame and transmit
 800469c:	f7ff ff42 	bl	8004524 <MSP_SendFrame>
}
 80046a0:	b003      	add	sp, #12
 80046a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80046a6:	bf00      	nop
 80046a8:	20001527 	.word	0x20001527

080046ac <MSP_ParseFrame.isra.0>:
	switch (code)
 80046ac:	2869      	cmp	r0, #105	; 0x69
static void MSP_ParseFrame(uint8_t code, uint8_t *data, uint16_t data_length, uint8_t RTS)
 80046ae:	b508      	push	{r3, lr}
	switch (code)
 80046b0:	d02a      	beq.n	8004708 <MSP_ParseFrame.isra.0+0x5c>
 80046b2:	d80a      	bhi.n	80046ca <MSP_ParseFrame.isra.0+0x1e>
 80046b4:	2865      	cmp	r0, #101	; 0x65
 80046b6:	d018      	beq.n	80046ea <MSP_ParseFrame.isra.0+0x3e>
 80046b8:	d802      	bhi.n	80046c0 <MSP_ParseFrame.isra.0+0x14>
 80046ba:	2864      	cmp	r0, #100	; 0x64
 80046bc:	d010      	beq.n	80046e0 <MSP_ParseFrame.isra.0+0x34>
 80046be:	bd08      	pop	{r3, pc}
 80046c0:	2866      	cmp	r0, #102	; 0x66
 80046c2:	d017      	beq.n	80046f4 <MSP_ParseFrame.isra.0+0x48>
 80046c4:	2868      	cmp	r0, #104	; 0x68
 80046c6:	d01a      	beq.n	80046fe <MSP_ParseFrame.isra.0+0x52>
 80046c8:	bd08      	pop	{r3, pc}
 80046ca:	286d      	cmp	r0, #109	; 0x6d
 80046cc:	d026      	beq.n	800471c <MSP_ParseFrame.isra.0+0x70>
 80046ce:	d802      	bhi.n	80046d6 <MSP_ParseFrame.isra.0+0x2a>
 80046d0:	286c      	cmp	r0, #108	; 0x6c
 80046d2:	d01e      	beq.n	8004712 <MSP_ParseFrame.isra.0+0x66>
 80046d4:	bd08      	pop	{r3, pc}
 80046d6:	28c8      	cmp	r0, #200	; 0xc8
 80046d8:	d025      	beq.n	8004726 <MSP_ParseFrame.isra.0+0x7a>
 80046da:	28ca      	cmp	r0, #202	; 0xca
 80046dc:	d02f      	beq.n	800473e <MSP_ParseFrame.isra.0+0x92>
 80046de:	bd08      	pop	{r3, pc}
			if (RTS) MSP_SendIdent();													// Send Identifier data on RTS
 80046e0:	b3d2      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 80046e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendIdent();													// Send Identifier data on RTS
 80046e6:	f7ff bf41 	b.w	800456c <MSP_SendIdent>
			if (RTS) MSP_SendStatus();											// Send Status data on RTS
 80046ea:	b3aa      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 80046ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendStatus();											// Send Status data on RTS
 80046f0:	f7ff bf5a 	b.w	80045a8 <MSP_SendStatus>
			if (RTS) MSP_SendRawIMU();													// Send Raw IMU data on RTS
 80046f4:	b382      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 80046f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendRawIMU();													// Send Raw IMU data on RTS
 80046fa:	f7ff bf71 	b.w	80045e0 <MSP_SendRawIMU>
			if (RTS) MSP_SendMotor();													// Send Motor data on RTS
 80046fe:	b35a      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 8004700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendMotor();													// Send Motor data on RTS
 8004704:	f7ff bf86 	b.w	8004614 <MSP_SendMotor>
			if (RTS) MSP_SendRC();												// Send RC data on RTS
 8004708:	b332      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 800470a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendRC();												// Send RC data on RTS
 800470e:	f7ff bf91 	b.w	8004634 <MSP_SendRC>
			if (RTS) MSP_SendAttitude();										// Send Attitude data on RTS
 8004712:	b30a      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 8004714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendAttitude();										// Send Attitude data on RTS
 8004718:	f7ff bfa4 	b.w	8004664 <MSP_SendAttitude>
			if (RTS) MSP_SendAltitude();										// Send Altitude data on RTS
 800471c:	b1e2      	cbz	r2, 8004758 <MSP_ParseFrame.isra.0+0xac>
}
 800471e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			if (RTS) MSP_SendAltitude();										// Send Altitude data on RTS
 8004722:	f7ff bfb1 	b.w	8004688 <MSP_SendAltitude>
			memcpy(&msp_rxf_raw_rc, data, sizeof(msp_set_raw_rc));				// Convert byte array to struct
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <MSP_ParseFrame.isra.0+0xb0>)
 8004728:	f101 0210 	add.w	r2, r1, #16
 800472c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004730:	4291      	cmp	r1, r2
 8004732:	f843 0b04 	str.w	r0, [r3], #4
 8004736:	d1f9      	bne.n	800472c <MSP_ParseFrame.isra.0+0x80>
			MSP_SetRawRC_Callback();											// Callback function
 8004738:	f7ff fd88 	bl	800424c <MSP_SetRawRC_Callback>
 800473c:	bd08      	pop	{r3, pc}
			memcpy(&msp_rxf_pid, data, sizeof(msp_set_pid));					// Convert byte array to struct
 800473e:	4b08      	ldr	r3, [pc, #32]	; (8004760 <MSP_ParseFrame.isra.0+0xb4>)
 8004740:	f101 021c 	add.w	r2, r1, #28
 8004744:	f851 0b04 	ldr.w	r0, [r1], #4
 8004748:	4291      	cmp	r1, r2
 800474a:	f843 0b04 	str.w	r0, [r3], #4
 800474e:	d1f9      	bne.n	8004744 <MSP_ParseFrame.isra.0+0x98>
 8004750:	880a      	ldrh	r2, [r1, #0]
 8004752:	801a      	strh	r2, [r3, #0]
			MSP_SetPID_Callback();												// Callback function
 8004754:	f7ff fc9a 	bl	800408c <MSP_SetPID_Callback>
 8004758:	bd08      	pop	{r3, pc}
 800475a:	bf00      	nop
 800475c:	20001449 	.word	0x20001449
 8004760:	200013f3 	.word	0x200013f3

08004764 <MSP_Update>:
{
 8004764:	b570      	push	{r4, r5, r6, lr}
	serialInt(rxf.count);
 8004766:	4c39      	ldr	r4, [pc, #228]	; (800484c <MSP_Update+0xe8>)
	serialPrint("\n\nCount: ");
 8004768:	4839      	ldr	r0, [pc, #228]	; (8004850 <MSP_Update+0xec>)
 800476a:	f000 fc39 	bl	8004fe0 <serialPrint>
	serialInt(rxf.count);
 800476e:	7820      	ldrb	r0, [r4, #0]
 8004770:	f000 fc46 	bl	8005000 <serialInt>
	serialPrint("\nAvail: ");
 8004774:	4837      	ldr	r0, [pc, #220]	; (8004854 <MSP_Update+0xf0>)
 8004776:	f000 fc33 	bl	8004fe0 <serialPrint>
	serialInt(serialAvailable());
 800477a:	f000 fbe1 	bl	8004f40 <serialAvailable>
 800477e:	f000 fc3f 	bl	8005000 <serialInt>
	if (serialAvailable() == 0) return;
 8004782:	f000 fbdd 	bl	8004f40 <serialAvailable>
 8004786:	4625      	mov	r5, r4
 8004788:	b1b8      	cbz	r0, 80047ba <MSP_Update+0x56>
	if (rxf.count == 0)
 800478a:	7823      	ldrb	r3, [r4, #0]
 800478c:	b95b      	cbnz	r3, 80047a6 <MSP_Update+0x42>
	rxf.length = 0;
 800478e:	8063      	strh	r3, [r4, #2]
	rxf.code = 0;
 8004790:	7123      	strb	r3, [r4, #4]
	rxf.checksum = 0;
 8004792:	7163      	strb	r3, [r4, #5]
	rxf.RTS = 0;
 8004794:	71a3      	strb	r3, [r4, #6]
		rxf.count = (serialRead() == '$') ? 1:0;
 8004796:	f000 fbe7 	bl	8004f68 <serialRead>
 800479a:	f1a0 0324 	sub.w	r3, r0, #36	; 0x24
 800479e:	4258      	negs	r0, r3
 80047a0:	4158      	adcs	r0, r3
 80047a2:	7020      	strb	r0, [r4, #0]
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
	else if (rxf.count == 1)
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d108      	bne.n	80047bc <MSP_Update+0x58>
		rxf.count = (serialRead() == 'M') ? 2:0;
 80047aa:	f000 fbdd 	bl	8004f68 <serialRead>
 80047ae:	284d      	cmp	r0, #77	; 0x4d
 80047b0:	bf08      	it	eq
 80047b2:	2302      	moveq	r3, #2
		rxf.count = (serialRead() == '<') ? 3:0;
 80047b4:	bf18      	it	ne
 80047b6:	2300      	movne	r3, #0
			rxf.count = 0;
 80047b8:	7023      	strb	r3, [r4, #0]
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
	else if (rxf.count == 2)
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d105      	bne.n	80047cc <MSP_Update+0x68>
		rxf.count = (serialRead() == '<') ? 3:0;
 80047c0:	f000 fbd2 	bl	8004f68 <serialRead>
 80047c4:	283c      	cmp	r0, #60	; 0x3c
 80047c6:	bf08      	it	eq
 80047c8:	2303      	moveq	r3, #3
 80047ca:	e7f3      	b.n	80047b4 <MSP_Update+0x50>
	else if (rxf.count == 3)
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d10a      	bne.n	80047e6 <MSP_Update+0x82>
		rxf.length = serialRead();
 80047d0:	f000 fbca 	bl	8004f68 <serialRead>
 80047d4:	b280      	uxth	r0, r0
 80047d6:	8060      	strh	r0, [r4, #2]
		if (rxf.length == 0x00) rxf.RTS = 1;
 80047d8:	b908      	cbnz	r0, 80047de <MSP_Update+0x7a>
 80047da:	2301      	movs	r3, #1
 80047dc:	71a3      	strb	r3, [r4, #6]
			rxf.count++;
 80047de:	782b      	ldrb	r3, [r5, #0]
 80047e0:	3301      	adds	r3, #1
		if (rxf.checksum != serialRead()) rxf.count = 0;
 80047e2:	702b      	strb	r3, [r5, #0]
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
	else if (rxf.count == 4)
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d108      	bne.n	80047fc <MSP_Update+0x98>
		rxf.code = serialRead();
 80047ea:	f000 fbbd 	bl	8004f68 <serialRead>
		rxf.checksum = rxf.code ^ rxf.length;
 80047ee:	78a3      	ldrb	r3, [r4, #2]
		rxf.code = serialRead();
 80047f0:	7120      	strb	r0, [r4, #4]
		rxf.checksum = rxf.code ^ rxf.length;
 80047f2:	4058      	eors	r0, r3
		rxf.count++;
 80047f4:	7823      	ldrb	r3, [r4, #0]
		rxf.checksum = rxf.code ^ rxf.length;
 80047f6:	7160      	strb	r0, [r4, #5]
		rxf.count++;
 80047f8:	3301      	adds	r3, #1
 80047fa:	e7dd      	b.n	80047b8 <MSP_Update+0x54>
	else if (rxf.count == 5)
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d114      	bne.n	800482a <MSP_Update+0xc6>
		if (rxf.RTS)
 8004800:	79a6      	ldrb	r6, [r4, #6]
 8004802:	b10e      	cbz	r6, 8004808 <MSP_Update+0xa4>
			rxf.count++;
 8004804:	2306      	movs	r3, #6
 8004806:	e7d7      	b.n	80047b8 <MSP_Update+0x54>
		else if (serialAvailable() >= rxf.length)
 8004808:	f000 fb9a 	bl	8004f40 <serialAvailable>
 800480c:	8863      	ldrh	r3, [r4, #2]
 800480e:	4298      	cmp	r0, r3
 8004810:	dbd3      	blt.n	80047ba <MSP_Update+0x56>
			for (int i=0; i<rxf.length; i++)
 8004812:	886b      	ldrh	r3, [r5, #2]
 8004814:	429e      	cmp	r6, r3
 8004816:	dae2      	bge.n	80047de <MSP_Update+0x7a>
				rxf.buffer[i] = serialRead();
 8004818:	f000 fba6 	bl	8004f68 <serialRead>
 800481c:	19ab      	adds	r3, r5, r6
 800481e:	71d8      	strb	r0, [r3, #7]
				rxf.checksum ^= rxf.buffer[i];
 8004820:	796b      	ldrb	r3, [r5, #5]
			for (int i=0; i<rxf.length; i++)
 8004822:	3601      	adds	r6, #1
				rxf.checksum ^= rxf.buffer[i];
 8004824:	4058      	eors	r0, r3
 8004826:	7168      	strb	r0, [r5, #5]
 8004828:	e7f3      	b.n	8004812 <MSP_Update+0xae>
	else if (rxf.count == 6)
 800482a:	2b06      	cmp	r3, #6
 800482c:	d104      	bne.n	8004838 <MSP_Update+0xd4>
		if (rxf.checksum != serialRead()) rxf.count = 0;
 800482e:	7966      	ldrb	r6, [r4, #5]
 8004830:	f000 fb9a 	bl	8004f68 <serialRead>
 8004834:	4286      	cmp	r6, r0
 8004836:	d001      	beq.n	800483c <MSP_Update+0xd8>
 8004838:	2300      	movs	r3, #0
 800483a:	e7d2      	b.n	80047e2 <MSP_Update+0x7e>
			MSP_ParseFrame(rxf.code, rxf.buffer, rxf.length, rxf.RTS);
 800483c:	79a2      	ldrb	r2, [r4, #6]
 800483e:	1de1      	adds	r1, r4, #7
 8004840:	7920      	ldrb	r0, [r4, #4]
 8004842:	f7ff ff33 	bl	80046ac <MSP_ParseFrame.isra.0>
			rxf.count = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	e7b6      	b.n	80047b8 <MSP_Update+0x54>
 800484a:	bf00      	nop
 800484c:	200014b8 	.word	0x200014b8
 8004850:	0800768a 	.word	0x0800768a
 8004854:	08007694 	.word	0x08007694

08004858 <_Error_Handler>:
 Arguments		:	File and line number
 Return Value	:	None
 Example Call	:	_Error_Handler(__FILE__, __LINE__)
 ***********************************/
void _Error_Handler(char * file, int line)
{
 8004858:	b580      	push	{r7, lr}
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, 1);
 800485a:	2201      	movs	r2, #1
{
 800485c:	4607      	mov	r7, r0
 800485e:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, 1);
 8004860:	481b      	ldr	r0, [pc, #108]	; (80048d0 <_Error_Handler+0x78>)
 8004862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004866:	f7fc fdc7 	bl	80013f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004870:	4817      	ldr	r0, [pc, #92]	; (80048d0 <_Error_Handler+0x78>)
 8004872:	f7fc fdc1 	bl	80013f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800487c:	4814      	ldr	r0, [pc, #80]	; (80048d0 <_Error_Handler+0x78>)
 800487e:	f7fc fdbb 	bl	80013f8 <HAL_GPIO_WritePin>

	while (1)
	{
		// Blink Error LEDs
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8004882:	4c13      	ldr	r4, [pc, #76]	; (80048d0 <_Error_Handler+0x78>)
		HAL_GPIO_TogglePin(White_LED_GPIO_Port, White_LED_Pin);
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);

		serialPrint("Error with ");
 8004884:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80048d8 <_Error_Handler+0x80>
		serialPrint(file);
		serialPrint(" at line: ");
 8004888:	4e12      	ldr	r6, [pc, #72]	; (80048d4 <_Error_Handler+0x7c>)
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 800488a:	4620      	mov	r0, r4
 800488c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004890:	f7fc fdb7 	bl	8001402 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(White_LED_GPIO_Port, White_LED_Pin);
 8004894:	4620      	mov	r0, r4
 8004896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800489a:	f7fc fdb2 	bl	8001402 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 800489e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7fc fdad 	bl	8001402 <HAL_GPIO_TogglePin>
		serialPrint("Error with ");
 80048a8:	4640      	mov	r0, r8
 80048aa:	f000 fb99 	bl	8004fe0 <serialPrint>
		serialPrint(file);
 80048ae:	4638      	mov	r0, r7
 80048b0:	f000 fb96 	bl	8004fe0 <serialPrint>
		serialPrint(" at line: ");
 80048b4:	4630      	mov	r0, r6
 80048b6:	f000 fb93 	bl	8004fe0 <serialPrint>
		serialInt(line);
 80048ba:	4628      	mov	r0, r5
 80048bc:	f000 fba0 	bl	8005000 <serialInt>
		serialWrite('\n');
 80048c0:	200a      	movs	r0, #10
 80048c2:	f000 fb45 	bl	8004f50 <serialWrite>

		delay_ms(500);
 80048c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048ca:	f000 fcf5 	bl	80052b8 <delay_ms>
 80048ce:	e7dc      	b.n	800488a <_Error_Handler+0x32>
 80048d0:	40011000 	.word	0x40011000
 80048d4:	080076be 	.word	0x080076be
 80048d8:	080076b2 	.word	0x080076b2

080048dc <SystemClock_Config>:
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048dc:	2301      	movs	r3, #1
{
 80048de:	b510      	push	{r4, lr}
 80048e0:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048e2:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80048e4:	2310      	movs	r3, #16
 80048e6:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80048e8:	2300      	movs	r3, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048ea:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80048ec:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80048ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048f2:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048f4:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048f6:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80048f8:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048fa:	f7fd f8f7 	bl	8001aec <HAL_RCC_OscConfig>
 80048fe:	b118      	cbz	r0, 8004908 <SystemClock_Config+0x2c>
		_Error_Handler(__FILE__, __LINE__);
 8004900:	213c      	movs	r1, #60	; 0x3c
		_Error_Handler(__FILE__, __LINE__);
 8004902:	4813      	ldr	r0, [pc, #76]	; (8004950 <SystemClock_Config+0x74>)
 8004904:	f7ff ffa8 	bl	8004858 <_Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004908:	230f      	movs	r3, #15
 800490a:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800490c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004910:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004912:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004914:	4621      	mov	r1, r4
 8004916:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004918:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800491a:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800491c:	f7fd fb88 	bl	8002030 <HAL_RCC_ClockConfig>
 8004920:	4604      	mov	r4, r0
 8004922:	b108      	cbz	r0, 8004928 <SystemClock_Config+0x4c>
		_Error_Handler(__FILE__, __LINE__);
 8004924:	2149      	movs	r1, #73	; 0x49
 8004926:	e7ec      	b.n	8004902 <SystemClock_Config+0x26>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004928:	f7fd fc36 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 800492c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004930:	fbb0 f0f3 	udiv	r0, r0, r3
 8004934:	f7fc fc58 	bl	80011e8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004938:	2004      	movs	r0, #4
 800493a:	f7fc fc6b 	bl	8001214 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800493e:	4622      	mov	r2, r4
 8004940:	4621      	mov	r1, r4
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	f7fc fc0f 	bl	8001168 <HAL_NVIC_SetPriority>
}
 800494a:	b010      	add	sp, #64	; 0x40
 800494c:	bd10      	pop	{r4, pc}
 800494e:	bf00      	nop
 8004950:	0800769d 	.word	0x0800769d

08004954 <Peripherals_Init>:
{
 8004954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004958:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
 800495a:	f7fc fbc5 	bl	80010e8 <HAL_Init>
	SystemClock_Config();
 800495e:	f7ff ffbd 	bl	80048dc <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004962:	4b98      	ldr	r3, [pc, #608]	; (8004bc4 <Peripherals_Init+0x270>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8004964:	f44f 4160 	mov.w	r1, #57344	; 0xe000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004968:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 800496a:	4897      	ldr	r0, [pc, #604]	; (8004bc8 <Peripherals_Init+0x274>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800496c:	f042 0210 	orr.w	r2, r2, #16
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004974:	2401      	movs	r4, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004976:	f002 0210 	and.w	r2, r2, #16
 800497a:	9201      	str	r2, [sp, #4]
 800497c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800497e:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004980:	2502      	movs	r5, #2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	f042 0204 	orr.w	r2, r2, #4
 8004986:	619a      	str	r2, [r3, #24]
 8004988:	699a      	ldr	r2, [r3, #24]
	hi2c1.Init.ClockSpeed = 400000;
 800498a:	4f90      	ldr	r7, [pc, #576]	; (8004bcc <Peripherals_Init+0x278>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800498c:	f002 0204 	and.w	r2, r2, #4
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	619a      	str	r2, [r3, #24]
 800499c:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 800499e:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80049a8:	f7fc fd26 	bl	80013f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80049ac:	2200      	movs	r2, #0
 80049ae:	2120      	movs	r1, #32
 80049b0:	4887      	ldr	r0, [pc, #540]	; (8004bd0 <Peripherals_Init+0x27c>)
 80049b2:	f7fc fd21 	bl	80013f8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80049b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ba:	a90d      	add	r1, sp, #52	; 0x34
 80049bc:	4882      	ldr	r0, [pc, #520]	; (8004bc8 <Peripherals_Init+0x274>)
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80049be:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c2:	9510      	str	r5, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049c4:	f7fc fc38 	bl	8001238 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049c8:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ca:	4881      	ldr	r0, [pc, #516]	; (8004bd0 <Peripherals_Init+0x27c>)
 80049cc:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049ce:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d2:	9510      	str	r5, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	f7fc fc30 	bl	8001238 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 80049d8:	487e      	ldr	r0, [pc, #504]	; (8004bd4 <Peripherals_Init+0x280>)
	hi2c1.Init.ClockSpeed = 400000;
 80049da:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <Peripherals_Init+0x284>)
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 400000;
 80049e0:	e880 0088 	stmia.w	r0, {r3, r7}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049e4:	2300      	movs	r3, #0
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049e6:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049e8:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80049ea:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049ec:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80049ee:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049f0:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049f2:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049f4:	f7fc feb4 	bl	8001760 <HAL_I2C_Init>
 80049f8:	b118      	cbz	r0, 8004a02 <Peripherals_Init+0xae>
		_Error_Handler(__FILE__, __LINE__);
 80049fa:	216b      	movs	r1, #107	; 0x6b
		_Error_Handler(__FILE__, __LINE__);
 80049fc:	4877      	ldr	r0, [pc, #476]	; (8004bdc <Peripherals_Init+0x288>)
 80049fe:	f7ff ff2b 	bl	8004858 <_Error_Handler>
	huart1.Init.BaudRate = UART1_BAUD;
 8004a02:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004a06:	f04f 080c 	mov.w	r8, #12
	huart1.Instance = USART1;
 8004a0a:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <Peripherals_Init+0x28c>)
	huart1.Init.BaudRate = UART1_BAUD;
 8004a0c:	4975      	ldr	r1, [pc, #468]	; (8004be4 <Peripherals_Init+0x290>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a0e:	6098      	str	r0, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004a10:	60d8      	str	r0, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004a12:	6118      	str	r0, [r3, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a14:	6198      	str	r0, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a16:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a18:	4618      	mov	r0, r3
	huart1.Init.BaudRate = UART1_BAUD;
 8004a1a:	e883 0006 	stmia.w	r3, {r1, r2}
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004a1e:	f8c3 8014 	str.w	r8, [r3, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a22:	f7fd fe71 	bl	8002708 <HAL_UART_Init>
 8004a26:	b110      	cbz	r0, 8004a2e <Peripherals_Init+0xda>
		_Error_Handler(__FILE__, __LINE__);
 8004a28:	f240 1151 	movw	r1, #337	; 0x151
 8004a2c:	e7e6      	b.n	80049fc <Peripherals_Init+0xa8>
	htim1.Init.Period = 1000;
 8004a2e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	htim1.Instance = TIM1;
 8004a32:	4c6d      	ldr	r4, [pc, #436]	; (8004be8 <Peripherals_Init+0x294>)
 8004a34:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <Peripherals_Init+0x298>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a36:	60a0      	str	r0, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a38:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8004a3a:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a3c:	4620      	mov	r0, r4
	htim1.Init.Prescaler = 2;
 8004a3e:	e884 0028 	stmia.w	r4, {r3, r5}
	htim1.Init.Period = 1000;
 8004a42:	60e6      	str	r6, [r4, #12]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a44:	f7fd fc86 	bl	8002354 <HAL_TIM_PWM_Init>
 8004a48:	b108      	cbz	r0, 8004a4e <Peripherals_Init+0xfa>
		_Error_Handler(__FILE__, __LINE__);
 8004a4a:	2188      	movs	r1, #136	; 0x88
 8004a4c:	e7d6      	b.n	80049fc <Peripherals_Init+0xa8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4e:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a50:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a52:	a904      	add	r1, sp, #16
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7fd fd67 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5a:	b108      	cbz	r0, 8004a60 <Peripherals_Init+0x10c>
		_Error_Handler(__FILE__, __LINE__);
 8004a5c:	218f      	movs	r1, #143	; 0x8f
 8004a5e:	e7cd      	b.n	80049fc <Peripherals_Init+0xa8>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a60:	2760      	movs	r7, #96	; 0x60
	sConfigOC.Pulse = 0;
 8004a62:	9007      	str	r0, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a64:	9008      	str	r0, [sp, #32]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a66:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a68:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a6a:	900c      	str	r0, [sp, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	a906      	add	r1, sp, #24
 8004a70:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a72:	9706      	str	r7, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a74:	f7fd fcb4 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004a78:	b108      	cbz	r0, 8004a7e <Peripherals_Init+0x12a>
		_Error_Handler(__FILE__, __LINE__);
 8004a7a:	219a      	movs	r1, #154	; 0x9a
 8004a7c:	e7be      	b.n	80049fc <Peripherals_Init+0xa8>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a82:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a84:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a86:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8004a88:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a8a:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a8c:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a8e:	a90d      	add	r1, sp, #52	; 0x34
 8004a90:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a92:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a94:	f7fd fd28 	bl	80024e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a98:	4680      	mov	r8, r0
 8004a9a:	b108      	cbz	r0, 8004aa0 <Peripherals_Init+0x14c>
		_Error_Handler(__FILE__, __LINE__);
 8004a9c:	21a6      	movs	r1, #166	; 0xa6
 8004a9e:	e7ad      	b.n	80049fc <Peripherals_Init+0xa8>
	HAL_TIM_MspPostInit(&htim1);
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 fb61 	bl	8005168 <HAL_TIM_MspPostInit>
	htim2.Instance = TIM2;
 8004aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aaa:	4c51      	ldr	r4, [pc, #324]	; (8004bf0 <Peripherals_Init+0x29c>)
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004aac:	4620      	mov	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aae:	e884 0128 	stmia.w	r4, {r3, r5, r8}
	htim2.Init.Period = 1000;
 8004ab2:	60e6      	str	r6, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ab4:	f8c4 8010 	str.w	r8, [r4, #16]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ab8:	f7fd fc4c 	bl	8002354 <HAL_TIM_PWM_Init>
 8004abc:	b108      	cbz	r0, 8004ac2 <Peripherals_Init+0x16e>
		_Error_Handler(__FILE__, __LINE__);
 8004abe:	21c3      	movs	r1, #195	; 0xc3
 8004ac0:	e79c      	b.n	80049fc <Peripherals_Init+0xa8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ac2:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ac4:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ac6:	a906      	add	r1, sp, #24
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7fd fd2d 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8004ace:	b108      	cbz	r0, 8004ad4 <Peripherals_Init+0x180>
		_Error_Handler(__FILE__, __LINE__);
 8004ad0:	21ca      	movs	r1, #202	; 0xca
 8004ad2:	e793      	b.n	80049fc <Peripherals_Init+0xa8>
	sConfigOC.Pulse = 0;
 8004ad4:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ad6:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ad8:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ada:	2204      	movs	r2, #4
 8004adc:	a90d      	add	r1, sp, #52	; 0x34
 8004ade:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ae0:	970d      	str	r7, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ae2:	f7fd fc7d 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	b108      	cbz	r0, 8004aee <Peripherals_Init+0x19a>
		_Error_Handler(__FILE__, __LINE__);
 8004aea:	21d3      	movs	r1, #211	; 0xd3
 8004aec:	e786      	b.n	80049fc <Peripherals_Init+0xa8>
	HAL_TIM_MspPostInit(&htim2);
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 fb3a 	bl	8005168 <HAL_TIM_MspPostInit>
	htim3.Instance = TIM3;
 8004af4:	483f      	ldr	r0, [pc, #252]	; (8004bf4 <Peripherals_Init+0x2a0>)
 8004af6:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <Peripherals_Init+0x2a4>)
	htim3.Init.Period = 1000;
 8004af8:	60c6      	str	r6, [r0, #12]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004afa:	e880 00a8 	stmia.w	r0, {r3, r5, r7}
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004afe:	6107      	str	r7, [r0, #16]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b00:	f7fd fc28 	bl	8002354 <HAL_TIM_PWM_Init>
 8004b04:	b108      	cbz	r0, 8004b0a <Peripherals_Init+0x1b6>
		_Error_Handler(__FILE__, __LINE__);
 8004b06:	21f0      	movs	r1, #240	; 0xf0
 8004b08:	e778      	b.n	80049fc <Peripherals_Init+0xa8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0a:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b0c:	a906      	add	r1, sp, #24
 8004b0e:	4839      	ldr	r0, [pc, #228]	; (8004bf4 <Peripherals_Init+0x2a0>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b10:	9306      	str	r3, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b12:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b14:	f7fd fd08 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8004b18:	b108      	cbz	r0, 8004b1e <Peripherals_Init+0x1ca>
		_Error_Handler(__FILE__, __LINE__);
 8004b1a:	21f7      	movs	r1, #247	; 0xf7
 8004b1c:	e76e      	b.n	80049fc <Peripherals_Init+0xa8>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b1e:	2660      	movs	r6, #96	; 0x60
	sConfigOC.Pulse = 0;
 8004b20:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b22:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b24:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b26:	2208      	movs	r2, #8
 8004b28:	a90d      	add	r1, sp, #52	; 0x34
 8004b2a:	4832      	ldr	r0, [pc, #200]	; (8004bf4 <Peripherals_Init+0x2a0>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b2c:	960d      	str	r6, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b2e:	f7fd fc57 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004b32:	b110      	cbz	r0, 8004b3a <Peripherals_Init+0x1e6>
		_Error_Handler(__FILE__, __LINE__);
 8004b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b38:	e760      	b.n	80049fc <Peripherals_Init+0xa8>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b3a:	220c      	movs	r2, #12
 8004b3c:	a90d      	add	r1, sp, #52	; 0x34
 8004b3e:	482d      	ldr	r0, [pc, #180]	; (8004bf4 <Peripherals_Init+0x2a0>)
 8004b40:	f7fd fc4e 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004b44:	4605      	mov	r5, r0
 8004b46:	b110      	cbz	r0, 8004b4e <Peripherals_Init+0x1fa>
		_Error_Handler(__FILE__, __LINE__);
 8004b48:	f240 1105 	movw	r1, #261	; 0x105
 8004b4c:	e756      	b.n	80049fc <Peripherals_Init+0xa8>
	HAL_TIM_MspPostInit(&htim3);
 8004b4e:	4829      	ldr	r0, [pc, #164]	; (8004bf4 <Peripherals_Init+0x2a0>)
 8004b50:	f000 fb0a 	bl	8005168 <HAL_TIM_MspPostInit>
	htim4.Init.Prescaler = 2;
 8004b54:	2302      	movs	r3, #2
	htim4.Instance = TIM4;
 8004b56:	4c29      	ldr	r4, [pc, #164]	; (8004bfc <Peripherals_Init+0x2a8>)
	htim4.Init.Prescaler = 2;
 8004b58:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <Peripherals_Init+0x2ac>)
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b5a:	4620      	mov	r0, r4
	htim4.Init.Prescaler = 2;
 8004b5c:	e884 000c 	stmia.w	r4, {r2, r3}
	htim4.Init.Period = 1000;
 8004b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b64:	60a5      	str	r5, [r4, #8]
	htim4.Init.Period = 1000;
 8004b66:	60e3      	str	r3, [r4, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b68:	6125      	str	r5, [r4, #16]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b6a:	f7fd fbf3 	bl	8002354 <HAL_TIM_PWM_Init>
 8004b6e:	b110      	cbz	r0, 8004b76 <Peripherals_Init+0x222>
		_Error_Handler(__FILE__, __LINE__);
 8004b70:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004b74:	e742      	b.n	80049fc <Peripherals_Init+0xa8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b76:	9006      	str	r0, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b78:	9007      	str	r0, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b7a:	a906      	add	r1, sp, #24
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7fd fcd3 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8004b82:	b110      	cbz	r0, 8004b8a <Peripherals_Init+0x236>
		_Error_Handler(__FILE__, __LINE__);
 8004b84:	f240 1129 	movw	r1, #297	; 0x129
 8004b88:	e738      	b.n	80049fc <Peripherals_Init+0xa8>
	sConfigOC.Pulse = 0;
 8004b8a:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8c:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b8e:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b90:	2208      	movs	r2, #8
 8004b92:	a90d      	add	r1, sp, #52	; 0x34
 8004b94:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b96:	960d      	str	r6, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b98:	f7fd fc22 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004b9c:	b110      	cbz	r0, 8004ba4 <Peripherals_Init+0x250>
		_Error_Handler(__FILE__, __LINE__);
 8004b9e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8004ba2:	e72b      	b.n	80049fc <Peripherals_Init+0xa8>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ba4:	220c      	movs	r2, #12
 8004ba6:	a90d      	add	r1, sp, #52	; 0x34
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fd fc19 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 8004bae:	b110      	cbz	r0, 8004bb6 <Peripherals_Init+0x262>
		_Error_Handler(__FILE__, __LINE__);
 8004bb0:	f240 1137 	movw	r1, #311	; 0x137
 8004bb4:	e722      	b.n	80049fc <Peripherals_Init+0xa8>
	HAL_TIM_MspPostInit(&htim4);
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f000 fad6 	bl	8005168 <HAL_TIM_MspPostInit>
}
 8004bbc:	b014      	add	sp, #80	; 0x50
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	00061a80 	.word	0x00061a80
 8004bd0:	40010800 	.word	0x40010800
 8004bd4:	20001580 	.word	0x20001580
 8004bd8:	40005400 	.word	0x40005400
 8004bdc:	0800769d 	.word	0x0800769d
 8004be0:	200015f8 	.word	0x200015f8
 8004be4:	40013800 	.word	0x40013800
 8004be8:	20001638 	.word	0x20001638
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	20001674 	.word	0x20001674
 8004bf4:	200015bc 	.word	0x200015bc
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	20001544 	.word	0x20001544
 8004c00:	40000800 	.word	0x40000800

08004c04 <PID_Compute>:
	msp_txf_pid.alt.i = pid_altitude.con_KI * 255;
	msp_txf_pid.alt.d = pid_altitude.con_KD * 255;
}

void PID_Compute(PID_TypeDef *pid)
{
 8004c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c08:	4604      	mov	r4, r0
	if ((micros() - pid->last_time) <= pid->delta) return;
	serialInt(micros() - pid->last_time);
	serialWrite('\n');*/

	// Compute error
	pid->error = (pid->set_point + pid->offset) - pid->input;
 8004c0a:	69c0      	ldr	r0, [r0, #28]
 8004c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004c10:	f7fb ff64 	bl	8000adc <__addsf3>
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb ff5f 	bl	8000ad8 <__aeabi_fsub>
     * -179 degrees and the input is +179 degrees, the standard PID output would
     * be -358 degrees leading to a very high yaw rotation rate to correct the
     * -358 degrees error.  However, +2 degrees achieves the same result, with
     * a  much lower rotation rate to fix the error.
     * -----------------------------------------------------------------------*/
	if (pid->instance == YAW)
 8004c1a:	6823      	ldr	r3, [r4, #0]
	pid->error = (pid->set_point + pid->offset) - pid->input;
 8004c1c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (pid->instance == YAW)
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d124      	bne.n	8004c6c <PID_Compute+0x68>
	{
		if (abs(pid->error) > 180)
 8004c22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c24:	2100      	movs	r1, #0
 8004c26:	f7fc fa1d 	bl	8001064 <__aeabi_fcmpgt>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d06c      	beq.n	8004d08 <PID_Compute+0x104>
 8004c2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c30:	493e      	ldr	r1, [pc, #248]	; (8004d2c <PID_Compute+0x128>)
 8004c32:	f04f 0501 	mov.w	r5, #1
 8004c36:	f7fc fa15 	bl	8001064 <__aeabi_fcmpgt>
 8004c3a:	b900      	cbnz	r0, 8004c3e <PID_Compute+0x3a>
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b2ed      	uxtb	r5, r5
 8004c40:	b1a5      	cbz	r5, 8004c6c <PID_Compute+0x68>
			pid->error = pid->error - (360 * pid->error / abs(pid->error));
 8004c42:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004c44:	493a      	ldr	r1, [pc, #232]	; (8004d30 <PID_Compute+0x12c>)
 8004c46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c48:	f7fc f850 	bl	8000cec <__aeabi_fmul>
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4606      	mov	r6, r0
 8004c50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c52:	f7fc fa07 	bl	8001064 <__aeabi_fcmpgt>
 8004c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d05c      	beq.n	8004d16 <PID_Compute+0x112>
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7fc f8f9 	bl	8000e54 <__aeabi_fdiv>
 8004c62:	4601      	mov	r1, r0
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7fb ff37 	bl	8000ad8 <__aeabi_fsub>
 8004c6a:	62a0      	str	r0, [r4, #40]	; 0x28
	}

	//if (pid_altitude.output < pid->breakpoint)
	//{
		KP = pid->con_KP;
 8004c6c:	6860      	ldr	r0, [r4, #4]
		KI = pid->con_KI;
 8004c6e:	f8d4 8008 	ldr.w	r8, [r4, #8]
		KD = pid->con_KD;
 8004c72:	68e6      	ldr	r6, [r4, #12]
		KI = pid->agr_KI;
		KD = pid->agr_KD;
	}*/

	// Compute proportional term
	pid->proportional = KP * pid->error;
 8004c74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c76:	f7fc f839 	bl	8000cec <__aeabi_fmul>
 8004c7a:	63a0      	str	r0, [r4, #56]	; 0x38

	// Compute integral sum
	pid->integral += pid->error;
 8004c7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004c80:	f7fb ff2c 	bl	8000adc <__addsf3>
 8004c84:	63e0      	str	r0, [r4, #60]	; 0x3c

	// Constrain integral term to prevent wind-up
	pid->integral = constrain(pid->integral, -PID_LIMIT, PID_LIMIT);
 8004c86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c88:	492a      	ldr	r1, [pc, #168]	; (8004d34 <PID_Compute+0x130>)
 8004c8a:	f7fc f9cd 	bl	8001028 <__aeabi_fcmplt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d144      	bne.n	8004d1c <PID_Compute+0x118>
 8004c92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c94:	4928      	ldr	r1, [pc, #160]	; (8004d38 <PID_Compute+0x134>)
 8004c96:	f7fc f9e5 	bl	8001064 <__aeabi_fcmpgt>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d140      	bne.n	8004d20 <PID_Compute+0x11c>
 8004c9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ca0:	63e3      	str	r3, [r4, #60]	; 0x3c

	// Compute derivative term
	pid->derivative = pid->input - pid->last_input;
 8004ca2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca6:	f7fb ff17 	bl	8000ad8 <__aeabi_fsub>
 8004caa:	6420      	str	r0, [r4, #64]	; 0x40
#ifdef PID_GYRO
	pid->derivative = pid->gyro;
#endif

	// Compute angle PID output
	pid->output = (pid->proportional) + (KI * pid->integral) - (KD * pid->derivative);
 8004cac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004cae:	4640      	mov	r0, r8
 8004cb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004cb2:	f7fc f81b 	bl	8000cec <__aeabi_fmul>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7fb ff10 	bl	8000adc <__addsf3>
 8004cbc:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7fc f812 	bl	8000cec <__aeabi_fmul>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7fb ff04 	bl	8000ad8 <__aeabi_fsub>
 8004cd0:	64a0      	str	r0, [r4, #72]	; 0x48

	// Constrain angle PID output to PWM range
	pid->output = pid->direction * constrain(pid->output, -PID_LIMIT, PID_LIMIT);
 8004cd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004cd4:	f7fb ffb6 	bl	8000c44 <__aeabi_i2f>
 8004cd8:	4916      	ldr	r1, [pc, #88]	; (8004d34 <PID_Compute+0x130>)
 8004cda:	4605      	mov	r5, r0
 8004cdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004cde:	f7fc f9a3 	bl	8001028 <__aeabi_fcmplt>
 8004ce2:	b9f8      	cbnz	r0, 8004d24 <PID_Compute+0x120>
 8004ce4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004ce6:	4914      	ldr	r1, [pc, #80]	; (8004d38 <PID_Compute+0x134>)
 8004ce8:	f7fc f9bc 	bl	8001064 <__aeabi_fcmpgt>
 8004cec:	b9e0      	cbnz	r0, 8004d28 <PID_Compute+0x124>
 8004cee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fffb 	bl	8000cec <__aeabi_fmul>
 8004cf6:	64a0      	str	r0, [r4, #72]	; 0x48

	// Store variable for next iteration
	pid->last_input = pid->input;
 8004cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cfa:	6363      	str	r3, [r4, #52]	; 0x34
	pid->last_error = pid->error;
 8004cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
	pid->last_time  = pid->time;
 8004d00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d02:	6563      	str	r3, [r4, #84]	; 0x54
 8004d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (abs(pid->error) > 180)
 8004d08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d0a:	490c      	ldr	r1, [pc, #48]	; (8004d3c <PID_Compute+0x138>)
 8004d0c:	f04f 0501 	mov.w	r5, #1
 8004d10:	f7fc f98a 	bl	8001028 <__aeabi_fcmplt>
 8004d14:	e791      	b.n	8004c3a <PID_Compute+0x36>
			pid->error = pid->error - (360 * pid->error / abs(pid->error));
 8004d16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004d1a:	e79f      	b.n	8004c5c <PID_Compute+0x58>
	pid->integral = constrain(pid->integral, -PID_LIMIT, PID_LIMIT);
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <PID_Compute+0x130>)
 8004d1e:	e7bf      	b.n	8004ca0 <PID_Compute+0x9c>
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <PID_Compute+0x134>)
 8004d22:	e7bd      	b.n	8004ca0 <PID_Compute+0x9c>
	pid->output = pid->direction * constrain(pid->output, -PID_LIMIT, PID_LIMIT);
 8004d24:	4803      	ldr	r0, [pc, #12]	; (8004d34 <PID_Compute+0x130>)
 8004d26:	e7e3      	b.n	8004cf0 <PID_Compute+0xec>
 8004d28:	4803      	ldr	r0, [pc, #12]	; (8004d38 <PID_Compute+0x134>)
 8004d2a:	e7e1      	b.n	8004cf0 <PID_Compute+0xec>
 8004d2c:	43340000 	.word	0x43340000
 8004d30:	43b40000 	.word	0x43b40000
 8004d34:	c3fa0000 	.word	0xc3fa0000
 8004d38:	43fa0000 	.word	0x43fa0000
 8004d3c:	c3340000 	.word	0xc3340000

08004d40 <PID_Init>:
}

void PID_Init()
{
	/* Set Controller Direction */
	pid_pitch.direction = DIRECT;
 8004d40:	2201      	movs	r2, #1
	pid_roll.direction = REVERSE;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
{
 8004d46:	b5f0      	push	{r4, r5, r6, r7, lr}
	pid_roll.direction = REVERSE;
 8004d48:	481c      	ldr	r0, [pc, #112]	; (8004dbc <PID_Init+0x7c>)
	pid_pitch.direction = DIRECT;
 8004d4a:	4c1d      	ldr	r4, [pc, #116]	; (8004dc0 <PID_Init+0x80>)
	pid_yaw.direction = REVERSE;
 8004d4c:	491d      	ldr	r1, [pc, #116]	; (8004dc4 <PID_Init+0x84>)
	pid_pitch.direction = DIRECT;
 8004d4e:	64e2      	str	r2, [r4, #76]	; 0x4c
	pid_roll.direction = REVERSE;
 8004d50:	64c3      	str	r3, [r0, #76]	; 0x4c
	pid_yaw.direction = REVERSE;
 8004d52:	64cb      	str	r3, [r1, #76]	; 0x4c
	pid_altitude.direction = DIRECT;
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <PID_Init+0x88>)
			pid_pitch.con_KP = ckp;
 8004d56:	4d1d      	ldr	r5, [pc, #116]	; (8004dcc <PID_Init+0x8c>)
	pid_altitude.direction = DIRECT;
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set PID Loop Time */
	pid_pitch.delta = 5;
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	65a2      	str	r2, [r4, #88]	; 0x58
	pid_roll.delta = 5;
 8004d5e:	6582      	str	r2, [r0, #88]	; 0x58
	pid_yaw.delta = 5;
 8004d60:	658a      	str	r2, [r1, #88]	; 0x58
	pid_altitude.delta = 5;
 8004d62:	659a      	str	r2, [r3, #88]	; 0x58

	/* Set Breakpoint Value */
	pid_pitch.breakpoint = 1500;
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <PID_Init+0x90>)
			pid_pitch.con_KD = ckd;
 8004d66:	4e1b      	ldr	r6, [pc, #108]	; (8004dd4 <PID_Init+0x94>)
	pid_pitch.breakpoint = 1500;
 8004d68:	6222      	str	r2, [r4, #32]
	pid_roll.breakpoint = 1450;
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <PID_Init+0x98>)
			pid_pitch.agr_KP = akp;
 8004d6c:	4f1b      	ldr	r7, [pc, #108]	; (8004ddc <PID_Init+0x9c>)
	pid_roll.breakpoint = 1450;
 8004d6e:	6202      	str	r2, [r0, #32]
	pid_yaw.breakpoint = 2000;
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <PID_Init+0xa0>)
 8004d72:	620a      	str	r2, [r1, #32]
	pid_altitude.breakpoint = 0;
 8004d74:	2200      	movs	r2, #0
 8004d76:	621a      	str	r2, [r3, #32]
			pid_pitch.con_KP = ckp;
 8004d78:	6065      	str	r5, [r4, #4]
			pid_pitch.con_KI = cki;
 8004d7a:	4d1a      	ldr	r5, [pc, #104]	; (8004de4 <PID_Init+0xa4>)
 8004d7c:	60a5      	str	r5, [r4, #8]
			pid_pitch.con_KD = ckd;
 8004d7e:	60e6      	str	r6, [r4, #12]
			pid_pitch.agr_KP = akp;
 8004d80:	6127      	str	r7, [r4, #16]
			pid_pitch.agr_KD = akd;
 8004d82:	4f19      	ldr	r7, [pc, #100]	; (8004de8 <PID_Init+0xa8>)
			pid_pitch.agr_KI = aki;
 8004d84:	6165      	str	r5, [r4, #20]
			pid_pitch.agr_KD = akd;
 8004d86:	61a7      	str	r7, [r4, #24]
			pid_roll.con_KP = ckp;
 8004d88:	4c18      	ldr	r4, [pc, #96]	; (8004dec <PID_Init+0xac>)
			pid_roll.con_KD = ckd;
 8004d8a:	4f19      	ldr	r7, [pc, #100]	; (8004df0 <PID_Init+0xb0>)
			pid_roll.con_KP = ckp;
 8004d8c:	6044      	str	r4, [r0, #4]
			pid_roll.con_KI = cki;
 8004d8e:	6085      	str	r5, [r0, #8]
			pid_roll.con_KD = ckd;
 8004d90:	60c7      	str	r7, [r0, #12]
			pid_roll.agr_KP = akp;
 8004d92:	6104      	str	r4, [r0, #16]
			pid_roll.agr_KD = akd;
 8004d94:	4c17      	ldr	r4, [pc, #92]	; (8004df4 <PID_Init+0xb4>)
			pid_roll.agr_KI = aki;
 8004d96:	6145      	str	r5, [r0, #20]
			pid_roll.agr_KD = akd;
 8004d98:	6184      	str	r4, [r0, #24]
			pid_yaw.con_KP = ckp;
 8004d9a:	4817      	ldr	r0, [pc, #92]	; (8004df8 <PID_Init+0xb8>)
 8004d9c:	6048      	str	r0, [r1, #4]
			pid_yaw.con_KI = cki;
 8004d9e:	4817      	ldr	r0, [pc, #92]	; (8004dfc <PID_Init+0xbc>)
 8004da0:	6088      	str	r0, [r1, #8]
			pid_yaw.con_KD = ckd;
 8004da2:	60ce      	str	r6, [r1, #12]
			pid_yaw.agr_KP = akp;
 8004da4:	610a      	str	r2, [r1, #16]
			pid_yaw.agr_KI = aki;
 8004da6:	614a      	str	r2, [r1, #20]
			pid_yaw.agr_KD = akd;
 8004da8:	618a      	str	r2, [r1, #24]
			pid_altitude.con_KP = ckp;
 8004daa:	4915      	ldr	r1, [pc, #84]	; (8004e00 <PID_Init+0xc0>)
 8004dac:	6059      	str	r1, [r3, #4]
			pid_altitude.con_KI = cki;
 8004dae:	609a      	str	r2, [r3, #8]
			pid_altitude.con_KD = ckd;
 8004db0:	60da      	str	r2, [r3, #12]
			pid_altitude.agr_KP = akp;
 8004db2:	611a      	str	r2, [r3, #16]
			pid_altitude.agr_KI = aki;
 8004db4:	615a      	str	r2, [r3, #20]
			pid_altitude.agr_KD = akd;
 8004db6:	619a      	str	r2, [r3, #24]
 8004db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000104 	.word	0x20000104
 8004dc0:	200000a8 	.word	0x200000a8
 8004dc4:	20000160 	.word	0x20000160
 8004dc8:	2000004c 	.word	0x2000004c
 8004dcc:	408ccccd 	.word	0x408ccccd
 8004dd0:	44bb8000 	.word	0x44bb8000
 8004dd4:	438c0000 	.word	0x438c0000
 8004dd8:	44b54000 	.word	0x44b54000
 8004ddc:	40900000 	.word	0x40900000
 8004de0:	44fa0000 	.word	0x44fa0000
 8004de4:	3ca3d70a 	.word	0x3ca3d70a
 8004de8:	43b40000 	.word	0x43b40000
 8004dec:	40733333 	.word	0x40733333
 8004df0:	43820000 	.word	0x43820000
 8004df4:	43a00000 	.word	0x43a00000
 8004df8:	40400000 	.word	0x40400000
 8004dfc:	3c23d70a 	.word	0x3c23d70a
 8004e00:	41200000 	.word	0x41200000

08004e04 <PID_UpdateAltitude>:
	pid_roll.gyro = gyroData[1];
	pid_yaw.gyro = gyroData[2];
}

void PID_UpdateAltitude()
{
 8004e04:	b570      	push	{r4, r5, r6, lr}
	if (joystick.ALT_HOLD)
 8004e06:	4c10      	ldr	r4, [pc, #64]	; (8004e48 <PID_UpdateAltitude+0x44>)
 8004e08:	7863      	ldrb	r3, [r4, #1]
 8004e0a:	b15b      	cbz	r3, 8004e24 <PID_UpdateAltitude+0x20>
	{
		if (ALT_FLAG == 0)
 8004e0c:	4e0f      	ldr	r6, [pc, #60]	; (8004e4c <PID_UpdateAltitude+0x48>)
 8004e0e:	4d10      	ldr	r5, [pc, #64]	; (8004e50 <PID_UpdateAltitude+0x4c>)
 8004e10:	7833      	ldrb	r3, [r6, #0]
 8004e12:	b98b      	cbnz	r3, 8004e38 <PID_UpdateAltitude+0x34>
		{
			pid_altitude.set_point = MS5611_GetFilteredAltitude()*100;
 8004e14:	f7fe f8d0 	bl	8002fb8 <MS5611_GetFilteredAltitude>
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <PID_UpdateAltitude+0x50>)
 8004e1a:	f7fb ff67 	bl	8000cec <__aeabi_fmul>
			ALT_FLAG = 1;
 8004e1e:	2301      	movs	r3, #1
			pid_altitude.set_point = MS5611_GetFilteredAltitude()*100;
 8004e20:	61e8      	str	r0, [r5, #28]
			ALT_FLAG = 1;
 8004e22:	7033      	strb	r3, [r6, #0]
		}
		else pid_altitude.input = MS5611_GetFilteredAltitude()*100;
	}

	if (!joystick.ALT_HOLD)
 8004e24:	7862      	ldrb	r2, [r4, #1]
 8004e26:	b932      	cbnz	r2, 8004e36 <PID_UpdateAltitude+0x32>
	{
		if (ALT_FLAG) ALT_FLAG = 0;
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <PID_UpdateAltitude+0x48>)
 8004e2a:	7819      	ldrb	r1, [r3, #0]
 8004e2c:	b101      	cbz	r1, 8004e30 <PID_UpdateAltitude+0x2c>
 8004e2e:	701a      	strb	r2, [r3, #0]
		pid_altitude.output = (float) joystick.throttle;
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <PID_UpdateAltitude+0x4c>)
 8004e34:	649a      	str	r2, [r3, #72]	; 0x48
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
		else pid_altitude.input = MS5611_GetFilteredAltitude()*100;
 8004e38:	f7fe f8be 	bl	8002fb8 <MS5611_GetFilteredAltitude>
 8004e3c:	4905      	ldr	r1, [pc, #20]	; (8004e54 <PID_UpdateAltitude+0x50>)
 8004e3e:	f7fb ff55 	bl	8000cec <__aeabi_fmul>
 8004e42:	6328      	str	r0, [r5, #48]	; 0x30
 8004e44:	e7ee      	b.n	8004e24 <PID_UpdateAltitude+0x20>
 8004e46:	bf00      	nop
 8004e48:	20000280 	.word	0x20000280
 8004e4c:	200002a4 	.word	0x200002a4
 8004e50:	2000004c 	.word	0x2000004c
 8004e54:	42c80000 	.word	0x42c80000

08004e58 <PID_Update>:
	}
}

void PID_Update()
{
 8004e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pid_pitch.input = AHRS_GetPitch();
 8004e5c:	f7fd ffd8 	bl	8002e10 <AHRS_GetPitch>
 8004e60:	4d2f      	ldr	r5, [pc, #188]	; (8004f20 <PID_Update+0xc8>)
	pid_roll.input = AHRS_GetRoll();
 8004e62:	4c30      	ldr	r4, [pc, #192]	; (8004f24 <PID_Update+0xcc>)
	pid_pitch.input = AHRS_GetPitch();
 8004e64:	6328      	str	r0, [r5, #48]	; 0x30
	pid_roll.input = AHRS_GetRoll();
 8004e66:	f7fd ffdd 	bl	8002e24 <AHRS_GetRoll>
 8004e6a:	6320      	str	r0, [r4, #48]	; 0x30
	pid_yaw.input = AHRS_GetYaw();
 8004e6c:	f7fd ffe4 	bl	8002e38 <AHRS_GetYaw>
 8004e70:	4f2d      	ldr	r7, [pc, #180]	; (8004f28 <PID_Update+0xd0>)
 8004e72:	46a8      	mov	r8, r5
 8004e74:	6338      	str	r0, [r7, #48]	; 0x30
	PID_UpdateAltitude();
 8004e76:	f7ff ffc5 	bl	8004e04 <PID_UpdateAltitude>
	serialInt(pid_yaw.input);
	serialWrite('\t');
#endif

	/* Emergency Power Down */
	if ((abs(pid_pitch.input) > 80) || (abs(pid_roll.input) > 80))
 8004e7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f7fc f8f1 	bl	8001064 <__aeabi_fcmpgt>
 8004e82:	b1b8      	cbz	r0, 8004eb4 <PID_Update+0x5c>
 8004e84:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004e86:	4929      	ldr	r1, [pc, #164]	; (8004f2c <PID_Update+0xd4>)
 8004e88:	f7fc f8ec 	bl	8001064 <__aeabi_fcmpgt>
 8004e8c:	b948      	cbnz	r0, 8004ea2 <PID_Update+0x4a>
 8004e8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e90:	2100      	movs	r1, #0
 8004e92:	f7fc f8e7 	bl	8001064 <__aeabi_fcmpgt>
 8004e96:	b190      	cbz	r0, 8004ebe <PID_Update+0x66>
 8004e98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e9a:	4924      	ldr	r1, [pc, #144]	; (8004f2c <PID_Update+0xd4>)
 8004e9c:	f7fc f8e2 	bl	8001064 <__aeabi_fcmpgt>
 8004ea0:	b190      	cbz	r0, 8004ec8 <PID_Update+0x70>
	{
		Motor_StopAll();
 8004ea2:	f7ff fabd 	bl	8004420 <Motor_StopAll>
	//Motor_DistributeSpeed(pid_altitude.output, pid_pitch.output, pid_roll.output, pid_yaw.output);

	if (joystick.MOTOR_ARM) Motor_DistributeSpeed(pid_altitude.output, pid_pitch.output, pid_roll.output, pid_yaw.output);
	else Motor_StopAll();
	//PID_UpdateMSP();
}
 8004ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		toggleLED(0, 1, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2101      	movs	r1, #1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fe bffc 	b.w	8003eac <toggleLED>
	if ((abs(pid_pitch.input) > 80) || (abs(pid_roll.input) > 80))
 8004eb4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004eb6:	491e      	ldr	r1, [pc, #120]	; (8004f30 <PID_Update+0xd8>)
 8004eb8:	f7fc f8b6 	bl	8001028 <__aeabi_fcmplt>
 8004ebc:	e7e6      	b.n	8004e8c <PID_Update+0x34>
 8004ebe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ec0:	491b      	ldr	r1, [pc, #108]	; (8004f30 <PID_Update+0xd8>)
 8004ec2:	f7fc f8b1 	bl	8001028 <__aeabi_fcmplt>
 8004ec6:	e7eb      	b.n	8004ea0 <PID_Update+0x48>
	else toggleLED(1, 1, 1);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4611      	mov	r1, r2
 8004ece:	f7fe ffed 	bl	8003eac <toggleLED>
	PID_Compute(&pid_pitch);
 8004ed2:	4813      	ldr	r0, [pc, #76]	; (8004f20 <PID_Update+0xc8>)
 8004ed4:	f7ff fe96 	bl	8004c04 <PID_Compute>
	if (joystick.ALT_HOLD)
 8004ed8:	4e16      	ldr	r6, [pc, #88]	; (8004f34 <PID_Update+0xdc>)
	PID_Compute(&pid_roll);
 8004eda:	4812      	ldr	r0, [pc, #72]	; (8004f24 <PID_Update+0xcc>)
 8004edc:	f7ff fe92 	bl	8004c04 <PID_Compute>
	PID_Compute(&pid_yaw);
 8004ee0:	4811      	ldr	r0, [pc, #68]	; (8004f28 <PID_Update+0xd0>)
 8004ee2:	f7ff fe8f 	bl	8004c04 <PID_Compute>
	if (joystick.ALT_HOLD)
 8004ee6:	7873      	ldrb	r3, [r6, #1]
 8004ee8:	4d13      	ldr	r5, [pc, #76]	; (8004f38 <PID_Update+0xe0>)
 8004eea:	b13b      	cbz	r3, 8004efc <PID_Update+0xa4>
		PID_Compute(&pid_altitude);
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff fe89 	bl	8004c04 <PID_Compute>
		pid_altitude.output += 1500;
 8004ef2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004ef4:	4911      	ldr	r1, [pc, #68]	; (8004f3c <PID_Update+0xe4>)
 8004ef6:	f7fb fdf1 	bl	8000adc <__addsf3>
 8004efa:	64a8      	str	r0, [r5, #72]	; 0x48
	pid_altitude.output = joystick.throttle;
 8004efc:	6873      	ldr	r3, [r6, #4]
 8004efe:	64ab      	str	r3, [r5, #72]	; 0x48
	if (joystick.MOTOR_ARM) Motor_DistributeSpeed(pid_altitude.output, pid_pitch.output, pid_roll.output, pid_yaw.output);
 8004f00:	7833      	ldrb	r3, [r6, #0]
 8004f02:	b143      	cbz	r3, 8004f16 <PID_Update+0xbe>
 8004f04:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004f06:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8004f0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (joystick.MOTOR_ARM) Motor_DistributeSpeed(pid_altitude.output, pid_pitch.output, pid_roll.output, pid_yaw.output);
 8004f12:	f7ff babd 	b.w	8004490 <Motor_DistributeSpeed>
}
 8004f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	else Motor_StopAll();
 8004f1a:	f7ff ba81 	b.w	8004420 <Motor_StopAll>
 8004f1e:	bf00      	nop
 8004f20:	200000a8 	.word	0x200000a8
 8004f24:	20000104 	.word	0x20000104
 8004f28:	20000160 	.word	0x20000160
 8004f2c:	42a00000 	.word	0x42a00000
 8004f30:	c2a00000 	.word	0xc2a00000
 8004f34:	20000280 	.word	0x20000280
 8004f38:	2000004c 	.word	0x2000004c
 8004f3c:	44bb8000 	.word	0x44bb8000

08004f40 <serialAvailable>:

unsigned char rx_buffer[2];
char tx_buffer[100];

int serialAvailable()
{
 8004f40:	b508      	push	{r3, lr}
	return (CB_Size(&rxc));
 8004f42:	4802      	ldr	r0, [pc, #8]	; (8004f4c <serialAvailable+0xc>)
 8004f44:	f7fe ff8a 	bl	8003e5c <CB_Size>
}
 8004f48:	bd08      	pop	{r3, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000360 	.word	0x20000360

08004f50 <serialWrite>:

void serialWrite(unsigned char ch)
{
	tx_buffer[0] = ch;
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <serialWrite+0x10>)
	HAL_UART_Transmit(&huart1, (uint8_t*) &tx_buffer, 1, 5);
 8004f52:	2305      	movs	r3, #5
	tx_buffer[0] = ch;
 8004f54:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tx_buffer, 1, 5);
 8004f56:	2201      	movs	r2, #1
 8004f58:	4802      	ldr	r0, [pc, #8]	; (8004f64 <serialWrite+0x14>)
 8004f5a:	f7fd bc01 	b.w	8002760 <HAL_UART_Transmit>
 8004f5e:	bf00      	nop
 8004f60:	200016b2 	.word	0x200016b2
 8004f64:	200015f8 	.word	0x200015f8

08004f68 <serialRead>:
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

unsigned char serialRead()
{
 8004f68:	b507      	push	{r0, r1, r2, lr}
	unsigned char data;
	CB_Read(&rxc, &data);
 8004f6a:	4805      	ldr	r0, [pc, #20]	; (8004f80 <serialRead+0x18>)
 8004f6c:	f10d 0107 	add.w	r1, sp, #7
 8004f70:	f7fe ff59 	bl	8003e26 <CB_Read>
	return data;
}
 8004f74:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f78:	b003      	add	sp, #12
 8004f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f7e:	bf00      	nop
 8004f80:	20000360 	.word	0x20000360

08004f84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART1)
 8004f84:	6802      	ldr	r2, [r0, #0]
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_UART_RxCpltCallback+0x24>)
{
 8004f88:	b510      	push	{r4, lr}
	if (huart->Instance == USART1)
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_UART_RxCpltCallback+0x22>
	{
		CB_Write(&rxc, rx_buffer[0]);
 8004f8e:	4c07      	ldr	r4, [pc, #28]	; (8004fac <HAL_UART_RxCpltCallback+0x28>)
 8004f90:	4807      	ldr	r0, [pc, #28]	; (8004fb0 <HAL_UART_RxCpltCallback+0x2c>)
 8004f92:	7821      	ldrb	r1, [r4, #0]
 8004f94:	f7fe ff32 	bl	8003dfc <CB_Write>
		HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8004f98:	4621      	mov	r1, r4
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 8004f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4804      	ldr	r0, [pc, #16]	; (8004fb4 <HAL_UART_RxCpltCallback+0x30>)
 8004fa2:	f7fd bc38 	b.w	8002816 <HAL_UART_Receive_IT>
 8004fa6:	bd10      	pop	{r4, pc}
 8004fa8:	40013800 	.word	0x40013800
 8004fac:	200016b0 	.word	0x200016b0
 8004fb0:	20000360 	.word	0x20000360
 8004fb4:	200015f8 	.word	0x200015f8

08004fb8 <serialFlush>:

void serialFlush()
{
	CB_Init(&rxc);
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <serialFlush+0x8>)
 8004fba:	f7fe bf53 	b.w	8003e64 <CB_Init>
 8004fbe:	bf00      	nop
 8004fc0:	20000360 	.word	0x20000360

08004fc4 <serialBegin>:
}

void serialBegin()
{
 8004fc4:	b508      	push	{r3, lr}
	serialFlush();
 8004fc6:	f7ff fff7 	bl	8004fb8 <serialFlush>
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
}
 8004fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4901      	ldr	r1, [pc, #4]	; (8004fd8 <serialBegin+0x14>)
 8004fd2:	4802      	ldr	r0, [pc, #8]	; (8004fdc <serialBegin+0x18>)
 8004fd4:	f7fd bc1f 	b.w	8002816 <HAL_UART_Receive_IT>
 8004fd8:	200016b0 	.word	0x200016b0
 8004fdc:	200015f8 	.word	0x200015f8

08004fe0 <serialPrint>:

void serialPrint(char* data)
{
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4604      	mov	r4, r0
	for (int i = 0; i < strlen(data); i++)
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7fb f8b2 	bl	8000150 <strlen>
 8004fec:	1b2b      	subs	r3, r5, r4
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	d800      	bhi.n	8004ff4 <serialPrint+0x14>
		serialWrite(data[i]);
}
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
		serialWrite(data[i]);
 8004ff4:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004ff8:	f7ff ffaa 	bl	8004f50 <serialWrite>
 8004ffc:	e7f3      	b.n	8004fe6 <serialPrint+0x6>
	...

08005000 <serialInt>:

void serialInt(int val)
{
 8005000:	b510      	push	{r4, lr}
	sprintf(tx_buffer, "%i", val);
 8005002:	4c05      	ldr	r4, [pc, #20]	; (8005018 <serialInt+0x18>)
 8005004:	4602      	mov	r2, r0
 8005006:	4905      	ldr	r1, [pc, #20]	; (800501c <serialInt+0x1c>)
 8005008:	4620      	mov	r0, r4
 800500a:	f000 f9a1 	bl	8005350 <siprintf>
	serialPrint(tx_buffer);
 800500e:	4620      	mov	r0, r4
}
 8005010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	serialPrint(tx_buffer);
 8005014:	f7ff bfe4 	b.w	8004fe0 <serialPrint>
 8005018:	200016b2 	.word	0x200016b2
 800501c:	080076c9 	.word	0x080076c9

08005020 <HAL_MspInit>:
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
	__HAL_RCC_AFIO_CLK_ENABLE();
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_MspInit+0x78>)
{
 8005022:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_AFIO_CLK_ENABLE();
 8005024:	699a      	ldr	r2, [r3, #24]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005026:	2003      	movs	r0, #3
	__HAL_RCC_AFIO_CLK_ENABLE();
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	619a      	str	r2, [r3, #24]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005038:	f7fc f884 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800503c:	2200      	movs	r2, #0
 800503e:	f06f 000b 	mvn.w	r0, #11
 8005042:	4611      	mov	r1, r2
 8005044:	f7fc f890 	bl	8001168 <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005048:	2200      	movs	r2, #0
 800504a:	f06f 000a 	mvn.w	r0, #10
 800504e:	4611      	mov	r1, r2
 8005050:	f7fc f88a 	bl	8001168 <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005054:	2200      	movs	r2, #0
 8005056:	f06f 0009 	mvn.w	r0, #9
 800505a:	4611      	mov	r1, r2
 800505c:	f7fc f884 	bl	8001168 <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005060:	2200      	movs	r2, #0
 8005062:	f06f 0004 	mvn.w	r0, #4
 8005066:	4611      	mov	r1, r2
 8005068:	f7fc f87e 	bl	8001168 <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	f06f 0003 	mvn.w	r0, #3
 8005072:	4611      	mov	r1, r2
 8005074:	f7fc f878 	bl	8001168 <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005078:	2200      	movs	r2, #0
 800507a:	f06f 0001 	mvn.w	r0, #1
 800507e:	4611      	mov	r1, r2
 8005080:	f7fc f872 	bl	8001168 <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005084:	2200      	movs	r2, #0
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	4611      	mov	r1, r2
 800508c:	f7fc f86c 	bl	8001168 <HAL_NVIC_SetPriority>
}
 8005090:	b003      	add	sp, #12
 8005092:	f85d fb04 	ldr.w	pc, [sp], #4
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800509c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	if (hi2c->Instance == I2C1)
 800509e:	6802      	ldr	r2, [r0, #0]
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_I2C_MspInit+0x38>)
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d113      	bne.n	80050ce <HAL_I2C_MspInit+0x32>
	{
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80050a6:	23c0      	movs	r3, #192	; 0xc0
 80050a8:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050aa:	2312      	movs	r3, #18
 80050ac:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ae:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b0:	a902      	add	r1, sp, #8
 80050b2:	4809      	ldr	r0, [pc, #36]	; (80050d8 <HAL_I2C_MspInit+0x3c>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050b4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	f7fc f8bf 	bl	8001238 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_I2C_MspInit+0x40>)
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80050c2:	61da      	str	r2, [r3, #28]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	9b01      	ldr	r3, [sp, #4]
	}
}
 80050ce:	b007      	add	sp, #28
 80050d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80050d4:	40005400 	.word	0x40005400
 80050d8:	40010c00 	.word	0x40010c00
 80050dc:	40021000 	.word	0x40021000

080050e0 <HAL_TIM_PWM_MspInit>:

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
	if (htim_pwm->Instance == TIM1)
 80050e0:	6803      	ldr	r3, [r0, #0]
 80050e2:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <HAL_TIM_PWM_MspInit+0x78>)
{
 80050e4:	b084      	sub	sp, #16
	if (htim_pwm->Instance == TIM1)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10b      	bne.n	8005102 <HAL_TIM_PWM_MspInit+0x22>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80050ea:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_TIM_PWM_MspInit+0x7c>)
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f2:	619a      	str	r2, [r3, #24]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	9b00      	ldr	r3, [sp, #0]
	else if (htim_pwm->Instance == TIM4)
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
	}
}
 80050fe:	b004      	add	sp, #16
 8005100:	4770      	bx	lr
	else if (htim_pwm->Instance == TIM2)
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d10b      	bne.n	8005120 <HAL_TIM_PWM_MspInit+0x40>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8005108:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	61da      	str	r2, [r3, #28]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	e7ee      	b.n	80050fe <HAL_TIM_PWM_MspInit+0x1e>
	else if (htim_pwm->Instance == TIM3)
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <HAL_TIM_PWM_MspInit+0x80>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10a      	bne.n	800513c <HAL_TIM_PWM_MspInit+0x5c>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <HAL_TIM_PWM_MspInit+0x7c>)
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	f042 0202 	orr.w	r2, r2, #2
 800512e:	61da      	str	r2, [r3, #28]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	9b02      	ldr	r3, [sp, #8]
 800513a:	e7e0      	b.n	80050fe <HAL_TIM_PWM_MspInit+0x1e>
	else if (htim_pwm->Instance == TIM4)
 800513c:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_TIM_PWM_MspInit+0x84>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d1dd      	bne.n	80050fe <HAL_TIM_PWM_MspInit+0x1e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_TIM_PWM_MspInit+0x7c>)
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	f042 0204 	orr.w	r2, r2, #4
 800514a:	61da      	str	r2, [r3, #28]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	9b03      	ldr	r3, [sp, #12]
}
 8005156:	e7d2      	b.n	80050fe <HAL_TIM_PWM_MspInit+0x1e>
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40021000 	.word	0x40021000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800

08005168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	if (htim->Instance == TIM1)
 800516a:	6803      	ldr	r3, [r0, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	; (80051bc <HAL_TIM_MspPostInit+0x54>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIM_MspPostInit+0x24>
	{
		/**TIM1 GPIO Configuration
		 PA11     ------> TIM1_CH4
		 */
		GPIO_InitStruct.Pin = Motor_6_Pin;
 8005172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005176:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	2302      	movs	r3, #2
		 PA1     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = Motor_3_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(Motor_3_GPIO_Port, &GPIO_InitStruct);
 800517a:	4669      	mov	r1, sp
 800517c:	4810      	ldr	r0, [pc, #64]	; (80051c0 <HAL_TIM_MspPostInit+0x58>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517e:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005180:	9303      	str	r3, [sp, #12]
		 PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = Motor_2_Pin | Motor_1_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005182:	f7fc f859 	bl	8001238 <HAL_GPIO_Init>
	}
}
 8005186:	b005      	add	sp, #20
 8005188:	f85d fb04 	ldr.w	pc, [sp], #4
	else if (htim->Instance == TIM2)
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d102      	bne.n	8005198 <HAL_TIM_MspPostInit+0x30>
		GPIO_InitStruct.Pin = Motor_3_Pin;
 8005192:	2302      	movs	r3, #2
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	e7f0      	b.n	800517a <HAL_TIM_MspPostInit+0x12>
	else if (htim->Instance == TIM3)
 8005198:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <HAL_TIM_MspPostInit+0x5c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d107      	bne.n	80051ae <HAL_TIM_MspPostInit+0x46>
		GPIO_InitStruct.Pin = Motor_4_Pin | Motor_5_Pin;
 800519e:	2303      	movs	r3, #3
		GPIO_InitStruct.Pin = Motor_2_Pin | Motor_1_Pin;
 80051a0:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a4:	4669      	mov	r1, sp
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a6:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051aa:	4807      	ldr	r0, [pc, #28]	; (80051c8 <HAL_TIM_MspPostInit+0x60>)
 80051ac:	e7e9      	b.n	8005182 <HAL_TIM_MspPostInit+0x1a>
	else if (htim->Instance == TIM4)
 80051ae:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_TIM_MspPostInit+0x64>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d1e8      	bne.n	8005186 <HAL_TIM_MspPostInit+0x1e>
		GPIO_InitStruct.Pin = Motor_2_Pin | Motor_1_Pin;
 80051b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051b8:	e7f2      	b.n	80051a0 <HAL_TIM_MspPostInit+0x38>
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40010800 	.word	0x40010800
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40010c00 	.word	0x40010c00
 80051cc:	40000800 	.word	0x40000800

080051d0 <HAL_UART_MspInit>:
		__HAL_RCC_TIM4_CLK_DISABLE();
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051d0:	b510      	push	{r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1)
 80051d2:	6802      	ldr	r2, [r0, #0]
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <HAL_UART_MspInit+0x60>)
{
 80051d6:	b086      	sub	sp, #24
	if (huart->Instance == USART1)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d127      	bne.n	800522c <HAL_UART_MspInit+0x5c>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80051dc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80051e0:	699a      	ldr	r2, [r3, #24]
		 PA10    ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e2:	a902      	add	r1, sp, #8
		__HAL_RCC_USART1_CLK_ENABLE();
 80051e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e8:	619a      	str	r2, [r3, #24]
 80051ea:	699b      	ldr	r3, [r3, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ec:	4811      	ldr	r0, [pc, #68]	; (8005234 <HAL_UART_MspInit+0x64>)
		__HAL_RCC_USART1_CLK_ENABLE();
 80051ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051fa:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	2302      	movs	r3, #2
 80051fe:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005200:	2303      	movs	r3, #3

		GPIO_InitStruct.Pin = GPIO_PIN_10;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005202:	2400      	movs	r4, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005204:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005206:	f7fc f817 	bl	8001238 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800520a:	f44f 6380 	mov.w	r3, #1024	; 0x400
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	a902      	add	r1, sp, #8
 8005210:	4808      	ldr	r0, [pc, #32]	; (8005234 <HAL_UART_MspInit+0x64>)
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005212:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005214:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005218:	f7fc f80e 	bl	8001238 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800521c:	2025      	movs	r0, #37	; 0x25
 800521e:	4622      	mov	r2, r4
 8005220:	4621      	mov	r1, r4
 8005222:	f7fb ffa1 	bl	8001168 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005226:	2025      	movs	r0, #37	; 0x25
 8005228:	f7fb ffd2 	bl	80011d0 <HAL_NVIC_EnableIRQ>
	}
}
 800522c:	b006      	add	sp, #24
 800522e:	bd10      	pop	{r4, pc}
 8005230:	40013800 	.word	0x40013800
 8005234:	40010800 	.word	0x40010800

08005238 <NMI_Handler>:
 8005238:	4770      	bx	lr

0800523a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800523a:	e7fe      	b.n	800523a <HardFault_Handler>

0800523c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800523c:	e7fe      	b.n	800523c <MemManage_Handler>

0800523e <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800523e:	e7fe      	b.n	800523e <BusFault_Handler>

08005240 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8005240:	e7fe      	b.n	8005240 <UsageFault_Handler>

08005242 <SVC_Handler>:
 8005242:	4770      	bx	lr

08005244 <DebugMon_Handler>:
 8005244:	4770      	bx	lr

08005246 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8005246:	4770      	bx	lr

08005248 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005248:	b508      	push	{r3, lr}
	HAL_IncTick();
 800524a:	f7fb ff5f 	bl	800110c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 800524e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 8005252:	f7fb bfec 	b.w	800122e <HAL_SYSTICK_IRQHandler>
	...

08005258 <USART1_IRQHandler>:
/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
	HAL_UART_IRQHandler(&huart1);
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <USART1_IRQHandler+0x8>)
 800525a:	f7fd bb10 	b.w	800287e <HAL_UART_IRQHandler>
 800525e:	bf00      	nop
 8005260:	200015f8 	.word	0x200015f8

08005264 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <SystemInit+0x40>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <SystemInit+0x44>)
 8005272:	400a      	ands	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800527c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005280:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005288:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005290:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8005292:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005296:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <SystemInit+0x48>)
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	f8ff0000 	.word	0xf8ff0000
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <millis>:
 80052b0:	f7fb bf34 	b.w	800111c <HAL_GetTick>

080052b4 <micros>:
// Not working properly, uses millis
uint32_t micros()
{
	//Micros = millis() * 1000 + 1000 - SysTick->VAL/64;
	//return Micros;
	return HAL_GetTick();
 80052b4:	f7fb bf32 	b.w	800111c <HAL_GetTick>

080052b8 <delay_ms>:
}

void delay_ms(uint32_t Delay)
{
	HAL_Delay(Delay);
 80052b8:	f7fb bf36 	b.w	8001128 <HAL_Delay>

080052bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80052bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80052be:	e003      	b.n	80052c8 <LoopCopyDataInit>

080052c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80052c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80052c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80052c6:	3104      	adds	r1, #4

080052c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80052c8:	480a      	ldr	r0, [pc, #40]	; (80052f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80052cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80052ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80052d0:	d3f6      	bcc.n	80052c0 <CopyDataInit>
  ldr r2, =_sbss
 80052d2:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80052d4:	e002      	b.n	80052dc <LoopFillZerobss>

080052d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80052d8:	f842 3b04 	str.w	r3, [r2], #4

080052dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80052de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80052e0:	d3f9      	bcc.n	80052d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052e2:	f7ff ffbf 	bl	8005264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052e6:	f000 f80f 	bl	8005308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052ea:	f7ff f866 	bl	80043ba <main>
  bx lr
 80052ee:	4770      	bx	lr
  ldr r3, =_sidata
 80052f0:	080077b0 	.word	0x080077b0
  ldr r0, =_sdata
 80052f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80052f8:	20000228 	.word	0x20000228
  ldr r2, =_sbss
 80052fc:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 8005300:	2000171c 	.word	0x2000171c

08005304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005304:	e7fe      	b.n	8005304 <ADC1_2_IRQHandler>
	...

08005308 <__libc_init_array>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	2500      	movs	r5, #0
 800530c:	4e0c      	ldr	r6, [pc, #48]	; (8005340 <__libc_init_array+0x38>)
 800530e:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <__libc_init_array+0x3c>)
 8005310:	1ba4      	subs	r4, r4, r6
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	42a5      	cmp	r5, r4
 8005316:	d109      	bne.n	800532c <__libc_init_array+0x24>
 8005318:	f002 f988 	bl	800762c <_init>
 800531c:	2500      	movs	r5, #0
 800531e:	4e0a      	ldr	r6, [pc, #40]	; (8005348 <__libc_init_array+0x40>)
 8005320:	4c0a      	ldr	r4, [pc, #40]	; (800534c <__libc_init_array+0x44>)
 8005322:	1ba4      	subs	r4, r4, r6
 8005324:	10a4      	asrs	r4, r4, #2
 8005326:	42a5      	cmp	r5, r4
 8005328:	d105      	bne.n	8005336 <__libc_init_array+0x2e>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005330:	4798      	blx	r3
 8005332:	3501      	adds	r5, #1
 8005334:	e7ee      	b.n	8005314 <__libc_init_array+0xc>
 8005336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800533a:	4798      	blx	r3
 800533c:	3501      	adds	r5, #1
 800533e:	e7f2      	b.n	8005326 <__libc_init_array+0x1e>
 8005340:	080077a8 	.word	0x080077a8
 8005344:	080077a8 	.word	0x080077a8
 8005348:	080077a8 	.word	0x080077a8
 800534c:	080077ac 	.word	0x080077ac

08005350 <siprintf>:
 8005350:	b40e      	push	{r1, r2, r3}
 8005352:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005356:	b500      	push	{lr}
 8005358:	b09c      	sub	sp, #112	; 0x70
 800535a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800535e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005362:	9104      	str	r1, [sp, #16]
 8005364:	9107      	str	r1, [sp, #28]
 8005366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800536a:	ab1d      	add	r3, sp, #116	; 0x74
 800536c:	9002      	str	r0, [sp, #8]
 800536e:	9006      	str	r0, [sp, #24]
 8005370:	4808      	ldr	r0, [pc, #32]	; (8005394 <siprintf+0x44>)
 8005372:	f853 2b04 	ldr.w	r2, [r3], #4
 8005376:	f8ad 1016 	strh.w	r1, [sp, #22]
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	a902      	add	r1, sp, #8
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	f000 f866 	bl	8005450 <_svfiprintf_r>
 8005384:	2200      	movs	r2, #0
 8005386:	9b02      	ldr	r3, [sp, #8]
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	b01c      	add	sp, #112	; 0x70
 800538c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005390:	b003      	add	sp, #12
 8005392:	4770      	bx	lr
 8005394:	200001c0 	.word	0x200001c0

08005398 <__ssputs_r>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	688e      	ldr	r6, [r1, #8]
 800539e:	4682      	mov	sl, r0
 80053a0:	429e      	cmp	r6, r3
 80053a2:	460c      	mov	r4, r1
 80053a4:	4691      	mov	r9, r2
 80053a6:	4698      	mov	r8, r3
 80053a8:	d835      	bhi.n	8005416 <__ssputs_r+0x7e>
 80053aa:	898a      	ldrh	r2, [r1, #12]
 80053ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053b0:	d031      	beq.n	8005416 <__ssputs_r+0x7e>
 80053b2:	2302      	movs	r3, #2
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	6909      	ldr	r1, [r1, #16]
 80053b8:	1a6f      	subs	r7, r5, r1
 80053ba:	6965      	ldr	r5, [r4, #20]
 80053bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80053c4:	f108 0301 	add.w	r3, r8, #1
 80053c8:	443b      	add	r3, r7
 80053ca:	429d      	cmp	r5, r3
 80053cc:	bf38      	it	cc
 80053ce:	461d      	movcc	r5, r3
 80053d0:	0553      	lsls	r3, r2, #21
 80053d2:	d531      	bpl.n	8005438 <__ssputs_r+0xa0>
 80053d4:	4629      	mov	r1, r5
 80053d6:	f000 fb47 	bl	8005a68 <_malloc_r>
 80053da:	4606      	mov	r6, r0
 80053dc:	b950      	cbnz	r0, 80053f4 <__ssputs_r+0x5c>
 80053de:	230c      	movs	r3, #12
 80053e0:	f8ca 3000 	str.w	r3, [sl]
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	463a      	mov	r2, r7
 80053f6:	6921      	ldr	r1, [r4, #16]
 80053f8:	f000 fac4 	bl	8005984 <memcpy>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	6126      	str	r6, [r4, #16]
 800540a:	443e      	add	r6, r7
 800540c:	6026      	str	r6, [r4, #0]
 800540e:	4646      	mov	r6, r8
 8005410:	6165      	str	r5, [r4, #20]
 8005412:	1bed      	subs	r5, r5, r7
 8005414:	60a5      	str	r5, [r4, #8]
 8005416:	4546      	cmp	r6, r8
 8005418:	bf28      	it	cs
 800541a:	4646      	movcs	r6, r8
 800541c:	4649      	mov	r1, r9
 800541e:	4632      	mov	r2, r6
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f000 faba 	bl	800599a <memmove>
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	2000      	movs	r0, #0
 800542a:	1b9b      	subs	r3, r3, r6
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	441e      	add	r6, r3
 8005432:	6026      	str	r6, [r4, #0]
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005438:	462a      	mov	r2, r5
 800543a:	f000 fb73 	bl	8005b24 <_realloc_r>
 800543e:	4606      	mov	r6, r0
 8005440:	2800      	cmp	r0, #0
 8005442:	d1e1      	bne.n	8005408 <__ssputs_r+0x70>
 8005444:	6921      	ldr	r1, [r4, #16]
 8005446:	4650      	mov	r0, sl
 8005448:	f000 fac2 	bl	80059d0 <_free_r>
 800544c:	e7c7      	b.n	80053de <__ssputs_r+0x46>
	...

08005450 <_svfiprintf_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	b09d      	sub	sp, #116	; 0x74
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	898b      	ldrh	r3, [r1, #12]
 800545a:	4680      	mov	r8, r0
 800545c:	061c      	lsls	r4, r3, #24
 800545e:	460d      	mov	r5, r1
 8005460:	4616      	mov	r6, r2
 8005462:	d50f      	bpl.n	8005484 <_svfiprintf_r+0x34>
 8005464:	690b      	ldr	r3, [r1, #16]
 8005466:	b96b      	cbnz	r3, 8005484 <_svfiprintf_r+0x34>
 8005468:	2140      	movs	r1, #64	; 0x40
 800546a:	f000 fafd 	bl	8005a68 <_malloc_r>
 800546e:	6028      	str	r0, [r5, #0]
 8005470:	6128      	str	r0, [r5, #16]
 8005472:	b928      	cbnz	r0, 8005480 <_svfiprintf_r+0x30>
 8005474:	230c      	movs	r3, #12
 8005476:	f8c8 3000 	str.w	r3, [r8]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	e0c4      	b.n	800560a <_svfiprintf_r+0x1ba>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	616b      	str	r3, [r5, #20]
 8005484:	2300      	movs	r3, #0
 8005486:	9309      	str	r3, [sp, #36]	; 0x24
 8005488:	2320      	movs	r3, #32
 800548a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800548e:	2330      	movs	r3, #48	; 0x30
 8005490:	f04f 0b01 	mov.w	fp, #1
 8005494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005498:	4637      	mov	r7, r6
 800549a:	463c      	mov	r4, r7
 800549c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d13c      	bne.n	800551e <_svfiprintf_r+0xce>
 80054a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80054a8:	d00b      	beq.n	80054c2 <_svfiprintf_r+0x72>
 80054aa:	4653      	mov	r3, sl
 80054ac:	4632      	mov	r2, r6
 80054ae:	4629      	mov	r1, r5
 80054b0:	4640      	mov	r0, r8
 80054b2:	f7ff ff71 	bl	8005398 <__ssputs_r>
 80054b6:	3001      	adds	r0, #1
 80054b8:	f000 80a2 	beq.w	8005600 <_svfiprintf_r+0x1b0>
 80054bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054be:	4453      	add	r3, sl
 80054c0:	9309      	str	r3, [sp, #36]	; 0x24
 80054c2:	783b      	ldrb	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 809b 	beq.w	8005600 <_svfiprintf_r+0x1b0>
 80054ca:	2300      	movs	r3, #0
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	9307      	str	r3, [sp, #28]
 80054d4:	9205      	str	r2, [sp, #20]
 80054d6:	9306      	str	r3, [sp, #24]
 80054d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054dc:	931a      	str	r3, [sp, #104]	; 0x68
 80054de:	2205      	movs	r2, #5
 80054e0:	7821      	ldrb	r1, [r4, #0]
 80054e2:	4850      	ldr	r0, [pc, #320]	; (8005624 <_svfiprintf_r+0x1d4>)
 80054e4:	f000 fa40 	bl	8005968 <memchr>
 80054e8:	1c67      	adds	r7, r4, #1
 80054ea:	9b04      	ldr	r3, [sp, #16]
 80054ec:	b9d8      	cbnz	r0, 8005526 <_svfiprintf_r+0xd6>
 80054ee:	06d9      	lsls	r1, r3, #27
 80054f0:	bf44      	itt	mi
 80054f2:	2220      	movmi	r2, #32
 80054f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054f8:	071a      	lsls	r2, r3, #28
 80054fa:	bf44      	itt	mi
 80054fc:	222b      	movmi	r2, #43	; 0x2b
 80054fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005502:	7822      	ldrb	r2, [r4, #0]
 8005504:	2a2a      	cmp	r2, #42	; 0x2a
 8005506:	d016      	beq.n	8005536 <_svfiprintf_r+0xe6>
 8005508:	2100      	movs	r1, #0
 800550a:	200a      	movs	r0, #10
 800550c:	9a07      	ldr	r2, [sp, #28]
 800550e:	4627      	mov	r7, r4
 8005510:	783b      	ldrb	r3, [r7, #0]
 8005512:	3401      	adds	r4, #1
 8005514:	3b30      	subs	r3, #48	; 0x30
 8005516:	2b09      	cmp	r3, #9
 8005518:	d950      	bls.n	80055bc <_svfiprintf_r+0x16c>
 800551a:	b1c9      	cbz	r1, 8005550 <_svfiprintf_r+0x100>
 800551c:	e011      	b.n	8005542 <_svfiprintf_r+0xf2>
 800551e:	2b25      	cmp	r3, #37	; 0x25
 8005520:	d0c0      	beq.n	80054a4 <_svfiprintf_r+0x54>
 8005522:	4627      	mov	r7, r4
 8005524:	e7b9      	b.n	800549a <_svfiprintf_r+0x4a>
 8005526:	4a3f      	ldr	r2, [pc, #252]	; (8005624 <_svfiprintf_r+0x1d4>)
 8005528:	463c      	mov	r4, r7
 800552a:	1a80      	subs	r0, r0, r2
 800552c:	fa0b f000 	lsl.w	r0, fp, r0
 8005530:	4318      	orrs	r0, r3
 8005532:	9004      	str	r0, [sp, #16]
 8005534:	e7d3      	b.n	80054de <_svfiprintf_r+0x8e>
 8005536:	9a03      	ldr	r2, [sp, #12]
 8005538:	1d11      	adds	r1, r2, #4
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	9103      	str	r1, [sp, #12]
 800553e:	2a00      	cmp	r2, #0
 8005540:	db01      	blt.n	8005546 <_svfiprintf_r+0xf6>
 8005542:	9207      	str	r2, [sp, #28]
 8005544:	e004      	b.n	8005550 <_svfiprintf_r+0x100>
 8005546:	4252      	negs	r2, r2
 8005548:	f043 0302 	orr.w	r3, r3, #2
 800554c:	9207      	str	r2, [sp, #28]
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	783b      	ldrb	r3, [r7, #0]
 8005552:	2b2e      	cmp	r3, #46	; 0x2e
 8005554:	d10d      	bne.n	8005572 <_svfiprintf_r+0x122>
 8005556:	787b      	ldrb	r3, [r7, #1]
 8005558:	1c79      	adds	r1, r7, #1
 800555a:	2b2a      	cmp	r3, #42	; 0x2a
 800555c:	d132      	bne.n	80055c4 <_svfiprintf_r+0x174>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	3702      	adds	r7, #2
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	9203      	str	r2, [sp, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	bfb8      	it	lt
 800556c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005570:	9305      	str	r3, [sp, #20]
 8005572:	4c2d      	ldr	r4, [pc, #180]	; (8005628 <_svfiprintf_r+0x1d8>)
 8005574:	2203      	movs	r2, #3
 8005576:	7839      	ldrb	r1, [r7, #0]
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f9f5 	bl	8005968 <memchr>
 800557e:	b138      	cbz	r0, 8005590 <_svfiprintf_r+0x140>
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	1b00      	subs	r0, r0, r4
 8005584:	fa03 f000 	lsl.w	r0, r3, r0
 8005588:	9b04      	ldr	r3, [sp, #16]
 800558a:	3701      	adds	r7, #1
 800558c:	4303      	orrs	r3, r0
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	7839      	ldrb	r1, [r7, #0]
 8005592:	2206      	movs	r2, #6
 8005594:	4825      	ldr	r0, [pc, #148]	; (800562c <_svfiprintf_r+0x1dc>)
 8005596:	1c7e      	adds	r6, r7, #1
 8005598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800559c:	f000 f9e4 	bl	8005968 <memchr>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d035      	beq.n	8005610 <_svfiprintf_r+0x1c0>
 80055a4:	4b22      	ldr	r3, [pc, #136]	; (8005630 <_svfiprintf_r+0x1e0>)
 80055a6:	b9fb      	cbnz	r3, 80055e8 <_svfiprintf_r+0x198>
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	3307      	adds	r3, #7
 80055ac:	f023 0307 	bic.w	r3, r3, #7
 80055b0:	3308      	adds	r3, #8
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	444b      	add	r3, r9
 80055b8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ba:	e76d      	b.n	8005498 <_svfiprintf_r+0x48>
 80055bc:	fb00 3202 	mla	r2, r0, r2, r3
 80055c0:	2101      	movs	r1, #1
 80055c2:	e7a4      	b.n	800550e <_svfiprintf_r+0xbe>
 80055c4:	2300      	movs	r3, #0
 80055c6:	240a      	movs	r4, #10
 80055c8:	4618      	mov	r0, r3
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	460f      	mov	r7, r1
 80055ce:	783a      	ldrb	r2, [r7, #0]
 80055d0:	3101      	adds	r1, #1
 80055d2:	3a30      	subs	r2, #48	; 0x30
 80055d4:	2a09      	cmp	r2, #9
 80055d6:	d903      	bls.n	80055e0 <_svfiprintf_r+0x190>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ca      	beq.n	8005572 <_svfiprintf_r+0x122>
 80055dc:	9005      	str	r0, [sp, #20]
 80055de:	e7c8      	b.n	8005572 <_svfiprintf_r+0x122>
 80055e0:	fb04 2000 	mla	r0, r4, r0, r2
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7f1      	b.n	80055cc <_svfiprintf_r+0x17c>
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <_svfiprintf_r+0x1e4>)
 80055f0:	a904      	add	r1, sp, #16
 80055f2:	4640      	mov	r0, r8
 80055f4:	f3af 8000 	nop.w
 80055f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80055fc:	4681      	mov	r9, r0
 80055fe:	d1d9      	bne.n	80055b4 <_svfiprintf_r+0x164>
 8005600:	89ab      	ldrh	r3, [r5, #12]
 8005602:	065b      	lsls	r3, r3, #25
 8005604:	f53f af39 	bmi.w	800547a <_svfiprintf_r+0x2a>
 8005608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800560a:	b01d      	add	sp, #116	; 0x74
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	ab03      	add	r3, sp, #12
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	462a      	mov	r2, r5
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <_svfiprintf_r+0x1e4>)
 8005618:	a904      	add	r1, sp, #16
 800561a:	4640      	mov	r0, r8
 800561c:	f000 f884 	bl	8005728 <_printf_i>
 8005620:	e7ea      	b.n	80055f8 <_svfiprintf_r+0x1a8>
 8005622:	bf00      	nop
 8005624:	080076e4 	.word	0x080076e4
 8005628:	080076ea 	.word	0x080076ea
 800562c:	080076ee 	.word	0x080076ee
 8005630:	00000000 	.word	0x00000000
 8005634:	08005399 	.word	0x08005399

08005638 <_printf_common>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	4691      	mov	r9, r2
 800563e:	461f      	mov	r7, r3
 8005640:	688a      	ldr	r2, [r1, #8]
 8005642:	690b      	ldr	r3, [r1, #16]
 8005644:	4606      	mov	r6, r0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfb8      	it	lt
 800564a:	4613      	movlt	r3, r2
 800564c:	f8c9 3000 	str.w	r3, [r9]
 8005650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005654:	460c      	mov	r4, r1
 8005656:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800565a:	b112      	cbz	r2, 8005662 <_printf_common+0x2a>
 800565c:	3301      	adds	r3, #1
 800565e:	f8c9 3000 	str.w	r3, [r9]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	0699      	lsls	r1, r3, #26
 8005666:	bf42      	ittt	mi
 8005668:	f8d9 3000 	ldrmi.w	r3, [r9]
 800566c:	3302      	addmi	r3, #2
 800566e:	f8c9 3000 	strmi.w	r3, [r9]
 8005672:	6825      	ldr	r5, [r4, #0]
 8005674:	f015 0506 	ands.w	r5, r5, #6
 8005678:	d107      	bne.n	800568a <_printf_common+0x52>
 800567a:	f104 0a19 	add.w	sl, r4, #25
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	f8d9 2000 	ldr.w	r2, [r9]
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	429d      	cmp	r5, r3
 8005688:	db2a      	blt.n	80056e0 <_printf_common+0xa8>
 800568a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	3300      	adds	r3, #0
 8005692:	bf18      	it	ne
 8005694:	2301      	movne	r3, #1
 8005696:	0692      	lsls	r2, r2, #26
 8005698:	d42f      	bmi.n	80056fa <_printf_common+0xc2>
 800569a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800569e:	4639      	mov	r1, r7
 80056a0:	4630      	mov	r0, r6
 80056a2:	47c0      	blx	r8
 80056a4:	3001      	adds	r0, #1
 80056a6:	d022      	beq.n	80056ee <_printf_common+0xb6>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	68e5      	ldr	r5, [r4, #12]
 80056ac:	f003 0306 	and.w	r3, r3, #6
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	bf18      	it	ne
 80056b4:	2500      	movne	r5, #0
 80056b6:	f8d9 2000 	ldr.w	r2, [r9]
 80056ba:	f04f 0900 	mov.w	r9, #0
 80056be:	bf08      	it	eq
 80056c0:	1aad      	subeq	r5, r5, r2
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	6922      	ldr	r2, [r4, #16]
 80056c6:	bf08      	it	eq
 80056c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056cc:	4293      	cmp	r3, r2
 80056ce:	bfc4      	itt	gt
 80056d0:	1a9b      	subgt	r3, r3, r2
 80056d2:	18ed      	addgt	r5, r5, r3
 80056d4:	341a      	adds	r4, #26
 80056d6:	454d      	cmp	r5, r9
 80056d8:	d11b      	bne.n	8005712 <_printf_common+0xda>
 80056da:	2000      	movs	r0, #0
 80056dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e0:	2301      	movs	r3, #1
 80056e2:	4652      	mov	r2, sl
 80056e4:	4639      	mov	r1, r7
 80056e6:	4630      	mov	r0, r6
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d103      	bne.n	80056f6 <_printf_common+0xbe>
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	3501      	adds	r5, #1
 80056f8:	e7c1      	b.n	800567e <_printf_common+0x46>
 80056fa:	2030      	movs	r0, #48	; 0x30
 80056fc:	18e1      	adds	r1, r4, r3
 80056fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005708:	4422      	add	r2, r4
 800570a:	3302      	adds	r3, #2
 800570c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005710:	e7c3      	b.n	800569a <_printf_common+0x62>
 8005712:	2301      	movs	r3, #1
 8005714:	4622      	mov	r2, r4
 8005716:	4639      	mov	r1, r7
 8005718:	4630      	mov	r0, r6
 800571a:	47c0      	blx	r8
 800571c:	3001      	adds	r0, #1
 800571e:	d0e6      	beq.n	80056ee <_printf_common+0xb6>
 8005720:	f109 0901 	add.w	r9, r9, #1
 8005724:	e7d7      	b.n	80056d6 <_printf_common+0x9e>
	...

08005728 <_printf_i>:
 8005728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800572c:	4617      	mov	r7, r2
 800572e:	7e0a      	ldrb	r2, [r1, #24]
 8005730:	b085      	sub	sp, #20
 8005732:	2a6e      	cmp	r2, #110	; 0x6e
 8005734:	4698      	mov	r8, r3
 8005736:	4606      	mov	r6, r0
 8005738:	460c      	mov	r4, r1
 800573a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800573c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005740:	f000 80bc 	beq.w	80058bc <_printf_i+0x194>
 8005744:	d81a      	bhi.n	800577c <_printf_i+0x54>
 8005746:	2a63      	cmp	r2, #99	; 0x63
 8005748:	d02e      	beq.n	80057a8 <_printf_i+0x80>
 800574a:	d80a      	bhi.n	8005762 <_printf_i+0x3a>
 800574c:	2a00      	cmp	r2, #0
 800574e:	f000 80c8 	beq.w	80058e2 <_printf_i+0x1ba>
 8005752:	2a58      	cmp	r2, #88	; 0x58
 8005754:	f000 808a 	beq.w	800586c <_printf_i+0x144>
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005760:	e02a      	b.n	80057b8 <_printf_i+0x90>
 8005762:	2a64      	cmp	r2, #100	; 0x64
 8005764:	d001      	beq.n	800576a <_printf_i+0x42>
 8005766:	2a69      	cmp	r2, #105	; 0x69
 8005768:	d1f6      	bne.n	8005758 <_printf_i+0x30>
 800576a:	6821      	ldr	r1, [r4, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005772:	d023      	beq.n	80057bc <_printf_i+0x94>
 8005774:	1d11      	adds	r1, r2, #4
 8005776:	6019      	str	r1, [r3, #0]
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	e027      	b.n	80057cc <_printf_i+0xa4>
 800577c:	2a73      	cmp	r2, #115	; 0x73
 800577e:	f000 80b4 	beq.w	80058ea <_printf_i+0x1c2>
 8005782:	d808      	bhi.n	8005796 <_printf_i+0x6e>
 8005784:	2a6f      	cmp	r2, #111	; 0x6f
 8005786:	d02a      	beq.n	80057de <_printf_i+0xb6>
 8005788:	2a70      	cmp	r2, #112	; 0x70
 800578a:	d1e5      	bne.n	8005758 <_printf_i+0x30>
 800578c:	680a      	ldr	r2, [r1, #0]
 800578e:	f042 0220 	orr.w	r2, r2, #32
 8005792:	600a      	str	r2, [r1, #0]
 8005794:	e003      	b.n	800579e <_printf_i+0x76>
 8005796:	2a75      	cmp	r2, #117	; 0x75
 8005798:	d021      	beq.n	80057de <_printf_i+0xb6>
 800579a:	2a78      	cmp	r2, #120	; 0x78
 800579c:	d1dc      	bne.n	8005758 <_printf_i+0x30>
 800579e:	2278      	movs	r2, #120	; 0x78
 80057a0:	496f      	ldr	r1, [pc, #444]	; (8005960 <_printf_i+0x238>)
 80057a2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80057a6:	e064      	b.n	8005872 <_printf_i+0x14a>
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80057ae:	1d11      	adds	r1, r2, #4
 80057b0:	6019      	str	r1, [r3, #0]
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0a3      	b.n	8005904 <_printf_i+0x1dc>
 80057bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80057c0:	f102 0104 	add.w	r1, r2, #4
 80057c4:	6019      	str	r1, [r3, #0]
 80057c6:	d0d7      	beq.n	8005778 <_printf_i+0x50>
 80057c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da03      	bge.n	80057d8 <_printf_i+0xb0>
 80057d0:	222d      	movs	r2, #45	; 0x2d
 80057d2:	425b      	negs	r3, r3
 80057d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057d8:	4962      	ldr	r1, [pc, #392]	; (8005964 <_printf_i+0x23c>)
 80057da:	220a      	movs	r2, #10
 80057dc:	e017      	b.n	800580e <_printf_i+0xe6>
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057e6:	d003      	beq.n	80057f0 <_printf_i+0xc8>
 80057e8:	1d08      	adds	r0, r1, #4
 80057ea:	6018      	str	r0, [r3, #0]
 80057ec:	680b      	ldr	r3, [r1, #0]
 80057ee:	e006      	b.n	80057fe <_printf_i+0xd6>
 80057f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057f4:	f101 0004 	add.w	r0, r1, #4
 80057f8:	6018      	str	r0, [r3, #0]
 80057fa:	d0f7      	beq.n	80057ec <_printf_i+0xc4>
 80057fc:	880b      	ldrh	r3, [r1, #0]
 80057fe:	2a6f      	cmp	r2, #111	; 0x6f
 8005800:	bf14      	ite	ne
 8005802:	220a      	movne	r2, #10
 8005804:	2208      	moveq	r2, #8
 8005806:	4957      	ldr	r1, [pc, #348]	; (8005964 <_printf_i+0x23c>)
 8005808:	2000      	movs	r0, #0
 800580a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800580e:	6865      	ldr	r5, [r4, #4]
 8005810:	2d00      	cmp	r5, #0
 8005812:	60a5      	str	r5, [r4, #8]
 8005814:	f2c0 809c 	blt.w	8005950 <_printf_i+0x228>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	f020 0004 	bic.w	r0, r0, #4
 800581e:	6020      	str	r0, [r4, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d13f      	bne.n	80058a4 <_printf_i+0x17c>
 8005824:	2d00      	cmp	r5, #0
 8005826:	f040 8095 	bne.w	8005954 <_printf_i+0x22c>
 800582a:	4675      	mov	r5, lr
 800582c:	2a08      	cmp	r2, #8
 800582e:	d10b      	bne.n	8005848 <_printf_i+0x120>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07da      	lsls	r2, r3, #31
 8005834:	d508      	bpl.n	8005848 <_printf_i+0x120>
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6862      	ldr	r2, [r4, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	bfde      	ittt	le
 800583e:	2330      	movle	r3, #48	; 0x30
 8005840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005848:	ebae 0305 	sub.w	r3, lr, r5
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	f8cd 8000 	str.w	r8, [sp]
 8005852:	463b      	mov	r3, r7
 8005854:	aa03      	add	r2, sp, #12
 8005856:	4621      	mov	r1, r4
 8005858:	4630      	mov	r0, r6
 800585a:	f7ff feed 	bl	8005638 <_printf_common>
 800585e:	3001      	adds	r0, #1
 8005860:	d155      	bne.n	800590e <_printf_i+0x1e6>
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	b005      	add	sp, #20
 8005868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800586c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005870:	493c      	ldr	r1, [pc, #240]	; (8005964 <_printf_i+0x23c>)
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f012 0f80 	tst.w	r2, #128	; 0x80
 800587a:	f100 0504 	add.w	r5, r0, #4
 800587e:	601d      	str	r5, [r3, #0]
 8005880:	d001      	beq.n	8005886 <_printf_i+0x15e>
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	e002      	b.n	800588c <_printf_i+0x164>
 8005886:	0655      	lsls	r5, r2, #25
 8005888:	d5fb      	bpl.n	8005882 <_printf_i+0x15a>
 800588a:	8803      	ldrh	r3, [r0, #0]
 800588c:	07d0      	lsls	r0, r2, #31
 800588e:	bf44      	itt	mi
 8005890:	f042 0220 	orrmi.w	r2, r2, #32
 8005894:	6022      	strmi	r2, [r4, #0]
 8005896:	b91b      	cbnz	r3, 80058a0 <_printf_i+0x178>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	f022 0220 	bic.w	r2, r2, #32
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	2210      	movs	r2, #16
 80058a2:	e7b1      	b.n	8005808 <_printf_i+0xe0>
 80058a4:	4675      	mov	r5, lr
 80058a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80058aa:	fb02 3310 	mls	r3, r2, r0, r3
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058b4:	4603      	mov	r3, r0
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d1f5      	bne.n	80058a6 <_printf_i+0x17e>
 80058ba:	e7b7      	b.n	800582c <_printf_i+0x104>
 80058bc:	6808      	ldr	r0, [r1, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058c4:	6949      	ldr	r1, [r1, #20]
 80058c6:	d004      	beq.n	80058d2 <_printf_i+0x1aa>
 80058c8:	1d10      	adds	r0, r2, #4
 80058ca:	6018      	str	r0, [r3, #0]
 80058cc:	6813      	ldr	r3, [r2, #0]
 80058ce:	6019      	str	r1, [r3, #0]
 80058d0:	e007      	b.n	80058e2 <_printf_i+0x1ba>
 80058d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058d6:	f102 0004 	add.w	r0, r2, #4
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	d0f6      	beq.n	80058ce <_printf_i+0x1a6>
 80058e0:	8019      	strh	r1, [r3, #0]
 80058e2:	2300      	movs	r3, #0
 80058e4:	4675      	mov	r5, lr
 80058e6:	6123      	str	r3, [r4, #16]
 80058e8:	e7b1      	b.n	800584e <_printf_i+0x126>
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	1d11      	adds	r1, r2, #4
 80058ee:	6019      	str	r1, [r3, #0]
 80058f0:	6815      	ldr	r5, [r2, #0]
 80058f2:	2100      	movs	r1, #0
 80058f4:	6862      	ldr	r2, [r4, #4]
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f836 	bl	8005968 <memchr>
 80058fc:	b108      	cbz	r0, 8005902 <_printf_i+0x1da>
 80058fe:	1b40      	subs	r0, r0, r5
 8005900:	6060      	str	r0, [r4, #4]
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	2300      	movs	r3, #0
 8005908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590c:	e79f      	b.n	800584e <_printf_i+0x126>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	462a      	mov	r2, r5
 8005912:	4639      	mov	r1, r7
 8005914:	4630      	mov	r0, r6
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d0a2      	beq.n	8005862 <_printf_i+0x13a>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	079b      	lsls	r3, r3, #30
 8005920:	d507      	bpl.n	8005932 <_printf_i+0x20a>
 8005922:	2500      	movs	r5, #0
 8005924:	f104 0919 	add.w	r9, r4, #25
 8005928:	68e3      	ldr	r3, [r4, #12]
 800592a:	9a03      	ldr	r2, [sp, #12]
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	429d      	cmp	r5, r3
 8005930:	db05      	blt.n	800593e <_printf_i+0x216>
 8005932:	68e0      	ldr	r0, [r4, #12]
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	4298      	cmp	r0, r3
 8005938:	bfb8      	it	lt
 800593a:	4618      	movlt	r0, r3
 800593c:	e793      	b.n	8005866 <_printf_i+0x13e>
 800593e:	2301      	movs	r3, #1
 8005940:	464a      	mov	r2, r9
 8005942:	4639      	mov	r1, r7
 8005944:	4630      	mov	r0, r6
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d08a      	beq.n	8005862 <_printf_i+0x13a>
 800594c:	3501      	adds	r5, #1
 800594e:	e7eb      	b.n	8005928 <_printf_i+0x200>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1a7      	bne.n	80058a4 <_printf_i+0x17c>
 8005954:	780b      	ldrb	r3, [r1, #0]
 8005956:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800595a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800595e:	e765      	b.n	800582c <_printf_i+0x104>
 8005960:	08007706 	.word	0x08007706
 8005964:	080076f5 	.word	0x080076f5

08005968 <memchr>:
 8005968:	b510      	push	{r4, lr}
 800596a:	b2c9      	uxtb	r1, r1
 800596c:	4402      	add	r2, r0
 800596e:	4290      	cmp	r0, r2
 8005970:	4603      	mov	r3, r0
 8005972:	d101      	bne.n	8005978 <memchr+0x10>
 8005974:	2000      	movs	r0, #0
 8005976:	bd10      	pop	{r4, pc}
 8005978:	781c      	ldrb	r4, [r3, #0]
 800597a:	3001      	adds	r0, #1
 800597c:	428c      	cmp	r4, r1
 800597e:	d1f6      	bne.n	800596e <memchr+0x6>
 8005980:	4618      	mov	r0, r3
 8005982:	bd10      	pop	{r4, pc}

08005984 <memcpy>:
 8005984:	b510      	push	{r4, lr}
 8005986:	1e43      	subs	r3, r0, #1
 8005988:	440a      	add	r2, r1
 800598a:	4291      	cmp	r1, r2
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	bd10      	pop	{r4, pc}
 8005990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005998:	e7f7      	b.n	800598a <memcpy+0x6>

0800599a <memmove>:
 800599a:	4288      	cmp	r0, r1
 800599c:	b510      	push	{r4, lr}
 800599e:	eb01 0302 	add.w	r3, r1, r2
 80059a2:	d803      	bhi.n	80059ac <memmove+0x12>
 80059a4:	1e42      	subs	r2, r0, #1
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d10c      	bne.n	80059c4 <memmove+0x2a>
 80059aa:	bd10      	pop	{r4, pc}
 80059ac:	4298      	cmp	r0, r3
 80059ae:	d2f9      	bcs.n	80059a4 <memmove+0xa>
 80059b0:	1881      	adds	r1, r0, r2
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	42d3      	cmn	r3, r2
 80059b6:	d100      	bne.n	80059ba <memmove+0x20>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80059c2:	e7f7      	b.n	80059b4 <memmove+0x1a>
 80059c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80059cc:	e7eb      	b.n	80059a6 <memmove+0xc>
	...

080059d0 <_free_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4605      	mov	r5, r0
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d043      	beq.n	8005a60 <_free_r+0x90>
 80059d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059dc:	1f0c      	subs	r4, r1, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfb8      	it	lt
 80059e2:	18e4      	addlt	r4, r4, r3
 80059e4:	f000 f8d4 	bl	8005b90 <__malloc_lock>
 80059e8:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <_free_r+0x94>)
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	4610      	mov	r0, r2
 80059ee:	b933      	cbnz	r3, 80059fe <_free_r+0x2e>
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	6014      	str	r4, [r2, #0]
 80059f4:	4628      	mov	r0, r5
 80059f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fa:	f000 b8ca 	b.w	8005b92 <__malloc_unlock>
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d90b      	bls.n	8005a1a <_free_r+0x4a>
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	1862      	adds	r2, r4, r1
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bf01      	itttt	eq
 8005a0a:	681a      	ldreq	r2, [r3, #0]
 8005a0c:	685b      	ldreq	r3, [r3, #4]
 8005a0e:	1852      	addeq	r2, r2, r1
 8005a10:	6022      	streq	r2, [r4, #0]
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	6004      	str	r4, [r0, #0]
 8005a16:	e7ed      	b.n	80059f4 <_free_r+0x24>
 8005a18:	4613      	mov	r3, r2
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	b10a      	cbz	r2, 8005a22 <_free_r+0x52>
 8005a1e:	42a2      	cmp	r2, r4
 8005a20:	d9fa      	bls.n	8005a18 <_free_r+0x48>
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	1858      	adds	r0, r3, r1
 8005a26:	42a0      	cmp	r0, r4
 8005a28:	d10b      	bne.n	8005a42 <_free_r+0x72>
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	4401      	add	r1, r0
 8005a2e:	1858      	adds	r0, r3, r1
 8005a30:	4282      	cmp	r2, r0
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	d1de      	bne.n	80059f4 <_free_r+0x24>
 8005a36:	6810      	ldr	r0, [r2, #0]
 8005a38:	6852      	ldr	r2, [r2, #4]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	6019      	str	r1, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e7d8      	b.n	80059f4 <_free_r+0x24>
 8005a42:	d902      	bls.n	8005a4a <_free_r+0x7a>
 8005a44:	230c      	movs	r3, #12
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	e7d4      	b.n	80059f4 <_free_r+0x24>
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1821      	adds	r1, r4, r0
 8005a4e:	428a      	cmp	r2, r1
 8005a50:	bf01      	itttt	eq
 8005a52:	6811      	ldreq	r1, [r2, #0]
 8005a54:	6852      	ldreq	r2, [r2, #4]
 8005a56:	1809      	addeq	r1, r1, r0
 8005a58:	6021      	streq	r1, [r4, #0]
 8005a5a:	6062      	str	r2, [r4, #4]
 8005a5c:	605c      	str	r4, [r3, #4]
 8005a5e:	e7c9      	b.n	80059f4 <_free_r+0x24>
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	bf00      	nop
 8005a64:	200002a8 	.word	0x200002a8

08005a68 <_malloc_r>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	1ccd      	adds	r5, r1, #3
 8005a6c:	f025 0503 	bic.w	r5, r5, #3
 8005a70:	3508      	adds	r5, #8
 8005a72:	2d0c      	cmp	r5, #12
 8005a74:	bf38      	it	cc
 8005a76:	250c      	movcc	r5, #12
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	db01      	blt.n	8005a82 <_malloc_r+0x1a>
 8005a7e:	42a9      	cmp	r1, r5
 8005a80:	d903      	bls.n	8005a8a <_malloc_r+0x22>
 8005a82:	230c      	movs	r3, #12
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	2000      	movs	r0, #0
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	f000 f881 	bl	8005b90 <__malloc_lock>
 8005a8e:	4a23      	ldr	r2, [pc, #140]	; (8005b1c <_malloc_r+0xb4>)
 8005a90:	6814      	ldr	r4, [r2, #0]
 8005a92:	4621      	mov	r1, r4
 8005a94:	b991      	cbnz	r1, 8005abc <_malloc_r+0x54>
 8005a96:	4c22      	ldr	r4, [pc, #136]	; (8005b20 <_malloc_r+0xb8>)
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	b91b      	cbnz	r3, 8005aa4 <_malloc_r+0x3c>
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f867 	bl	8005b70 <_sbrk_r>
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f000 f862 	bl	8005b70 <_sbrk_r>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d126      	bne.n	8005afe <_malloc_r+0x96>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	f000 f86c 	bl	8005b92 <__malloc_unlock>
 8005aba:	e7e4      	b.n	8005a86 <_malloc_r+0x1e>
 8005abc:	680b      	ldr	r3, [r1, #0]
 8005abe:	1b5b      	subs	r3, r3, r5
 8005ac0:	d41a      	bmi.n	8005af8 <_malloc_r+0x90>
 8005ac2:	2b0b      	cmp	r3, #11
 8005ac4:	d90f      	bls.n	8005ae6 <_malloc_r+0x7e>
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	18cc      	adds	r4, r1, r3
 8005aca:	50cd      	str	r5, [r1, r3]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f860 	bl	8005b92 <__malloc_unlock>
 8005ad2:	f104 000b 	add.w	r0, r4, #11
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	f020 0007 	bic.w	r0, r0, #7
 8005adc:	1ac3      	subs	r3, r0, r3
 8005ade:	d01b      	beq.n	8005b18 <_malloc_r+0xb0>
 8005ae0:	425a      	negs	r2, r3
 8005ae2:	50e2      	str	r2, [r4, r3]
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
 8005ae6:	428c      	cmp	r4, r1
 8005ae8:	bf0b      	itete	eq
 8005aea:	6863      	ldreq	r3, [r4, #4]
 8005aec:	684b      	ldrne	r3, [r1, #4]
 8005aee:	6013      	streq	r3, [r2, #0]
 8005af0:	6063      	strne	r3, [r4, #4]
 8005af2:	bf18      	it	ne
 8005af4:	460c      	movne	r4, r1
 8005af6:	e7e9      	b.n	8005acc <_malloc_r+0x64>
 8005af8:	460c      	mov	r4, r1
 8005afa:	6849      	ldr	r1, [r1, #4]
 8005afc:	e7ca      	b.n	8005a94 <_malloc_r+0x2c>
 8005afe:	1cc4      	adds	r4, r0, #3
 8005b00:	f024 0403 	bic.w	r4, r4, #3
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d005      	beq.n	8005b14 <_malloc_r+0xac>
 8005b08:	1a21      	subs	r1, r4, r0
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f000 f830 	bl	8005b70 <_sbrk_r>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d0cd      	beq.n	8005ab0 <_malloc_r+0x48>
 8005b14:	6025      	str	r5, [r4, #0]
 8005b16:	e7d9      	b.n	8005acc <_malloc_r+0x64>
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200002a8 	.word	0x200002a8
 8005b20:	200002ac 	.word	0x200002ac

08005b24 <_realloc_r>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	4607      	mov	r7, r0
 8005b28:	4614      	mov	r4, r2
 8005b2a:	460e      	mov	r6, r1
 8005b2c:	b921      	cbnz	r1, 8005b38 <_realloc_r+0x14>
 8005b2e:	4611      	mov	r1, r2
 8005b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b34:	f7ff bf98 	b.w	8005a68 <_malloc_r>
 8005b38:	b922      	cbnz	r2, 8005b44 <_realloc_r+0x20>
 8005b3a:	f7ff ff49 	bl	80059d0 <_free_r>
 8005b3e:	4625      	mov	r5, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b44:	f000 f826 	bl	8005b94 <_malloc_usable_size_r>
 8005b48:	4284      	cmp	r4, r0
 8005b4a:	d90f      	bls.n	8005b6c <_realloc_r+0x48>
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7ff ff8a 	bl	8005a68 <_malloc_r>
 8005b54:	4605      	mov	r5, r0
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0f2      	beq.n	8005b40 <_realloc_r+0x1c>
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	f7ff ff11 	bl	8005984 <memcpy>
 8005b62:	4631      	mov	r1, r6
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ff33 	bl	80059d0 <_free_r>
 8005b6a:	e7e9      	b.n	8005b40 <_realloc_r+0x1c>
 8005b6c:	4635      	mov	r5, r6
 8005b6e:	e7e7      	b.n	8005b40 <_realloc_r+0x1c>

08005b70 <_sbrk_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	2300      	movs	r3, #0
 8005b74:	4c05      	ldr	r4, [pc, #20]	; (8005b8c <_sbrk_r+0x1c>)
 8005b76:	4605      	mov	r5, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	f001 fd48 	bl	8007610 <_sbrk>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_sbrk_r+0x1a>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_sbrk_r+0x1a>
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	20001718 	.word	0x20001718

08005b90 <__malloc_lock>:
 8005b90:	4770      	bx	lr

08005b92 <__malloc_unlock>:
 8005b92:	4770      	bx	lr

08005b94 <_malloc_usable_size_r>:
 8005b94:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f1a0 0004 	sub.w	r0, r0, #4
 8005b9e:	bfbc      	itt	lt
 8005ba0:	580b      	ldrlt	r3, [r1, r0]
 8005ba2:	18c0      	addlt	r0, r0, r3
 8005ba4:	4770      	bx	lr
	...

08005ba8 <asin>:
 8005ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bac:	b08b      	sub	sp, #44	; 0x2c
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	f000 fa09 	bl	8005fc8 <__ieee754_asin>
 8005bb6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005c4c <asin+0xa4>
 8005bba:	4606      	mov	r6, r0
 8005bbc:	f998 3000 	ldrsb.w	r3, [r8]
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	d036      	beq.n	8005c34 <asin+0x8c>
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa ff19 	bl	8000a04 <__aeabi_dcmpun>
 8005bd2:	4681      	mov	r9, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d12d      	bne.n	8005c34 <asin+0x8c>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	f001 fc02 	bl	80073e4 <fabs>
 8005be0:	2200      	movs	r2, #0
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <asin+0x98>)
 8005be4:	f7fa ff04 	bl	80009f0 <__aeabi_dcmpgt>
 8005be8:	b320      	cbz	r0, 8005c34 <asin+0x8c>
 8005bea:	2301      	movs	r3, #1
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <asin+0x9c>)
 8005bf0:	4815      	ldr	r0, [pc, #84]	; (8005c48 <asin+0xa0>)
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005bf8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005bfc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c00:	f001 fbfc 	bl	80073fc <nan>
 8005c04:	f998 3000 	ldrsb.w	r3, [r8]
 8005c08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d104      	bne.n	8005c1a <asin+0x72>
 8005c10:	f001 fcf8 	bl	8007604 <__errno>
 8005c14:	2321      	movs	r3, #33	; 0x21
 8005c16:	6003      	str	r3, [r0, #0]
 8005c18:	e004      	b.n	8005c24 <asin+0x7c>
 8005c1a:	4668      	mov	r0, sp
 8005c1c:	f001 fbeb 	bl	80073f6 <matherr>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0f5      	beq.n	8005c10 <asin+0x68>
 8005c24:	9b08      	ldr	r3, [sp, #32]
 8005c26:	b11b      	cbz	r3, 8005c30 <asin+0x88>
 8005c28:	f001 fcec 	bl	8007604 <__errno>
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	6003      	str	r3, [r0, #0]
 8005c30:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	b00b      	add	sp, #44	; 0x2c
 8005c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c3e:	bf00      	nop
 8005c40:	3ff00000 	.word	0x3ff00000
 8005c44:	08007717 	.word	0x08007717
 8005c48:	080076e9 	.word	0x080076e9
 8005c4c:	20000224 	.word	0x20000224

08005c50 <atan2>:
 8005c50:	f000 bbba 	b.w	80063c8 <__ieee754_atan2>

08005c54 <pow>:
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	b08f      	sub	sp, #60	; 0x3c
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	f000 fc8d 	bl	8006580 <__ieee754_pow>
 8005c66:	4fa5      	ldr	r7, [pc, #660]	; (8005efc <pow+0x2a8>)
 8005c68:	e9cd 0100 	strd	r0, r1, [sp]
 8005c6c:	f997 3000 	ldrsb.w	r3, [r7]
 8005c70:	463e      	mov	r6, r7
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	d05f      	beq.n	8005d38 <pow+0xe4>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa fec0 	bl	8000a04 <__aeabi_dcmpun>
 8005c84:	4682      	mov	sl, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d156      	bne.n	8005d38 <pow+0xe4>
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4640      	mov	r0, r8
 8005c90:	4649      	mov	r1, r9
 8005c92:	f7fa feb7 	bl	8000a04 <__aeabi_dcmpun>
 8005c96:	9003      	str	r0, [sp, #12]
 8005c98:	b1e8      	cbz	r0, 8005cd6 <pow+0x82>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa fe7d 	bl	80009a0 <__aeabi_dcmpeq>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d046      	beq.n	8005d38 <pow+0xe4>
 8005caa:	2301      	movs	r3, #1
 8005cac:	2200      	movs	r2, #0
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	4b93      	ldr	r3, [pc, #588]	; (8005f00 <pow+0x2ac>)
 8005cb2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	4b92      	ldr	r3, [pc, #584]	; (8005f04 <pow+0x2b0>)
 8005cba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005cbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cc2:	9b02      	ldr	r3, [sp, #8]
 8005cc4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d031      	beq.n	8005d30 <pow+0xdc>
 8005ccc:	a804      	add	r0, sp, #16
 8005cce:	f001 fb92 	bl	80073f6 <matherr>
 8005cd2:	bb38      	cbnz	r0, 8005d24 <pow+0xd0>
 8005cd4:	e058      	b.n	8005d88 <pow+0x134>
 8005cd6:	f04f 0a00 	mov.w	sl, #0
 8005cda:	f04f 0b00 	mov.w	fp, #0
 8005cde:	4652      	mov	r2, sl
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	f7fa fe5b 	bl	80009a0 <__aeabi_dcmpeq>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d051      	beq.n	8005d92 <pow+0x13e>
 8005cee:	4652      	mov	r2, sl
 8005cf0:	465b      	mov	r3, fp
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	f7fa fe53 	bl	80009a0 <__aeabi_dcmpeq>
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	b308      	cbz	r0, 8005d42 <pow+0xee>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	4b7f      	ldr	r3, [pc, #508]	; (8005f00 <pow+0x2ac>)
 8005d04:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d08:	9305      	str	r3, [sp, #20]
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d10:	930c      	str	r3, [sp, #48]	; 0x30
 8005d12:	9b02      	ldr	r3, [sp, #8]
 8005d14:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0d7      	beq.n	8005ccc <pow+0x78>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4b79      	ldr	r3, [pc, #484]	; (8005f04 <pow+0x2b0>)
 8005d20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d26:	b11b      	cbz	r3, 8005d30 <pow+0xdc>
 8005d28:	f001 fc6c 	bl	8007604 <__errno>
 8005d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d2e:	6003      	str	r3, [r0, #0]
 8005d30:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005d34:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d3c:	b00f      	add	sp, #60	; 0x3c
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f001 fb50 	bl	80073ea <finite>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0f4      	beq.n	8005d38 <pow+0xe4>
 8005d4e:	4652      	mov	r2, sl
 8005d50:	465b      	mov	r3, fp
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fe2d 	bl	80009b4 <__aeabi_dcmplt>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0ec      	beq.n	8005d38 <pow+0xe4>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <pow+0x2ac>)
 8005d64:	960c      	str	r6, [sp, #48]	; 0x30
 8005d66:	9305      	str	r3, [sp, #20]
 8005d68:	f997 3000 	ldrsb.w	r3, [r7]
 8005d6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d70:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d74:	b913      	cbnz	r3, 8005d7c <pow+0x128>
 8005d76:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005d7a:	e7a7      	b.n	8005ccc <pow+0x78>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	4962      	ldr	r1, [pc, #392]	; (8005f08 <pow+0x2b4>)
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d86:	d1a1      	bne.n	8005ccc <pow+0x78>
 8005d88:	f001 fc3c 	bl	8007604 <__errno>
 8005d8c:	2321      	movs	r3, #33	; 0x21
 8005d8e:	6003      	str	r3, [r0, #0]
 8005d90:	e7c8      	b.n	8005d24 <pow+0xd0>
 8005d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d96:	f001 fb28 	bl	80073ea <finite>
 8005d9a:	9002      	str	r0, [sp, #8]
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d17f      	bne.n	8005ea0 <pow+0x24c>
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	f001 fb21 	bl	80073ea <finite>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d079      	beq.n	8005ea0 <pow+0x24c>
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f001 fb1b 	bl	80073ea <finite>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d073      	beq.n	8005ea0 <pow+0x24c>
 8005db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f7fa fe20 	bl	8000a04 <__aeabi_dcmpun>
 8005dc4:	f997 7000 	ldrsb.w	r7, [r7]
 8005dc8:	4b4d      	ldr	r3, [pc, #308]	; (8005f00 <pow+0x2ac>)
 8005dca:	b1a0      	cbz	r0, 8005df6 <pow+0x1a2>
 8005dcc:	2201      	movs	r2, #1
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	9204      	str	r2, [sp, #16]
 8005dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8005dd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005dda:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d0c9      	beq.n	8005d76 <pow+0x122>
 8005de2:	4652      	mov	r2, sl
 8005de4:	465b      	mov	r3, fp
 8005de6:	4650      	mov	r0, sl
 8005de8:	4659      	mov	r1, fp
 8005dea:	f7fa fc9b 	bl	8000724 <__aeabi_ddiv>
 8005dee:	2f02      	cmp	r7, #2
 8005df0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005df4:	e7c7      	b.n	8005d86 <pow+0x132>
 8005df6:	2203      	movs	r2, #3
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	9204      	str	r2, [sp, #16]
 8005dfc:	900c      	str	r0, [sp, #48]	; 0x30
 8005dfe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005e02:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005e06:	bb57      	cbnz	r7, 8005e5e <pow+0x20a>
 8005e08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <pow+0x2b8>)
 8005e0e:	4640      	mov	r0, r8
 8005e10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e14:	4649      	mov	r1, r9
 8005e16:	4652      	mov	r2, sl
 8005e18:	465b      	mov	r3, fp
 8005e1a:	f7fa fdcb 	bl	80009b4 <__aeabi_dcmplt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d064      	beq.n	8005eec <pow+0x298>
 8005e22:	2200      	movs	r2, #0
 8005e24:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <pow+0x2bc>)
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fb51 	bl	80004d0 <__aeabi_dmul>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	f001 fae9 	bl	8007408 <rint>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f7fa fdaf 	bl	80009a0 <__aeabi_dcmpeq>
 8005e42:	b920      	cbnz	r0, 8005e4e <pow+0x1fa>
 8005e44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <pow+0x2c0>)
 8005e4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e4e:	f996 3000 	ldrsb.w	r3, [r6]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d14a      	bne.n	8005eec <pow+0x298>
 8005e56:	f001 fbd5 	bl	8007604 <__errno>
 8005e5a:	2322      	movs	r3, #34	; 0x22
 8005e5c:	e797      	b.n	8005d8e <pow+0x13a>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <pow+0x2c4>)
 8005e62:	4640      	mov	r0, r8
 8005e64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	465b      	mov	r3, fp
 8005e6e:	f7fa fda1 	bl	80009b4 <__aeabi_dcmplt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0eb      	beq.n	8005e4e <pow+0x1fa>
 8005e76:	2200      	movs	r2, #0
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <pow+0x2bc>)
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa fb27 	bl	80004d0 <__aeabi_dmul>
 8005e82:	4604      	mov	r4, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	f001 fabf 	bl	8007408 <rint>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fa fd85 	bl	80009a0 <__aeabi_dcmpeq>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d1d9      	bne.n	8005e4e <pow+0x1fa>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <pow+0x2b4>)
 8005e9e:	e7d4      	b.n	8005e4a <pow+0x1f6>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f7fa fd7a 	bl	80009a0 <__aeabi_dcmpeq>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f43f af43 	beq.w	8005d38 <pow+0xe4>
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	f001 fa98 	bl	80073ea <finite>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f43f af3c 	beq.w	8005d38 <pow+0xe4>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f001 fa91 	bl	80073ea <finite>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f43f af35 	beq.w	8005d38 <pow+0xe4>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <pow+0x2ac>)
 8005ed4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	2300      	movs	r3, #0
 8005edc:	2400      	movs	r4, #0
 8005ede:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005ee6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005eea:	e7b0      	b.n	8005e4e <pow+0x1fa>
 8005eec:	a804      	add	r0, sp, #16
 8005eee:	f001 fa82 	bl	80073f6 <matherr>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f47f af16 	bne.w	8005d24 <pow+0xd0>
 8005ef8:	e7ad      	b.n	8005e56 <pow+0x202>
 8005efa:	bf00      	nop
 8005efc:	20000224 	.word	0x20000224
 8005f00:	0800771c 	.word	0x0800771c
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	fff00000 	.word	0xfff00000
 8005f0c:	47efffff 	.word	0x47efffff
 8005f10:	3fe00000 	.word	0x3fe00000
 8005f14:	c7efffff 	.word	0xc7efffff
 8005f18:	7ff00000 	.word	0x7ff00000

08005f1c <sqrt>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	b08b      	sub	sp, #44	; 0x2c
 8005f22:	4604      	mov	r4, r0
 8005f24:	460d      	mov	r5, r1
 8005f26:	f001 f81d 	bl	8006f64 <__ieee754_sqrt>
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <sqrt+0xa0>)
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	f993 a000 	ldrsb.w	sl, [r3]
 8005f32:	4689      	mov	r9, r1
 8005f34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f38:	d02b      	beq.n	8005f92 <sqrt+0x76>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	f7fa fd5f 	bl	8000a04 <__aeabi_dcmpun>
 8005f46:	4683      	mov	fp, r0
 8005f48:	bb18      	cbnz	r0, 8005f92 <sqrt+0x76>
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	2700      	movs	r7, #0
 8005f4e:	4632      	mov	r2, r6
 8005f50:	463b      	mov	r3, r7
 8005f52:	4620      	mov	r0, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7fa fd2d 	bl	80009b4 <__aeabi_dcmplt>
 8005f5a:	b1d0      	cbz	r0, 8005f92 <sqrt+0x76>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <sqrt+0xa4>)
 8005f62:	f8cd b020 	str.w	fp, [sp, #32]
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005f6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005f70:	f1ba 0f00 	cmp.w	sl, #0
 8005f74:	d112      	bne.n	8005f9c <sqrt+0x80>
 8005f76:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005f7a:	4668      	mov	r0, sp
 8005f7c:	f001 fa3b 	bl	80073f6 <matherr>
 8005f80:	b1b8      	cbz	r0, 8005fb2 <sqrt+0x96>
 8005f82:	9b08      	ldr	r3, [sp, #32]
 8005f84:	b11b      	cbz	r3, 8005f8e <sqrt+0x72>
 8005f86:	f001 fb3d 	bl	8007604 <__errno>
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005f92:	4640      	mov	r0, r8
 8005f94:	4649      	mov	r1, r9
 8005f96:	b00b      	add	sp, #44	; 0x2c
 8005f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa fbbe 	bl	8000724 <__aeabi_ddiv>
 8005fa8:	f1ba 0f02 	cmp.w	sl, #2
 8005fac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fb0:	d1e3      	bne.n	8005f7a <sqrt+0x5e>
 8005fb2:	f001 fb27 	bl	8007604 <__errno>
 8005fb6:	2321      	movs	r3, #33	; 0x21
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	e7e2      	b.n	8005f82 <sqrt+0x66>
 8005fbc:	20000224 	.word	0x20000224
 8005fc0:	08007720 	.word	0x08007720
 8005fc4:	00000000 	.word	0x00000000

08005fc8 <__ieee754_asin>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	4bc6      	ldr	r3, [pc, #792]	; (80062e8 <__ieee754_asin+0x320>)
 8005fce:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	459b      	cmp	fp, r3
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460d      	mov	r5, r1
 8005fda:	9101      	str	r1, [sp, #4]
 8005fdc:	dd2b      	ble.n	8006036 <__ieee754_asin+0x6e>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8005fe4:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8005fe8:	ea5b 0303 	orrs.w	r3, fp, r3
 8005fec:	d114      	bne.n	8006018 <__ieee754_asin+0x50>
 8005fee:	a3a4      	add	r3, pc, #656	; (adr r3, 8006280 <__ieee754_asin+0x2b8>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fa6c 	bl	80004d0 <__aeabi_dmul>
 8005ff8:	a3a3      	add	r3, pc, #652	; (adr r3, 8006288 <__ieee754_asin+0x2c0>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	4606      	mov	r6, r0
 8006000:	460f      	mov	r7, r1
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa fa63 	bl	80004d0 <__aeabi_dmul>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa f8ab 	bl	800016c <__adddf3>
 8006016:	e007      	b.n	8006028 <__ieee754_asin+0x60>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	f7fa f8a4 	bl	8000168 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	f7fa fb7e 	bl	8000724 <__aeabi_ddiv>
 8006028:	4604      	mov	r4, r0
 800602a:	460d      	mov	r5, r1
 800602c:	4620      	mov	r0, r4
 800602e:	4629      	mov	r1, r5
 8006030:	b005      	add	sp, #20
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	4bad      	ldr	r3, [pc, #692]	; (80062ec <__ieee754_asin+0x324>)
 8006038:	459b      	cmp	fp, r3
 800603a:	dc0e      	bgt.n	800605a <__ieee754_asin+0x92>
 800603c:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 8006040:	f280 80ad 	bge.w	800619e <__ieee754_asin+0x1d6>
 8006044:	a392      	add	r3, pc, #584	; (adr r3, 8006290 <__ieee754_asin+0x2c8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f88f 	bl	800016c <__adddf3>
 800604e:	2200      	movs	r2, #0
 8006050:	4ba7      	ldr	r3, [pc, #668]	; (80062f0 <__ieee754_asin+0x328>)
 8006052:	f7fa fccd 	bl	80009f0 <__aeabi_dcmpgt>
 8006056:	2800      	cmp	r0, #0
 8006058:	d1e8      	bne.n	800602c <__ieee754_asin+0x64>
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f001 f9c1 	bl	80073e4 <fabs>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	2000      	movs	r0, #0
 8006068:	49a1      	ldr	r1, [pc, #644]	; (80062f0 <__ieee754_asin+0x328>)
 800606a:	f7fa f87d 	bl	8000168 <__aeabi_dsub>
 800606e:	2200      	movs	r2, #0
 8006070:	4ba0      	ldr	r3, [pc, #640]	; (80062f4 <__ieee754_asin+0x32c>)
 8006072:	f7fa fa2d 	bl	80004d0 <__aeabi_dmul>
 8006076:	a388      	add	r3, pc, #544	; (adr r3, 8006298 <__ieee754_asin+0x2d0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	4604      	mov	r4, r0
 800607e:	460d      	mov	r5, r1
 8006080:	f7fa fa26 	bl	80004d0 <__aeabi_dmul>
 8006084:	a386      	add	r3, pc, #536	; (adr r3, 80062a0 <__ieee754_asin+0x2d8>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa f86f 	bl	800016c <__adddf3>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa fa1d 	bl	80004d0 <__aeabi_dmul>
 8006096:	a384      	add	r3, pc, #528	; (adr r3, 80062a8 <__ieee754_asin+0x2e0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f864 	bl	8000168 <__aeabi_dsub>
 80060a0:	4622      	mov	r2, r4
 80060a2:	462b      	mov	r3, r5
 80060a4:	f7fa fa14 	bl	80004d0 <__aeabi_dmul>
 80060a8:	a381      	add	r3, pc, #516	; (adr r3, 80062b0 <__ieee754_asin+0x2e8>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f85d 	bl	800016c <__adddf3>
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	f7fa fa0b 	bl	80004d0 <__aeabi_dmul>
 80060ba:	a37f      	add	r3, pc, #508	; (adr r3, 80062b8 <__ieee754_asin+0x2f0>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f852 	bl	8000168 <__aeabi_dsub>
 80060c4:	4622      	mov	r2, r4
 80060c6:	462b      	mov	r3, r5
 80060c8:	f7fa fa02 	bl	80004d0 <__aeabi_dmul>
 80060cc:	a37c      	add	r3, pc, #496	; (adr r3, 80062c0 <__ieee754_asin+0x2f8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f84b 	bl	800016c <__adddf3>
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	f7fa f9f9 	bl	80004d0 <__aeabi_dmul>
 80060de:	a37a      	add	r3, pc, #488	; (adr r3, 80062c8 <__ieee754_asin+0x300>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4680      	mov	r8, r0
 80060e6:	4689      	mov	r9, r1
 80060e8:	4620      	mov	r0, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7fa f9f0 	bl	80004d0 <__aeabi_dmul>
 80060f0:	a377      	add	r3, pc, #476	; (adr r3, 80062d0 <__ieee754_asin+0x308>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f837 	bl	8000168 <__aeabi_dsub>
 80060fa:	4622      	mov	r2, r4
 80060fc:	462b      	mov	r3, r5
 80060fe:	f7fa f9e7 	bl	80004d0 <__aeabi_dmul>
 8006102:	a375      	add	r3, pc, #468	; (adr r3, 80062d8 <__ieee754_asin+0x310>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f830 	bl	800016c <__adddf3>
 800610c:	4622      	mov	r2, r4
 800610e:	462b      	mov	r3, r5
 8006110:	f7fa f9de 	bl	80004d0 <__aeabi_dmul>
 8006114:	a372      	add	r3, pc, #456	; (adr r3, 80062e0 <__ieee754_asin+0x318>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f7fa f825 	bl	8000168 <__aeabi_dsub>
 800611e:	4622      	mov	r2, r4
 8006120:	462b      	mov	r3, r5
 8006122:	f7fa f9d5 	bl	80004d0 <__aeabi_dmul>
 8006126:	2200      	movs	r2, #0
 8006128:	4b71      	ldr	r3, [pc, #452]	; (80062f0 <__ieee754_asin+0x328>)
 800612a:	f7fa f81f 	bl	800016c <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4620      	mov	r0, r4
 8006134:	4629      	mov	r1, r5
 8006136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800613a:	f000 ff13 	bl	8006f64 <__ieee754_sqrt>
 800613e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006142:	460f      	mov	r7, r1
 8006144:	496c      	ldr	r1, [pc, #432]	; (80062f8 <__ieee754_asin+0x330>)
 8006146:	4606      	mov	r6, r0
 8006148:	458b      	cmp	fp, r1
 800614a:	f340 80d7 	ble.w	80062fc <__ieee754_asin+0x334>
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fae7 	bl	8000724 <__aeabi_ddiv>
 8006156:	4632      	mov	r2, r6
 8006158:	463b      	mov	r3, r7
 800615a:	f7fa f9b9 	bl	80004d0 <__aeabi_dmul>
 800615e:	4632      	mov	r2, r6
 8006160:	463b      	mov	r3, r7
 8006162:	f7fa f803 	bl	800016c <__adddf3>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	f7f9 ffff 	bl	800016c <__adddf3>
 800616e:	a346      	add	r3, pc, #280	; (adr r3, 8006288 <__ieee754_asin+0x2c0>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7f9 fff8 	bl	8000168 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	a140      	add	r1, pc, #256	; (adr r1, 8006280 <__ieee754_asin+0x2b8>)
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	f7f9 fff1 	bl	8000168 <__aeabi_dsub>
 8006186:	9b01      	ldr	r3, [sp, #4]
 8006188:	4604      	mov	r4, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfdc      	itt	le
 800618e:	4602      	movle	r2, r0
 8006190:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006194:	460d      	mov	r5, r1
 8006196:	bfdc      	itt	le
 8006198:	4614      	movle	r4, r2
 800619a:	461d      	movle	r5, r3
 800619c:	e746      	b.n	800602c <__ieee754_asin+0x64>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	f7fa f995 	bl	80004d0 <__aeabi_dmul>
 80061a6:	a33c      	add	r3, pc, #240	; (adr r3, 8006298 <__ieee754_asin+0x2d0>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	f7fa f98e 	bl	80004d0 <__aeabi_dmul>
 80061b4:	a33a      	add	r3, pc, #232	; (adr r3, 80062a0 <__ieee754_asin+0x2d8>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7f9 ffd7 	bl	800016c <__adddf3>
 80061be:	4632      	mov	r2, r6
 80061c0:	463b      	mov	r3, r7
 80061c2:	f7fa f985 	bl	80004d0 <__aeabi_dmul>
 80061c6:	a338      	add	r3, pc, #224	; (adr r3, 80062a8 <__ieee754_asin+0x2e0>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7f9 ffcc 	bl	8000168 <__aeabi_dsub>
 80061d0:	4632      	mov	r2, r6
 80061d2:	463b      	mov	r3, r7
 80061d4:	f7fa f97c 	bl	80004d0 <__aeabi_dmul>
 80061d8:	a335      	add	r3, pc, #212	; (adr r3, 80062b0 <__ieee754_asin+0x2e8>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7f9 ffc5 	bl	800016c <__adddf3>
 80061e2:	4632      	mov	r2, r6
 80061e4:	463b      	mov	r3, r7
 80061e6:	f7fa f973 	bl	80004d0 <__aeabi_dmul>
 80061ea:	a333      	add	r3, pc, #204	; (adr r3, 80062b8 <__ieee754_asin+0x2f0>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7f9 ffba 	bl	8000168 <__aeabi_dsub>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	f7fa f96a 	bl	80004d0 <__aeabi_dmul>
 80061fc:	a330      	add	r3, pc, #192	; (adr r3, 80062c0 <__ieee754_asin+0x2f8>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7f9 ffb3 	bl	800016c <__adddf3>
 8006206:	4632      	mov	r2, r6
 8006208:	463b      	mov	r3, r7
 800620a:	f7fa f961 	bl	80004d0 <__aeabi_dmul>
 800620e:	a32e      	add	r3, pc, #184	; (adr r3, 80062c8 <__ieee754_asin+0x300>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7fa f958 	bl	80004d0 <__aeabi_dmul>
 8006220:	a32b      	add	r3, pc, #172	; (adr r3, 80062d0 <__ieee754_asin+0x308>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7f9 ff9f 	bl	8000168 <__aeabi_dsub>
 800622a:	4632      	mov	r2, r6
 800622c:	463b      	mov	r3, r7
 800622e:	f7fa f94f 	bl	80004d0 <__aeabi_dmul>
 8006232:	a329      	add	r3, pc, #164	; (adr r3, 80062d8 <__ieee754_asin+0x310>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7f9 ff98 	bl	800016c <__adddf3>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa f946 	bl	80004d0 <__aeabi_dmul>
 8006244:	a326      	add	r3, pc, #152	; (adr r3, 80062e0 <__ieee754_asin+0x318>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 ff8d 	bl	8000168 <__aeabi_dsub>
 800624e:	4632      	mov	r2, r6
 8006250:	463b      	mov	r3, r7
 8006252:	f7fa f93d 	bl	80004d0 <__aeabi_dmul>
 8006256:	2200      	movs	r2, #0
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <__ieee754_asin+0x328>)
 800625a:	f7f9 ff87 	bl	800016c <__adddf3>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa fa5d 	bl	8000724 <__aeabi_ddiv>
 800626a:	4622      	mov	r2, r4
 800626c:	462b      	mov	r3, r5
 800626e:	f7fa f92f 	bl	80004d0 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	e6ca      	b.n	8006012 <__ieee754_asin+0x4a>
 800627c:	f3af 8000 	nop.w
 8006280:	54442d18 	.word	0x54442d18
 8006284:	3ff921fb 	.word	0x3ff921fb
 8006288:	33145c07 	.word	0x33145c07
 800628c:	3c91a626 	.word	0x3c91a626
 8006290:	8800759c 	.word	0x8800759c
 8006294:	7e37e43c 	.word	0x7e37e43c
 8006298:	0dfdf709 	.word	0x0dfdf709
 800629c:	3f023de1 	.word	0x3f023de1
 80062a0:	7501b288 	.word	0x7501b288
 80062a4:	3f49efe0 	.word	0x3f49efe0
 80062a8:	b5688f3b 	.word	0xb5688f3b
 80062ac:	3fa48228 	.word	0x3fa48228
 80062b0:	0e884455 	.word	0x0e884455
 80062b4:	3fc9c155 	.word	0x3fc9c155
 80062b8:	03eb6f7d 	.word	0x03eb6f7d
 80062bc:	3fd4d612 	.word	0x3fd4d612
 80062c0:	55555555 	.word	0x55555555
 80062c4:	3fc55555 	.word	0x3fc55555
 80062c8:	b12e9282 	.word	0xb12e9282
 80062cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80062d0:	1b8d0159 	.word	0x1b8d0159
 80062d4:	3fe6066c 	.word	0x3fe6066c
 80062d8:	9c598ac8 	.word	0x9c598ac8
 80062dc:	40002ae5 	.word	0x40002ae5
 80062e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80062e4:	40033a27 	.word	0x40033a27
 80062e8:	3fefffff 	.word	0x3fefffff
 80062ec:	3fdfffff 	.word	0x3fdfffff
 80062f0:	3ff00000 	.word	0x3ff00000
 80062f4:	3fe00000 	.word	0x3fe00000
 80062f8:	3fef3332 	.word	0x3fef3332
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7fa fa10 	bl	8000724 <__aeabi_ddiv>
 8006304:	4632      	mov	r2, r6
 8006306:	4680      	mov	r8, r0
 8006308:	4689      	mov	r9, r1
 800630a:	463b      	mov	r3, r7
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7f9 ff2c 	bl	800016c <__adddf3>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4640      	mov	r0, r8
 800631a:	4649      	mov	r1, r9
 800631c:	f7fa f8d8 	bl	80004d0 <__aeabi_dmul>
 8006320:	f04f 0a00 	mov.w	sl, #0
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	4652      	mov	r2, sl
 800632a:	463b      	mov	r3, r7
 800632c:	4650      	mov	r0, sl
 800632e:	4639      	mov	r1, r7
 8006330:	f7fa f8ce 	bl	80004d0 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4620      	mov	r0, r4
 800633a:	4629      	mov	r1, r5
 800633c:	f7f9 ff14 	bl	8000168 <__aeabi_dsub>
 8006340:	4652      	mov	r2, sl
 8006342:	4604      	mov	r4, r0
 8006344:	460d      	mov	r5, r1
 8006346:	463b      	mov	r3, r7
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7f9 ff0e 	bl	800016c <__adddf3>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	f7fa f9e4 	bl	8000724 <__aeabi_ddiv>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	f7f9 ff04 	bl	800016c <__adddf3>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	a113      	add	r1, pc, #76	; (adr r1, 80063b8 <__ieee754_asin+0x3f0>)
 800636a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7f9 fef5 	bl	8000168 <__aeabi_dsub>
 800637e:	4652      	mov	r2, sl
 8006380:	4604      	mov	r4, r0
 8006382:	460d      	mov	r5, r1
 8006384:	463b      	mov	r3, r7
 8006386:	4650      	mov	r0, sl
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 feef 	bl	800016c <__adddf3>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	a10b      	add	r1, pc, #44	; (adr r1, 80063c0 <__ieee754_asin+0x3f8>)
 8006394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006398:	f7f9 fee6 	bl	8000168 <__aeabi_dsub>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7f9 fee0 	bl	8000168 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	a104      	add	r1, pc, #16	; (adr r1, 80063c0 <__ieee754_asin+0x3f8>)
 80063ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b2:	e6e6      	b.n	8006182 <__ieee754_asin+0x1ba>
 80063b4:	f3af 8000 	nop.w
 80063b8:	33145c07 	.word	0x33145c07
 80063bc:	3c91a626 	.word	0x3c91a626
 80063c0:	54442d18 	.word	0x54442d18
 80063c4:	3fe921fb 	.word	0x3fe921fb

080063c8 <__ieee754_atan2>:
 80063c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	4256      	negs	r6, r2
 80063ce:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80063d2:	4316      	orrs	r6, r2
 80063d4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8006578 <__ieee754_atan2+0x1b0>
 80063d8:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 80063dc:	454e      	cmp	r6, r9
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	4688      	mov	r8, r1
 80063e4:	d807      	bhi.n	80063f6 <__ieee754_atan2+0x2e>
 80063e6:	4246      	negs	r6, r0
 80063e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80063ec:	4306      	orrs	r6, r0
 80063ee:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80063f2:	454e      	cmp	r6, r9
 80063f4:	d906      	bls.n	8006404 <__ieee754_atan2+0x3c>
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7f9 feb7 	bl	800016c <__adddf3>
 80063fe:	4604      	mov	r4, r0
 8006400:	460d      	mov	r5, r1
 8006402:	e015      	b.n	8006430 <__ieee754_atan2+0x68>
 8006404:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006408:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800640c:	4316      	orrs	r6, r2
 800640e:	d103      	bne.n	8006418 <__ieee754_atan2+0x50>
 8006410:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	f000 be54 	b.w	80070c0 <atan>
 8006418:	179e      	asrs	r6, r3, #30
 800641a:	f006 0602 	and.w	r6, r6, #2
 800641e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006422:	ea50 0107 	orrs.w	r1, r0, r7
 8006426:	d107      	bne.n	8006438 <__ieee754_atan2+0x70>
 8006428:	2e02      	cmp	r6, #2
 800642a:	d030      	beq.n	800648e <__ieee754_atan2+0xc6>
 800642c:	2e03      	cmp	r6, #3
 800642e:	d032      	beq.n	8006496 <__ieee754_atan2+0xce>
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006438:	ea52 010e 	orrs.w	r1, r2, lr
 800643c:	d106      	bne.n	800644c <__ieee754_atan2+0x84>
 800643e:	f1b8 0f00 	cmp.w	r8, #0
 8006442:	da71      	bge.n	8006528 <__ieee754_atan2+0x160>
 8006444:	a53a      	add	r5, pc, #232	; (adr r5, 8006530 <__ieee754_atan2+0x168>)
 8006446:	e9d5 4500 	ldrd	r4, r5, [r5]
 800644a:	e7f1      	b.n	8006430 <__ieee754_atan2+0x68>
 800644c:	45ce      	cmp	lr, r9
 800644e:	d126      	bne.n	800649e <__ieee754_atan2+0xd6>
 8006450:	4577      	cmp	r7, lr
 8006452:	d111      	bne.n	8006478 <__ieee754_atan2+0xb0>
 8006454:	2e02      	cmp	r6, #2
 8006456:	d007      	beq.n	8006468 <__ieee754_atan2+0xa0>
 8006458:	2e03      	cmp	r6, #3
 800645a:	d009      	beq.n	8006470 <__ieee754_atan2+0xa8>
 800645c:	2e01      	cmp	r6, #1
 800645e:	d15d      	bne.n	800651c <__ieee754_atan2+0x154>
 8006460:	a535      	add	r5, pc, #212	; (adr r5, 8006538 <__ieee754_atan2+0x170>)
 8006462:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006466:	e7e3      	b.n	8006430 <__ieee754_atan2+0x68>
 8006468:	a535      	add	r5, pc, #212	; (adr r5, 8006540 <__ieee754_atan2+0x178>)
 800646a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800646e:	e7df      	b.n	8006430 <__ieee754_atan2+0x68>
 8006470:	a535      	add	r5, pc, #212	; (adr r5, 8006548 <__ieee754_atan2+0x180>)
 8006472:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006476:	e7db      	b.n	8006430 <__ieee754_atan2+0x68>
 8006478:	2e02      	cmp	r6, #2
 800647a:	d008      	beq.n	800648e <__ieee754_atan2+0xc6>
 800647c:	2e03      	cmp	r6, #3
 800647e:	d00a      	beq.n	8006496 <__ieee754_atan2+0xce>
 8006480:	2e01      	cmp	r6, #1
 8006482:	f04f 0400 	mov.w	r4, #0
 8006486:	d14d      	bne.n	8006524 <__ieee754_atan2+0x15c>
 8006488:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800648c:	e7d0      	b.n	8006430 <__ieee754_atan2+0x68>
 800648e:	a530      	add	r5, pc, #192	; (adr r5, 8006550 <__ieee754_atan2+0x188>)
 8006490:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006494:	e7cc      	b.n	8006430 <__ieee754_atan2+0x68>
 8006496:	a530      	add	r5, pc, #192	; (adr r5, 8006558 <__ieee754_atan2+0x190>)
 8006498:	e9d5 4500 	ldrd	r4, r5, [r5]
 800649c:	e7c8      	b.n	8006430 <__ieee754_atan2+0x68>
 800649e:	454f      	cmp	r7, r9
 80064a0:	d0cd      	beq.n	800643e <__ieee754_atan2+0x76>
 80064a2:	eba7 070e 	sub.w	r7, r7, lr
 80064a6:	153f      	asrs	r7, r7, #20
 80064a8:	2f3c      	cmp	r7, #60	; 0x3c
 80064aa:	dc1e      	bgt.n	80064ea <__ieee754_atan2+0x122>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da01      	bge.n	80064b4 <__ieee754_atan2+0xec>
 80064b0:	373c      	adds	r7, #60	; 0x3c
 80064b2:	db1e      	blt.n	80064f2 <__ieee754_atan2+0x12a>
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa f934 	bl	8000724 <__aeabi_ddiv>
 80064bc:	f000 ff92 	bl	80073e4 <fabs>
 80064c0:	f000 fdfe 	bl	80070c0 <atan>
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	2e01      	cmp	r6, #1
 80064ca:	d015      	beq.n	80064f8 <__ieee754_atan2+0x130>
 80064cc:	2e02      	cmp	r6, #2
 80064ce:	d016      	beq.n	80064fe <__ieee754_atan2+0x136>
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	d0ad      	beq.n	8006430 <__ieee754_atan2+0x68>
 80064d4:	a322      	add	r3, pc, #136	; (adr r3, 8006560 <__ieee754_atan2+0x198>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	a31b      	add	r3, pc, #108	; (adr r3, 8006550 <__ieee754_atan2+0x188>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	e015      	b.n	8006516 <__ieee754_atan2+0x14e>
 80064ea:	a51f      	add	r5, pc, #124	; (adr r5, 8006568 <__ieee754_atan2+0x1a0>)
 80064ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064f0:	e7ea      	b.n	80064c8 <__ieee754_atan2+0x100>
 80064f2:	2400      	movs	r4, #0
 80064f4:	2500      	movs	r5, #0
 80064f6:	e7e7      	b.n	80064c8 <__ieee754_atan2+0x100>
 80064f8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80064fc:	e798      	b.n	8006430 <__ieee754_atan2+0x68>
 80064fe:	a318      	add	r3, pc, #96	; (adr r3, 8006560 <__ieee754_atan2+0x198>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7f9 fe2e 	bl	8000168 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	a10f      	add	r1, pc, #60	; (adr r1, 8006550 <__ieee754_atan2+0x188>)
 8006512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006516:	f7f9 fe27 	bl	8000168 <__aeabi_dsub>
 800651a:	e770      	b.n	80063fe <__ieee754_atan2+0x36>
 800651c:	a514      	add	r5, pc, #80	; (adr r5, 8006570 <__ieee754_atan2+0x1a8>)
 800651e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006522:	e785      	b.n	8006430 <__ieee754_atan2+0x68>
 8006524:	2500      	movs	r5, #0
 8006526:	e783      	b.n	8006430 <__ieee754_atan2+0x68>
 8006528:	a50f      	add	r5, pc, #60	; (adr r5, 8006568 <__ieee754_atan2+0x1a0>)
 800652a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800652e:	e77f      	b.n	8006430 <__ieee754_atan2+0x68>
 8006530:	54442d18 	.word	0x54442d18
 8006534:	bff921fb 	.word	0xbff921fb
 8006538:	54442d18 	.word	0x54442d18
 800653c:	bfe921fb 	.word	0xbfe921fb
 8006540:	7f3321d2 	.word	0x7f3321d2
 8006544:	4002d97c 	.word	0x4002d97c
 8006548:	7f3321d2 	.word	0x7f3321d2
 800654c:	c002d97c 	.word	0xc002d97c
 8006550:	54442d18 	.word	0x54442d18
 8006554:	400921fb 	.word	0x400921fb
 8006558:	54442d18 	.word	0x54442d18
 800655c:	c00921fb 	.word	0xc00921fb
 8006560:	33145c07 	.word	0x33145c07
 8006564:	3ca1a626 	.word	0x3ca1a626
 8006568:	54442d18 	.word	0x54442d18
 800656c:	3ff921fb 	.word	0x3ff921fb
 8006570:	54442d18 	.word	0x54442d18
 8006574:	3fe921fb 	.word	0x3fe921fb
 8006578:	7ff00000 	.word	0x7ff00000
 800657c:	00000000 	.word	0x00000000

08006580 <__ieee754_pow>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	b093      	sub	sp, #76	; 0x4c
 8006586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800658a:	9e03      	ldr	r6, [sp, #12]
 800658c:	9a02      	ldr	r2, [sp, #8]
 800658e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006592:	ea55 0302 	orrs.w	r3, r5, r2
 8006596:	4607      	mov	r7, r0
 8006598:	4688      	mov	r8, r1
 800659a:	4682      	mov	sl, r0
 800659c:	4689      	mov	r9, r1
 800659e:	f000 849e 	beq.w	8006ede <__ieee754_pow+0x95e>
 80065a2:	4b77      	ldr	r3, [pc, #476]	; (8006780 <__ieee754_pow+0x200>)
 80065a4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80065a8:	429c      	cmp	r4, r3
 80065aa:	dc09      	bgt.n	80065c0 <__ieee754_pow+0x40>
 80065ac:	d103      	bne.n	80065b6 <__ieee754_pow+0x36>
 80065ae:	b938      	cbnz	r0, 80065c0 <__ieee754_pow+0x40>
 80065b0:	42a5      	cmp	r5, r4
 80065b2:	dc0d      	bgt.n	80065d0 <__ieee754_pow+0x50>
 80065b4:	e001      	b.n	80065ba <__ieee754_pow+0x3a>
 80065b6:	429d      	cmp	r5, r3
 80065b8:	dc02      	bgt.n	80065c0 <__ieee754_pow+0x40>
 80065ba:	429d      	cmp	r5, r3
 80065bc:	d10e      	bne.n	80065dc <__ieee754_pow+0x5c>
 80065be:	b16a      	cbz	r2, 80065dc <__ieee754_pow+0x5c>
 80065c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065c8:	ea54 030a 	orrs.w	r3, r4, sl
 80065cc:	f000 8487 	beq.w	8006ede <__ieee754_pow+0x95e>
 80065d0:	486c      	ldr	r0, [pc, #432]	; (8006784 <__ieee754_pow+0x204>)
 80065d2:	b013      	add	sp, #76	; 0x4c
 80065d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	f000 bf10 	b.w	80073fc <nan>
 80065dc:	f1b9 0f00 	cmp.w	r9, #0
 80065e0:	da4f      	bge.n	8006682 <__ieee754_pow+0x102>
 80065e2:	4b69      	ldr	r3, [pc, #420]	; (8006788 <__ieee754_pow+0x208>)
 80065e4:	429d      	cmp	r5, r3
 80065e6:	dc4a      	bgt.n	800667e <__ieee754_pow+0xfe>
 80065e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80065ec:	429d      	cmp	r5, r3
 80065ee:	dd48      	ble.n	8006682 <__ieee754_pow+0x102>
 80065f0:	152b      	asrs	r3, r5, #20
 80065f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065f6:	2b14      	cmp	r3, #20
 80065f8:	dd24      	ble.n	8006644 <__ieee754_pow+0xc4>
 80065fa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80065fe:	fa22 f103 	lsr.w	r1, r2, r3
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	429a      	cmp	r2, r3
 8006608:	d13b      	bne.n	8006682 <__ieee754_pow+0x102>
 800660a:	f001 0101 	and.w	r1, r1, #1
 800660e:	f1c1 0302 	rsb	r3, r1, #2
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2a00      	cmp	r2, #0
 8006616:	d156      	bne.n	80066c6 <__ieee754_pow+0x146>
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <__ieee754_pow+0x200>)
 800661a:	429d      	cmp	r5, r3
 800661c:	d122      	bne.n	8006664 <__ieee754_pow+0xe4>
 800661e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006622:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006626:	ea53 030a 	orrs.w	r3, r3, sl
 800662a:	f000 8458 	beq.w	8006ede <__ieee754_pow+0x95e>
 800662e:	4b57      	ldr	r3, [pc, #348]	; (800678c <__ieee754_pow+0x20c>)
 8006630:	429c      	cmp	r4, r3
 8006632:	dd28      	ble.n	8006686 <__ieee754_pow+0x106>
 8006634:	2e00      	cmp	r6, #0
 8006636:	f280 8456 	bge.w	8006ee6 <__ieee754_pow+0x966>
 800663a:	2000      	movs	r0, #0
 800663c:	2100      	movs	r1, #0
 800663e:	b013      	add	sp, #76	; 0x4c
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	2a00      	cmp	r2, #0
 8006646:	d13c      	bne.n	80066c2 <__ieee754_pow+0x142>
 8006648:	f1c3 0314 	rsb	r3, r3, #20
 800664c:	fa45 f103 	asr.w	r1, r5, r3
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	429d      	cmp	r5, r3
 8006656:	f040 844e 	bne.w	8006ef6 <__ieee754_pow+0x976>
 800665a:	f001 0101 	and.w	r1, r1, #1
 800665e:	f1c1 0302 	rsb	r3, r1, #2
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4b4a      	ldr	r3, [pc, #296]	; (8006790 <__ieee754_pow+0x210>)
 8006666:	429d      	cmp	r5, r3
 8006668:	d114      	bne.n	8006694 <__ieee754_pow+0x114>
 800666a:	2e00      	cmp	r6, #0
 800666c:	f280 843f 	bge.w	8006eee <__ieee754_pow+0x96e>
 8006670:	463a      	mov	r2, r7
 8006672:	4643      	mov	r3, r8
 8006674:	2000      	movs	r0, #0
 8006676:	4946      	ldr	r1, [pc, #280]	; (8006790 <__ieee754_pow+0x210>)
 8006678:	f7fa f854 	bl	8000724 <__aeabi_ddiv>
 800667c:	e7df      	b.n	800663e <__ieee754_pow+0xbe>
 800667e:	2302      	movs	r3, #2
 8006680:	e7c7      	b.n	8006612 <__ieee754_pow+0x92>
 8006682:	2300      	movs	r3, #0
 8006684:	e7c5      	b.n	8006612 <__ieee754_pow+0x92>
 8006686:	2e00      	cmp	r6, #0
 8006688:	dad7      	bge.n	800663a <__ieee754_pow+0xba>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	9802      	ldr	r0, [sp, #8]
 800668e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006692:	e7d4      	b.n	800663e <__ieee754_pow+0xbe>
 8006694:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006698:	d106      	bne.n	80066a8 <__ieee754_pow+0x128>
 800669a:	463a      	mov	r2, r7
 800669c:	4643      	mov	r3, r8
 800669e:	4638      	mov	r0, r7
 80066a0:	4641      	mov	r1, r8
 80066a2:	f7f9 ff15 	bl	80004d0 <__aeabi_dmul>
 80066a6:	e7ca      	b.n	800663e <__ieee754_pow+0xbe>
 80066a8:	4b3a      	ldr	r3, [pc, #232]	; (8006794 <__ieee754_pow+0x214>)
 80066aa:	429e      	cmp	r6, r3
 80066ac:	d10b      	bne.n	80066c6 <__ieee754_pow+0x146>
 80066ae:	f1b9 0f00 	cmp.w	r9, #0
 80066b2:	db08      	blt.n	80066c6 <__ieee754_pow+0x146>
 80066b4:	4638      	mov	r0, r7
 80066b6:	4641      	mov	r1, r8
 80066b8:	b013      	add	sp, #76	; 0x4c
 80066ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066be:	f000 bc51 	b.w	8006f64 <__ieee754_sqrt>
 80066c2:	2300      	movs	r3, #0
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	4638      	mov	r0, r7
 80066c8:	4641      	mov	r1, r8
 80066ca:	f000 fe8b 	bl	80073e4 <fabs>
 80066ce:	f1ba 0f00 	cmp.w	sl, #0
 80066d2:	d125      	bne.n	8006720 <__ieee754_pow+0x1a0>
 80066d4:	b124      	cbz	r4, 80066e0 <__ieee754_pow+0x160>
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <__ieee754_pow+0x210>)
 80066d8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80066dc:	429a      	cmp	r2, r3
 80066de:	d11f      	bne.n	8006720 <__ieee754_pow+0x1a0>
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	da05      	bge.n	80066f0 <__ieee754_pow+0x170>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	2000      	movs	r0, #0
 80066ea:	4929      	ldr	r1, [pc, #164]	; (8006790 <__ieee754_pow+0x210>)
 80066ec:	f7fa f81a 	bl	8000724 <__aeabi_ddiv>
 80066f0:	f1b9 0f00 	cmp.w	r9, #0
 80066f4:	daa3      	bge.n	800663e <__ieee754_pow+0xbe>
 80066f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066fa:	9b00      	ldr	r3, [sp, #0]
 80066fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006700:	4323      	orrs	r3, r4
 8006702:	d106      	bne.n	8006712 <__ieee754_pow+0x192>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	f7f9 fd2e 	bl	8000168 <__aeabi_dsub>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	e7b2      	b.n	8006678 <__ieee754_pow+0xf8>
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d192      	bne.n	800663e <__ieee754_pow+0xbe>
 8006718:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800671c:	4619      	mov	r1, r3
 800671e:	e78e      	b.n	800663e <__ieee754_pow+0xbe>
 8006720:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006724:	f109 33ff 	add.w	r3, r9, #4294967295
 8006728:	930c      	str	r3, [sp, #48]	; 0x30
 800672a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800672c:	9b00      	ldr	r3, [sp, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	d104      	bne.n	800673c <__ieee754_pow+0x1bc>
 8006732:	463a      	mov	r2, r7
 8006734:	4643      	mov	r3, r8
 8006736:	4638      	mov	r0, r7
 8006738:	4641      	mov	r1, r8
 800673a:	e7e5      	b.n	8006708 <__ieee754_pow+0x188>
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <__ieee754_pow+0x218>)
 800673e:	429d      	cmp	r5, r3
 8006740:	f340 80fc 	ble.w	800693c <__ieee754_pow+0x3bc>
 8006744:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006748:	429d      	cmp	r5, r3
 800674a:	dd0b      	ble.n	8006764 <__ieee754_pow+0x1e4>
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <__ieee754_pow+0x20c>)
 800674e:	429c      	cmp	r4, r3
 8006750:	dc0e      	bgt.n	8006770 <__ieee754_pow+0x1f0>
 8006752:	2e00      	cmp	r6, #0
 8006754:	f6bf af71 	bge.w	800663a <__ieee754_pow+0xba>
 8006758:	a307      	add	r3, pc, #28	; (adr r3, 8006778 <__ieee754_pow+0x1f8>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	e79e      	b.n	80066a2 <__ieee754_pow+0x122>
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <__ieee754_pow+0x21c>)
 8006766:	429c      	cmp	r4, r3
 8006768:	ddf3      	ble.n	8006752 <__ieee754_pow+0x1d2>
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <__ieee754_pow+0x210>)
 800676c:	429c      	cmp	r4, r3
 800676e:	dd17      	ble.n	80067a0 <__ieee754_pow+0x220>
 8006770:	2e00      	cmp	r6, #0
 8006772:	dcf1      	bgt.n	8006758 <__ieee754_pow+0x1d8>
 8006774:	e761      	b.n	800663a <__ieee754_pow+0xba>
 8006776:	bf00      	nop
 8006778:	8800759c 	.word	0x8800759c
 800677c:	7e37e43c 	.word	0x7e37e43c
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	080076e9 	.word	0x080076e9
 8006788:	433fffff 	.word	0x433fffff
 800678c:	3fefffff 	.word	0x3fefffff
 8006790:	3ff00000 	.word	0x3ff00000
 8006794:	3fe00000 	.word	0x3fe00000
 8006798:	41e00000 	.word	0x41e00000
 800679c:	3feffffe 	.word	0x3feffffe
 80067a0:	2200      	movs	r2, #0
 80067a2:	4b61      	ldr	r3, [pc, #388]	; (8006928 <__ieee754_pow+0x3a8>)
 80067a4:	f7f9 fce0 	bl	8000168 <__aeabi_dsub>
 80067a8:	a355      	add	r3, pc, #340	; (adr r3, 8006900 <__ieee754_pow+0x380>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	4604      	mov	r4, r0
 80067b0:	460d      	mov	r5, r1
 80067b2:	f7f9 fe8d 	bl	80004d0 <__aeabi_dmul>
 80067b6:	a354      	add	r3, pc, #336	; (adr r3, 8006908 <__ieee754_pow+0x388>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7f9 fe84 	bl	80004d0 <__aeabi_dmul>
 80067c8:	2200      	movs	r2, #0
 80067ca:	4682      	mov	sl, r0
 80067cc:	468b      	mov	fp, r1
 80067ce:	4b57      	ldr	r3, [pc, #348]	; (800692c <__ieee754_pow+0x3ac>)
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	f7f9 fe7c 	bl	80004d0 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	a14c      	add	r1, pc, #304	; (adr r1, 8006910 <__ieee754_pow+0x390>)
 80067de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e2:	f7f9 fcc1 	bl	8000168 <__aeabi_dsub>
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	f7f9 fe71 	bl	80004d0 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	2000      	movs	r0, #0
 80067f4:	494e      	ldr	r1, [pc, #312]	; (8006930 <__ieee754_pow+0x3b0>)
 80067f6:	f7f9 fcb7 	bl	8000168 <__aeabi_dsub>
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	4680      	mov	r8, r0
 8006800:	4689      	mov	r9, r1
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f7f9 fe63 	bl	80004d0 <__aeabi_dmul>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7f9 fe5d 	bl	80004d0 <__aeabi_dmul>
 8006816:	a340      	add	r3, pc, #256	; (adr r3, 8006918 <__ieee754_pow+0x398>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fe58 	bl	80004d0 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4650      	mov	r0, sl
 8006826:	4659      	mov	r1, fp
 8006828:	f7f9 fc9e 	bl	8000168 <__aeabi_dsub>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4604      	mov	r4, r0
 8006832:	460d      	mov	r5, r1
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7f9 fc98 	bl	800016c <__adddf3>
 800683c:	2000      	movs	r0, #0
 800683e:	468b      	mov	fp, r1
 8006840:	4682      	mov	sl, r0
 8006842:	4632      	mov	r2, r6
 8006844:	463b      	mov	r3, r7
 8006846:	f7f9 fc8f 	bl	8000168 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fc89 	bl	8000168 <__aeabi_dsub>
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800685a:	3b01      	subs	r3, #1
 800685c:	4313      	orrs	r3, r2
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	bf0c      	ite	eq
 8006864:	4c33      	ldreq	r4, [pc, #204]	; (8006934 <__ieee754_pow+0x3b4>)
 8006866:	4c30      	ldrne	r4, [pc, #192]	; (8006928 <__ieee754_pow+0x3a8>)
 8006868:	4606      	mov	r6, r0
 800686a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800686e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006872:	2400      	movs	r4, #0
 8006874:	460f      	mov	r7, r1
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	f7f9 fc73 	bl	8000168 <__aeabi_dsub>
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	f7f9 fe23 	bl	80004d0 <__aeabi_dmul>
 800688a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800688e:	4680      	mov	r8, r0
 8006890:	4689      	mov	r9, r1
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fe1b 	bl	80004d0 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fc63 	bl	800016c <__adddf3>
 80068a6:	4622      	mov	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	4680      	mov	r8, r0
 80068ac:	4689      	mov	r9, r1
 80068ae:	4650      	mov	r0, sl
 80068b0:	4659      	mov	r1, fp
 80068b2:	f7f9 fe0d 	bl	80004d0 <__aeabi_dmul>
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
 80068ba:	460b      	mov	r3, r1
 80068bc:	4602      	mov	r2, r0
 80068be:	4649      	mov	r1, r9
 80068c0:	4640      	mov	r0, r8
 80068c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068c6:	f7f9 fc51 	bl	800016c <__adddf3>
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <__ieee754_pow+0x3b8>)
 80068cc:	4682      	mov	sl, r0
 80068ce:	4299      	cmp	r1, r3
 80068d0:	460f      	mov	r7, r1
 80068d2:	460e      	mov	r6, r1
 80068d4:	f340 82da 	ble.w	8006e8c <__ieee754_pow+0x90c>
 80068d8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068dc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068e0:	4303      	orrs	r3, r0
 80068e2:	f000 81d5 	beq.w	8006c90 <__ieee754_pow+0x710>
 80068e6:	a30e      	add	r3, pc, #56	; (adr r3, 8006920 <__ieee754_pow+0x3a0>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f0:	f7f9 fdee 	bl	80004d0 <__aeabi_dmul>
 80068f4:	a30a      	add	r3, pc, #40	; (adr r3, 8006920 <__ieee754_pow+0x3a0>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	e6d2      	b.n	80066a2 <__ieee754_pow+0x122>
 80068fc:	f3af 8000 	nop.w
 8006900:	60000000 	.word	0x60000000
 8006904:	3ff71547 	.word	0x3ff71547
 8006908:	f85ddf44 	.word	0xf85ddf44
 800690c:	3e54ae0b 	.word	0x3e54ae0b
 8006910:	55555555 	.word	0x55555555
 8006914:	3fd55555 	.word	0x3fd55555
 8006918:	652b82fe 	.word	0x652b82fe
 800691c:	3ff71547 	.word	0x3ff71547
 8006920:	8800759c 	.word	0x8800759c
 8006924:	7e37e43c 	.word	0x7e37e43c
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	3fd00000 	.word	0x3fd00000
 8006930:	3fe00000 	.word	0x3fe00000
 8006934:	bff00000 	.word	0xbff00000
 8006938:	408fffff 	.word	0x408fffff
 800693c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	da05      	bge.n	8006952 <__ieee754_pow+0x3d2>
 8006946:	4bca      	ldr	r3, [pc, #808]	; (8006c70 <__ieee754_pow+0x6f0>)
 8006948:	f7f9 fdc2 	bl	80004d0 <__aeabi_dmul>
 800694c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006950:	460c      	mov	r4, r1
 8006952:	1523      	asrs	r3, r4, #20
 8006954:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006958:	4413      	add	r3, r2
 800695a:	9307      	str	r3, [sp, #28]
 800695c:	4bc5      	ldr	r3, [pc, #788]	; (8006c74 <__ieee754_pow+0x6f4>)
 800695e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006962:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006966:	429c      	cmp	r4, r3
 8006968:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800696c:	dd08      	ble.n	8006980 <__ieee754_pow+0x400>
 800696e:	4bc2      	ldr	r3, [pc, #776]	; (8006c78 <__ieee754_pow+0x6f8>)
 8006970:	429c      	cmp	r4, r3
 8006972:	f340 8154 	ble.w	8006c1e <__ieee754_pow+0x69e>
 8006976:	9b07      	ldr	r3, [sp, #28]
 8006978:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800697c:	3301      	adds	r3, #1
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	2600      	movs	r6, #0
 8006982:	4629      	mov	r1, r5
 8006984:	00f3      	lsls	r3, r6, #3
 8006986:	930d      	str	r3, [sp, #52]	; 0x34
 8006988:	4bbc      	ldr	r3, [pc, #752]	; (8006c7c <__ieee754_pow+0x6fc>)
 800698a:	00f2      	lsls	r2, r6, #3
 800698c:	4413      	add	r3, r2
 800698e:	cb18      	ldmia	r3, {r3, r4}
 8006990:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006994:	461a      	mov	r2, r3
 8006996:	4623      	mov	r3, r4
 8006998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800699c:	f7f9 fbe4 	bl	8000168 <__aeabi_dsub>
 80069a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80069a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069ac:	f7f9 fbde 	bl	800016c <__adddf3>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	2000      	movs	r0, #0
 80069b6:	49b2      	ldr	r1, [pc, #712]	; (8006c80 <__ieee754_pow+0x700>)
 80069b8:	f7f9 feb4 	bl	8000724 <__aeabi_ddiv>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069c8:	f7f9 fd82 	bl	80004d0 <__aeabi_dmul>
 80069cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80069d4:	f04f 0a00 	mov.w	sl, #0
 80069d8:	2200      	movs	r2, #0
 80069da:	106d      	asrs	r5, r5, #1
 80069dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80069e8:	4659      	mov	r1, fp
 80069ea:	4650      	mov	r0, sl
 80069ec:	4614      	mov	r4, r2
 80069ee:	461d      	mov	r5, r3
 80069f0:	f7f9 fd6e 	bl	80004d0 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069fc:	f7f9 fbb4 	bl	8000168 <__aeabi_dsub>
 8006a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fbac 	bl	8000168 <__aeabi_dsub>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a18:	f7f9 fba6 	bl	8000168 <__aeabi_dsub>
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4652      	mov	r2, sl
 8006a20:	f7f9 fd56 	bl	80004d0 <__aeabi_dmul>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fb9c 	bl	8000168 <__aeabi_dsub>
 8006a30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a34:	f7f9 fd4c 	bl	80004d0 <__aeabi_dmul>
 8006a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f7f9 fd44 	bl	80004d0 <__aeabi_dmul>
 8006a48:	a377      	add	r3, pc, #476	; (adr r3, 8006c28 <__ieee754_pow+0x6a8>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
 8006a52:	f7f9 fd3d 	bl	80004d0 <__aeabi_dmul>
 8006a56:	a376      	add	r3, pc, #472	; (adr r3, 8006c30 <__ieee754_pow+0x6b0>)
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f7f9 fb86 	bl	800016c <__adddf3>
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f7f9 fd34 	bl	80004d0 <__aeabi_dmul>
 8006a68:	a373      	add	r3, pc, #460	; (adr r3, 8006c38 <__ieee754_pow+0x6b8>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fb7d 	bl	800016c <__adddf3>
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f7f9 fd2b 	bl	80004d0 <__aeabi_dmul>
 8006a7a:	a371      	add	r3, pc, #452	; (adr r3, 8006c40 <__ieee754_pow+0x6c0>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fb74 	bl	800016c <__adddf3>
 8006a84:	4622      	mov	r2, r4
 8006a86:	462b      	mov	r3, r5
 8006a88:	f7f9 fd22 	bl	80004d0 <__aeabi_dmul>
 8006a8c:	a36e      	add	r3, pc, #440	; (adr r3, 8006c48 <__ieee754_pow+0x6c8>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f7f9 fb6b 	bl	800016c <__adddf3>
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	f7f9 fd19 	bl	80004d0 <__aeabi_dmul>
 8006a9e:	a36c      	add	r3, pc, #432	; (adr r3, 8006c50 <__ieee754_pow+0x6d0>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fb62 	bl	800016c <__adddf3>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	462b      	mov	r3, r5
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fd0c 	bl	80004d0 <__aeabi_dmul>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7f9 fd06 	bl	80004d0 <__aeabi_dmul>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006acc:	465b      	mov	r3, fp
 8006ace:	4652      	mov	r2, sl
 8006ad0:	f7f9 fb4c 	bl	800016c <__adddf3>
 8006ad4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ad8:	f7f9 fcfa 	bl	80004d0 <__aeabi_dmul>
 8006adc:	4622      	mov	r2, r4
 8006ade:	462b      	mov	r3, r5
 8006ae0:	f7f9 fb44 	bl	800016c <__adddf3>
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460f      	mov	r7, r1
 8006aea:	4652      	mov	r2, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	4650      	mov	r0, sl
 8006af0:	f7f9 fcee 	bl	80004d0 <__aeabi_dmul>
 8006af4:	2200      	movs	r2, #0
 8006af6:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <__ieee754_pow+0x704>)
 8006af8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006afc:	f7f9 fb36 	bl	800016c <__adddf3>
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	f7f9 fb32 	bl	800016c <__adddf3>
 8006b08:	4650      	mov	r0, sl
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4650      	mov	r0, sl
 8006b12:	4659      	mov	r1, fp
 8006b14:	f7f9 fcdc 	bl	80004d0 <__aeabi_dmul>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4689      	mov	r9, r1
 8006b1e:	4b59      	ldr	r3, [pc, #356]	; (8006c84 <__ieee754_pow+0x704>)
 8006b20:	4629      	mov	r1, r5
 8006b22:	4650      	mov	r0, sl
 8006b24:	f7f9 fb20 	bl	8000168 <__aeabi_dsub>
 8006b28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b2c:	f7f9 fb1c 	bl	8000168 <__aeabi_dsub>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 fb16 	bl	8000168 <__aeabi_dsub>
 8006b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b40:	f7f9 fcc6 	bl	80004d0 <__aeabi_dmul>
 8006b44:	462b      	mov	r3, r5
 8006b46:	4606      	mov	r6, r0
 8006b48:	460f      	mov	r7, r1
 8006b4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b4e:	4652      	mov	r2, sl
 8006b50:	f7f9 fcbe 	bl	80004d0 <__aeabi_dmul>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 fb06 	bl	800016c <__adddf3>
 8006b60:	4606      	mov	r6, r0
 8006b62:	460f      	mov	r7, r1
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fafe 	bl	800016c <__adddf3>
 8006b70:	a339      	add	r3, pc, #228	; (adr r3, 8006c58 <__ieee754_pow+0x6d8>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	4650      	mov	r0, sl
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 fca9 	bl	80004d0 <__aeabi_dmul>
 8006b7e:	4642      	mov	r2, r8
 8006b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b84:	464b      	mov	r3, r9
 8006b86:	4629      	mov	r1, r5
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f7f9 faed 	bl	8000168 <__aeabi_dsub>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4630      	mov	r0, r6
 8006b94:	4639      	mov	r1, r7
 8006b96:	f7f9 fae7 	bl	8000168 <__aeabi_dsub>
 8006b9a:	a331      	add	r3, pc, #196	; (adr r3, 8006c60 <__ieee754_pow+0x6e0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fc96 	bl	80004d0 <__aeabi_dmul>
 8006ba4:	a330      	add	r3, pc, #192	; (adr r3, 8006c68 <__ieee754_pow+0x6e8>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fc8d 	bl	80004d0 <__aeabi_dmul>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 fad5 	bl	800016c <__adddf3>
 8006bc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bc4:	4b30      	ldr	r3, [pc, #192]	; (8006c88 <__ieee754_pow+0x708>)
 8006bc6:	4413      	add	r3, r2
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 face 	bl	800016c <__adddf3>
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	9807      	ldr	r0, [sp, #28]
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	f7f9 fc15 	bl	8000404 <__aeabi_i2d>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be0:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <__ieee754_pow+0x70c>)
 8006be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	f7f9 fabc 	bl	800016c <__adddf3>
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	f7f9 fab8 	bl	800016c <__adddf3>
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	f7f9 fab4 	bl	800016c <__adddf3>
 8006c04:	4632      	mov	r2, r6
 8006c06:	463b      	mov	r3, r7
 8006c08:	4650      	mov	r0, sl
 8006c0a:	468b      	mov	fp, r1
 8006c0c:	f7f9 faac 	bl	8000168 <__aeabi_dsub>
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	f7f9 faa8 	bl	8000168 <__aeabi_dsub>
 8006c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1c:	e613      	b.n	8006846 <__ieee754_pow+0x2c6>
 8006c1e:	2601      	movs	r6, #1
 8006c20:	e6af      	b.n	8006982 <__ieee754_pow+0x402>
 8006c22:	bf00      	nop
 8006c24:	f3af 8000 	nop.w
 8006c28:	4a454eef 	.word	0x4a454eef
 8006c2c:	3fca7e28 	.word	0x3fca7e28
 8006c30:	93c9db65 	.word	0x93c9db65
 8006c34:	3fcd864a 	.word	0x3fcd864a
 8006c38:	a91d4101 	.word	0xa91d4101
 8006c3c:	3fd17460 	.word	0x3fd17460
 8006c40:	518f264d 	.word	0x518f264d
 8006c44:	3fd55555 	.word	0x3fd55555
 8006c48:	db6fabff 	.word	0xdb6fabff
 8006c4c:	3fdb6db6 	.word	0x3fdb6db6
 8006c50:	33333303 	.word	0x33333303
 8006c54:	3fe33333 	.word	0x3fe33333
 8006c58:	e0000000 	.word	0xe0000000
 8006c5c:	3feec709 	.word	0x3feec709
 8006c60:	dc3a03fd 	.word	0xdc3a03fd
 8006c64:	3feec709 	.word	0x3feec709
 8006c68:	145b01f5 	.word	0x145b01f5
 8006c6c:	be3e2fe0 	.word	0xbe3e2fe0
 8006c70:	43400000 	.word	0x43400000
 8006c74:	0003988e 	.word	0x0003988e
 8006c78:	000bb679 	.word	0x000bb679
 8006c7c:	08007728 	.word	0x08007728
 8006c80:	3ff00000 	.word	0x3ff00000
 8006c84:	40080000 	.word	0x40080000
 8006c88:	08007748 	.word	0x08007748
 8006c8c:	08007738 	.word	0x08007738
 8006c90:	a39b      	add	r3, pc, #620	; (adr r3, 8006f00 <__ieee754_pow+0x980>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f7f9 fa67 	bl	800016c <__adddf3>
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 fa5d 	bl	8000168 <__aeabi_dsub>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb6:	f7f9 fe9b 	bl	80009f0 <__aeabi_dcmpgt>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f47f ae13 	bne.w	80068e6 <__ieee754_pow+0x366>
 8006cc0:	4aa3      	ldr	r2, [pc, #652]	; (8006f50 <__ieee754_pow+0x9d0>)
 8006cc2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	f340 8104 	ble.w	8006ed4 <__ieee754_pow+0x954>
 8006ccc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	151b      	asrs	r3, r3, #20
 8006cd4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006cd8:	fa4a f303 	asr.w	r3, sl, r3
 8006cdc:	4433      	add	r3, r6
 8006cde:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ce2:	4f9c      	ldr	r7, [pc, #624]	; (8006f54 <__ieee754_pow+0x9d4>)
 8006ce4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006ce8:	4117      	asrs	r7, r2
 8006cea:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006cee:	ea23 0107 	bic.w	r1, r3, r7
 8006cf2:	f1c2 0214 	rsb	r2, r2, #20
 8006cf6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006cfa:	fa4a fa02 	asr.w	sl, sl, r2
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	bfb8      	it	lt
 8006d0a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d0e:	f7f9 fa2b 	bl	8000168 <__aeabi_dsub>
 8006d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	f7f9 fa25 	bl	800016c <__adddf3>
 8006d22:	a379      	add	r3, pc, #484	; (adr r3, 8006f08 <__ieee754_pow+0x988>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	f7f9 fbcf 	bl	80004d0 <__aeabi_dmul>
 8006d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fa13 	bl	8000168 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 fa0d 	bl	8000168 <__aeabi_dsub>
 8006d4e:	a370      	add	r3, pc, #448	; (adr r3, 8006f10 <__ieee754_pow+0x990>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f7f9 fbbc 	bl	80004d0 <__aeabi_dmul>
 8006d58:	a36f      	add	r3, pc, #444	; (adr r3, 8006f18 <__ieee754_pow+0x998>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	4680      	mov	r8, r0
 8006d60:	4689      	mov	r9, r1
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fbb3 	bl	80004d0 <__aeabi_dmul>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 f9fb 	bl	800016c <__adddf3>
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 f9f3 	bl	800016c <__adddf3>
 8006d86:	4632      	mov	r2, r6
 8006d88:	463b      	mov	r3, r7
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	f7f9 f9eb 	bl	8000168 <__aeabi_dsub>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 f9e5 	bl	8000168 <__aeabi_dsub>
 8006d9e:	4642      	mov	r2, r8
 8006da0:	4606      	mov	r6, r0
 8006da2:	460f      	mov	r7, r1
 8006da4:	464b      	mov	r3, r9
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	f7f9 fb91 	bl	80004d0 <__aeabi_dmul>
 8006dae:	a35c      	add	r3, pc, #368	; (adr r3, 8006f20 <__ieee754_pow+0x9a0>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 fb8a 	bl	80004d0 <__aeabi_dmul>
 8006dbc:	a35a      	add	r3, pc, #360	; (adr r3, 8006f28 <__ieee754_pow+0x9a8>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 f9d1 	bl	8000168 <__aeabi_dsub>
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	f7f9 fb81 	bl	80004d0 <__aeabi_dmul>
 8006dce:	a358      	add	r3, pc, #352	; (adr r3, 8006f30 <__ieee754_pow+0x9b0>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 f9ca 	bl	800016c <__adddf3>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f7f9 fb78 	bl	80004d0 <__aeabi_dmul>
 8006de0:	a355      	add	r3, pc, #340	; (adr r3, 8006f38 <__ieee754_pow+0x9b8>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 f9bf 	bl	8000168 <__aeabi_dsub>
 8006dea:	4622      	mov	r2, r4
 8006dec:	462b      	mov	r3, r5
 8006dee:	f7f9 fb6f 	bl	80004d0 <__aeabi_dmul>
 8006df2:	a353      	add	r3, pc, #332	; (adr r3, 8006f40 <__ieee754_pow+0x9c0>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 f9b8 	bl	800016c <__adddf3>
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	462b      	mov	r3, r5
 8006e00:	f7f9 fb66 	bl	80004d0 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4640      	mov	r0, r8
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	f7f9 f9ac 	bl	8000168 <__aeabi_dsub>
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4640      	mov	r0, r8
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	f7f9 fb58 	bl	80004d0 <__aeabi_dmul>
 8006e20:	2200      	movs	r2, #0
 8006e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 f99b 	bl	8000168 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3a:	f7f9 fc73 	bl	8000724 <__aeabi_ddiv>
 8006e3e:	4632      	mov	r2, r6
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	463b      	mov	r3, r7
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fb41 	bl	80004d0 <__aeabi_dmul>
 8006e4e:	4632      	mov	r2, r6
 8006e50:	463b      	mov	r3, r7
 8006e52:	f7f9 f98b 	bl	800016c <__adddf3>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f7f9 f983 	bl	8000168 <__aeabi_dsub>
 8006e62:	4642      	mov	r2, r8
 8006e64:	464b      	mov	r3, r9
 8006e66:	f7f9 f97f 	bl	8000168 <__aeabi_dsub>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	2000      	movs	r0, #0
 8006e70:	4939      	ldr	r1, [pc, #228]	; (8006f58 <__ieee754_pow+0x9d8>)
 8006e72:	f7f9 f979 	bl	8000168 <__aeabi_dsub>
 8006e76:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006e7a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006e7e:	da2c      	bge.n	8006eda <__ieee754_pow+0x95a>
 8006e80:	4652      	mov	r2, sl
 8006e82:	f000 fb49 	bl	8007518 <scalbn>
 8006e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8a:	e40a      	b.n	80066a2 <__ieee754_pow+0x122>
 8006e8c:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <__ieee754_pow+0x9dc>)
 8006e8e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006e92:	429f      	cmp	r7, r3
 8006e94:	f77f af14 	ble.w	8006cc0 <__ieee754_pow+0x740>
 8006e98:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <__ieee754_pow+0x9e0>)
 8006e9a:	440b      	add	r3, r1
 8006e9c:	4303      	orrs	r3, r0
 8006e9e:	d00b      	beq.n	8006eb8 <__ieee754_pow+0x938>
 8006ea0:	a329      	add	r3, pc, #164	; (adr r3, 8006f48 <__ieee754_pow+0x9c8>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eaa:	f7f9 fb11 	bl	80004d0 <__aeabi_dmul>
 8006eae:	a326      	add	r3, pc, #152	; (adr r3, 8006f48 <__ieee754_pow+0x9c8>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7ff bbf5 	b.w	80066a2 <__ieee754_pow+0x122>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f7f9 f954 	bl	8000168 <__aeabi_dsub>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 fd7e 	bl	80009c8 <__aeabi_dcmple>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f aef7 	beq.w	8006cc0 <__ieee754_pow+0x740>
 8006ed2:	e7e5      	b.n	8006ea0 <__ieee754_pow+0x920>
 8006ed4:	f04f 0a00 	mov.w	sl, #0
 8006ed8:	e71d      	b.n	8006d16 <__ieee754_pow+0x796>
 8006eda:	4621      	mov	r1, r4
 8006edc:	e7d3      	b.n	8006e86 <__ieee754_pow+0x906>
 8006ede:	2000      	movs	r0, #0
 8006ee0:	491d      	ldr	r1, [pc, #116]	; (8006f58 <__ieee754_pow+0x9d8>)
 8006ee2:	f7ff bbac 	b.w	800663e <__ieee754_pow+0xbe>
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7ff bba8 	b.w	800663e <__ieee754_pow+0xbe>
 8006eee:	4638      	mov	r0, r7
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	f7ff bba4 	b.w	800663e <__ieee754_pow+0xbe>
 8006ef6:	9200      	str	r2, [sp, #0]
 8006ef8:	f7ff bbb4 	b.w	8006664 <__ieee754_pow+0xe4>
 8006efc:	f3af 8000 	nop.w
 8006f00:	652b82fe 	.word	0x652b82fe
 8006f04:	3c971547 	.word	0x3c971547
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	3fe62e43 	.word	0x3fe62e43
 8006f10:	fefa39ef 	.word	0xfefa39ef
 8006f14:	3fe62e42 	.word	0x3fe62e42
 8006f18:	0ca86c39 	.word	0x0ca86c39
 8006f1c:	be205c61 	.word	0xbe205c61
 8006f20:	72bea4d0 	.word	0x72bea4d0
 8006f24:	3e663769 	.word	0x3e663769
 8006f28:	c5d26bf1 	.word	0xc5d26bf1
 8006f2c:	3ebbbd41 	.word	0x3ebbbd41
 8006f30:	af25de2c 	.word	0xaf25de2c
 8006f34:	3f11566a 	.word	0x3f11566a
 8006f38:	16bebd93 	.word	0x16bebd93
 8006f3c:	3f66c16c 	.word	0x3f66c16c
 8006f40:	5555553e 	.word	0x5555553e
 8006f44:	3fc55555 	.word	0x3fc55555
 8006f48:	c2f8f359 	.word	0xc2f8f359
 8006f4c:	01a56e1f 	.word	0x01a56e1f
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	000fffff 	.word	0x000fffff
 8006f58:	3ff00000 	.word	0x3ff00000
 8006f5c:	4090cbff 	.word	0x4090cbff
 8006f60:	3f6f3400 	.word	0x3f6f3400

08006f64 <__ieee754_sqrt>:
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80070b8 <__ieee754_sqrt+0x154>
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	ea3e 0e01 	bics.w	lr, lr, r1
 8006f72:	460d      	mov	r5, r1
 8006f74:	4607      	mov	r7, r0
 8006f76:	460a      	mov	r2, r1
 8006f78:	460c      	mov	r4, r1
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	d10f      	bne.n	8006f9e <__ieee754_sqrt+0x3a>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	f7f9 faa5 	bl	80004d0 <__aeabi_dmul>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	f7f9 f8ed 	bl	800016c <__adddf3>
 8006f92:	4606      	mov	r6, r0
 8006f94:	460d      	mov	r5, r1
 8006f96:	4630      	mov	r0, r6
 8006f98:	4629      	mov	r1, r5
 8006f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	dc0e      	bgt.n	8006fc0 <__ieee754_sqrt+0x5c>
 8006fa2:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8006fa6:	ea5e 0707 	orrs.w	r7, lr, r7
 8006faa:	d0f4      	beq.n	8006f96 <__ieee754_sqrt+0x32>
 8006fac:	b141      	cbz	r1, 8006fc0 <__ieee754_sqrt+0x5c>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	f7f9 f8d9 	bl	8000168 <__aeabi_dsub>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	f7f9 fbb3 	bl	8000724 <__aeabi_ddiv>
 8006fbe:	e7e8      	b.n	8006f92 <__ieee754_sqrt+0x2e>
 8006fc0:	1512      	asrs	r2, r2, #20
 8006fc2:	d10c      	bne.n	8006fde <__ieee754_sqrt+0x7a>
 8006fc4:	2c00      	cmp	r4, #0
 8006fc6:	d06e      	beq.n	80070a6 <__ieee754_sqrt+0x142>
 8006fc8:	2100      	movs	r1, #0
 8006fca:	02e6      	lsls	r6, r4, #11
 8006fcc:	d56f      	bpl.n	80070ae <__ieee754_sqrt+0x14a>
 8006fce:	1e48      	subs	r0, r1, #1
 8006fd0:	1a12      	subs	r2, r2, r0
 8006fd2:	f1c1 0020 	rsb	r0, r1, #32
 8006fd6:	fa23 f000 	lsr.w	r0, r3, r0
 8006fda:	4304      	orrs	r4, r0
 8006fdc:	408b      	lsls	r3, r1
 8006fde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006fe2:	07d5      	lsls	r5, r2, #31
 8006fe4:	f04f 0500 	mov.w	r5, #0
 8006fe8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006fec:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006ff0:	bf42      	ittt	mi
 8006ff2:	0064      	lslmi	r4, r4, #1
 8006ff4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8006ff8:	005b      	lslmi	r3, r3, #1
 8006ffa:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8006ffe:	1050      	asrs	r0, r2, #1
 8007000:	4421      	add	r1, r4
 8007002:	2216      	movs	r2, #22
 8007004:	462c      	mov	r4, r5
 8007006:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	19a7      	adds	r7, r4, r6
 800700e:	428f      	cmp	r7, r1
 8007010:	bfde      	ittt	le
 8007012:	1bc9      	suble	r1, r1, r7
 8007014:	19bc      	addle	r4, r7, r6
 8007016:	19ad      	addle	r5, r5, r6
 8007018:	0049      	lsls	r1, r1, #1
 800701a:	3a01      	subs	r2, #1
 800701c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007020:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007028:	d1f0      	bne.n	800700c <__ieee754_sqrt+0xa8>
 800702a:	f04f 0e20 	mov.w	lr, #32
 800702e:	4694      	mov	ip, r2
 8007030:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007034:	42a1      	cmp	r1, r4
 8007036:	eb06 070c 	add.w	r7, r6, ip
 800703a:	dc02      	bgt.n	8007042 <__ieee754_sqrt+0xde>
 800703c:	d112      	bne.n	8007064 <__ieee754_sqrt+0x100>
 800703e:	429f      	cmp	r7, r3
 8007040:	d810      	bhi.n	8007064 <__ieee754_sqrt+0x100>
 8007042:	2f00      	cmp	r7, #0
 8007044:	eb07 0c06 	add.w	ip, r7, r6
 8007048:	da34      	bge.n	80070b4 <__ieee754_sqrt+0x150>
 800704a:	f1bc 0f00 	cmp.w	ip, #0
 800704e:	db31      	blt.n	80070b4 <__ieee754_sqrt+0x150>
 8007050:	f104 0801 	add.w	r8, r4, #1
 8007054:	1b09      	subs	r1, r1, r4
 8007056:	4644      	mov	r4, r8
 8007058:	429f      	cmp	r7, r3
 800705a:	bf88      	it	hi
 800705c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007060:	1bdb      	subs	r3, r3, r7
 8007062:	4432      	add	r2, r6
 8007064:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8007068:	f1be 0e01 	subs.w	lr, lr, #1
 800706c:	4439      	add	r1, r7
 800706e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007072:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007076:	d1dd      	bne.n	8007034 <__ieee754_sqrt+0xd0>
 8007078:	430b      	orrs	r3, r1
 800707a:	d006      	beq.n	800708a <__ieee754_sqrt+0x126>
 800707c:	1c54      	adds	r4, r2, #1
 800707e:	bf0b      	itete	eq
 8007080:	4672      	moveq	r2, lr
 8007082:	3201      	addne	r2, #1
 8007084:	3501      	addeq	r5, #1
 8007086:	f022 0201 	bicne.w	r2, r2, #1
 800708a:	106b      	asrs	r3, r5, #1
 800708c:	0852      	lsrs	r2, r2, #1
 800708e:	07e9      	lsls	r1, r5, #31
 8007090:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007094:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007098:	bf48      	it	mi
 800709a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800709e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80070a2:	4616      	mov	r6, r2
 80070a4:	e777      	b.n	8006f96 <__ieee754_sqrt+0x32>
 80070a6:	0adc      	lsrs	r4, r3, #11
 80070a8:	3a15      	subs	r2, #21
 80070aa:	055b      	lsls	r3, r3, #21
 80070ac:	e78a      	b.n	8006fc4 <__ieee754_sqrt+0x60>
 80070ae:	0064      	lsls	r4, r4, #1
 80070b0:	3101      	adds	r1, #1
 80070b2:	e78a      	b.n	8006fca <__ieee754_sqrt+0x66>
 80070b4:	46a0      	mov	r8, r4
 80070b6:	e7cd      	b.n	8007054 <__ieee754_sqrt+0xf0>
 80070b8:	7ff00000 	.word	0x7ff00000
 80070bc:	00000000 	.word	0x00000000

080070c0 <atan>:
 80070c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	4bba      	ldr	r3, [pc, #744]	; (80073b0 <atan+0x2f0>)
 80070c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070ca:	429e      	cmp	r6, r3
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	468b      	mov	fp, r1
 80070d2:	dd17      	ble.n	8007104 <atan+0x44>
 80070d4:	4ab7      	ldr	r2, [pc, #732]	; (80073b4 <atan+0x2f4>)
 80070d6:	4296      	cmp	r6, r2
 80070d8:	dc01      	bgt.n	80070de <atan+0x1e>
 80070da:	d109      	bne.n	80070f0 <atan+0x30>
 80070dc:	b140      	cbz	r0, 80070f0 <atan+0x30>
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	f7f9 f841 	bl	800016c <__adddf3>
 80070ea:	4604      	mov	r4, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	e005      	b.n	80070fc <atan+0x3c>
 80070f0:	f1bb 0f00 	cmp.w	fp, #0
 80070f4:	4cb0      	ldr	r4, [pc, #704]	; (80073b8 <atan+0x2f8>)
 80070f6:	f300 8129 	bgt.w	800734c <atan+0x28c>
 80070fa:	4db0      	ldr	r5, [pc, #704]	; (80073bc <atan+0x2fc>)
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	4bae      	ldr	r3, [pc, #696]	; (80073c0 <atan+0x300>)
 8007106:	429e      	cmp	r6, r3
 8007108:	dc11      	bgt.n	800712e <atan+0x6e>
 800710a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800710e:	429e      	cmp	r6, r3
 8007110:	dc0a      	bgt.n	8007128 <atan+0x68>
 8007112:	a38f      	add	r3, pc, #572	; (adr r3, 8007350 <atan+0x290>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f828 	bl	800016c <__adddf3>
 800711c:	2200      	movs	r2, #0
 800711e:	4ba9      	ldr	r3, [pc, #676]	; (80073c4 <atan+0x304>)
 8007120:	f7f9 fc66 	bl	80009f0 <__aeabi_dcmpgt>
 8007124:	2800      	cmp	r0, #0
 8007126:	d1e9      	bne.n	80070fc <atan+0x3c>
 8007128:	f04f 3aff 	mov.w	sl, #4294967295
 800712c:	e027      	b.n	800717e <atan+0xbe>
 800712e:	f000 f959 	bl	80073e4 <fabs>
 8007132:	4ba5      	ldr	r3, [pc, #660]	; (80073c8 <atan+0x308>)
 8007134:	4604      	mov	r4, r0
 8007136:	429e      	cmp	r6, r3
 8007138:	460d      	mov	r5, r1
 800713a:	f300 80b8 	bgt.w	80072ae <atan+0x1ee>
 800713e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007142:	429e      	cmp	r6, r3
 8007144:	f300 809c 	bgt.w	8007280 <atan+0x1c0>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	f7f9 f80e 	bl	800016c <__adddf3>
 8007150:	2200      	movs	r2, #0
 8007152:	4b9c      	ldr	r3, [pc, #624]	; (80073c4 <atan+0x304>)
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	2200      	movs	r2, #0
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 f801 	bl	800016c <__adddf3>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fad7 	bl	8000724 <__aeabi_ddiv>
 8007176:	f04f 0a00 	mov.w	sl, #0
 800717a:	4604      	mov	r4, r0
 800717c:	460d      	mov	r5, r1
 800717e:	4622      	mov	r2, r4
 8007180:	462b      	mov	r3, r5
 8007182:	4620      	mov	r0, r4
 8007184:	4629      	mov	r1, r5
 8007186:	f7f9 f9a3 	bl	80004d0 <__aeabi_dmul>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4680      	mov	r8, r0
 8007190:	4689      	mov	r9, r1
 8007192:	f7f9 f99d 	bl	80004d0 <__aeabi_dmul>
 8007196:	a370      	add	r3, pc, #448	; (adr r3, 8007358 <atan+0x298>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	f7f9 f996 	bl	80004d0 <__aeabi_dmul>
 80071a4:	a36e      	add	r3, pc, #440	; (adr r3, 8007360 <atan+0x2a0>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f8 ffdf 	bl	800016c <__adddf3>
 80071ae:	4632      	mov	r2, r6
 80071b0:	463b      	mov	r3, r7
 80071b2:	f7f9 f98d 	bl	80004d0 <__aeabi_dmul>
 80071b6:	a36c      	add	r3, pc, #432	; (adr r3, 8007368 <atan+0x2a8>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f8 ffd6 	bl	800016c <__adddf3>
 80071c0:	4632      	mov	r2, r6
 80071c2:	463b      	mov	r3, r7
 80071c4:	f7f9 f984 	bl	80004d0 <__aeabi_dmul>
 80071c8:	a369      	add	r3, pc, #420	; (adr r3, 8007370 <atan+0x2b0>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f8 ffcd 	bl	800016c <__adddf3>
 80071d2:	4632      	mov	r2, r6
 80071d4:	463b      	mov	r3, r7
 80071d6:	f7f9 f97b 	bl	80004d0 <__aeabi_dmul>
 80071da:	a367      	add	r3, pc, #412	; (adr r3, 8007378 <atan+0x2b8>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f8 ffc4 	bl	800016c <__adddf3>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	f7f9 f972 	bl	80004d0 <__aeabi_dmul>
 80071ec:	a364      	add	r3, pc, #400	; (adr r3, 8007380 <atan+0x2c0>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f8 ffbb 	bl	800016c <__adddf3>
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	f7f9 f969 	bl	80004d0 <__aeabi_dmul>
 80071fe:	a362      	add	r3, pc, #392	; (adr r3, 8007388 <atan+0x2c8>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	4680      	mov	r8, r0
 8007206:	4689      	mov	r9, r1
 8007208:	4630      	mov	r0, r6
 800720a:	4639      	mov	r1, r7
 800720c:	f7f9 f960 	bl	80004d0 <__aeabi_dmul>
 8007210:	a35f      	add	r3, pc, #380	; (adr r3, 8007390 <atan+0x2d0>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f8 ffa7 	bl	8000168 <__aeabi_dsub>
 800721a:	4632      	mov	r2, r6
 800721c:	463b      	mov	r3, r7
 800721e:	f7f9 f957 	bl	80004d0 <__aeabi_dmul>
 8007222:	a35d      	add	r3, pc, #372	; (adr r3, 8007398 <atan+0x2d8>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 ff9e 	bl	8000168 <__aeabi_dsub>
 800722c:	4632      	mov	r2, r6
 800722e:	463b      	mov	r3, r7
 8007230:	f7f9 f94e 	bl	80004d0 <__aeabi_dmul>
 8007234:	a35a      	add	r3, pc, #360	; (adr r3, 80073a0 <atan+0x2e0>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ff95 	bl	8000168 <__aeabi_dsub>
 800723e:	4632      	mov	r2, r6
 8007240:	463b      	mov	r3, r7
 8007242:	f7f9 f945 	bl	80004d0 <__aeabi_dmul>
 8007246:	a358      	add	r3, pc, #352	; (adr r3, 80073a8 <atan+0x2e8>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f8 ff8c 	bl	8000168 <__aeabi_dsub>
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	f7f9 f93c 	bl	80004d0 <__aeabi_dmul>
 8007258:	f1ba 3fff 	cmp.w	sl, #4294967295
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	d14e      	bne.n	8007300 <atan+0x240>
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f8 ff81 	bl	800016c <__adddf3>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f9 f92f 	bl	80004d0 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f8 ff75 	bl	8000168 <__aeabi_dsub>
 800727e:	e734      	b.n	80070ea <atan+0x2a>
 8007280:	2200      	movs	r2, #0
 8007282:	4b50      	ldr	r3, [pc, #320]	; (80073c4 <atan+0x304>)
 8007284:	f7f8 ff70 	bl	8000168 <__aeabi_dsub>
 8007288:	2200      	movs	r2, #0
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	4b4d      	ldr	r3, [pc, #308]	; (80073c4 <atan+0x304>)
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f8 ff6a 	bl	800016c <__adddf3>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 fa40 	bl	8000724 <__aeabi_ddiv>
 80072a4:	f04f 0a01 	mov.w	sl, #1
 80072a8:	4604      	mov	r4, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	e767      	b.n	800717e <atan+0xbe>
 80072ae:	4b47      	ldr	r3, [pc, #284]	; (80073cc <atan+0x30c>)
 80072b0:	429e      	cmp	r6, r3
 80072b2:	dc1a      	bgt.n	80072ea <atan+0x22a>
 80072b4:	2200      	movs	r2, #0
 80072b6:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <atan+0x310>)
 80072b8:	f7f8 ff56 	bl	8000168 <__aeabi_dsub>
 80072bc:	2200      	movs	r2, #0
 80072be:	4606      	mov	r6, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <atan+0x310>)
 80072c4:	4620      	mov	r0, r4
 80072c6:	4629      	mov	r1, r5
 80072c8:	f7f9 f902 	bl	80004d0 <__aeabi_dmul>
 80072cc:	2200      	movs	r2, #0
 80072ce:	4b3d      	ldr	r3, [pc, #244]	; (80073c4 <atan+0x304>)
 80072d0:	f7f8 ff4c 	bl	800016c <__adddf3>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fa22 	bl	8000724 <__aeabi_ddiv>
 80072e0:	f04f 0a02 	mov.w	sl, #2
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	e749      	b.n	800717e <atan+0xbe>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	2000      	movs	r0, #0
 80072f0:	4938      	ldr	r1, [pc, #224]	; (80073d4 <atan+0x314>)
 80072f2:	f7f9 fa17 	bl	8000724 <__aeabi_ddiv>
 80072f6:	f04f 0a03 	mov.w	sl, #3
 80072fa:	4604      	mov	r4, r0
 80072fc:	460d      	mov	r5, r1
 80072fe:	e73e      	b.n	800717e <atan+0xbe>
 8007300:	4640      	mov	r0, r8
 8007302:	4649      	mov	r1, r9
 8007304:	f7f8 ff32 	bl	800016c <__adddf3>
 8007308:	4622      	mov	r2, r4
 800730a:	462b      	mov	r3, r5
 800730c:	f7f9 f8e0 	bl	80004d0 <__aeabi_dmul>
 8007310:	4e31      	ldr	r6, [pc, #196]	; (80073d8 <atan+0x318>)
 8007312:	4b32      	ldr	r3, [pc, #200]	; (80073dc <atan+0x31c>)
 8007314:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007318:	4456      	add	r6, sl
 800731a:	449a      	add	sl, r3
 800731c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007320:	f7f8 ff22 	bl	8000168 <__aeabi_dsub>
 8007324:	4622      	mov	r2, r4
 8007326:	462b      	mov	r3, r5
 8007328:	f7f8 ff1e 	bl	8000168 <__aeabi_dsub>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007334:	f7f8 ff18 	bl	8000168 <__aeabi_dsub>
 8007338:	f1bb 0f00 	cmp.w	fp, #0
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	f6bf aedc 	bge.w	80070fc <atan+0x3c>
 8007344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007348:	461d      	mov	r5, r3
 800734a:	e6d7      	b.n	80070fc <atan+0x3c>
 800734c:	4d24      	ldr	r5, [pc, #144]	; (80073e0 <atan+0x320>)
 800734e:	e6d5      	b.n	80070fc <atan+0x3c>
 8007350:	8800759c 	.word	0x8800759c
 8007354:	7e37e43c 	.word	0x7e37e43c
 8007358:	e322da11 	.word	0xe322da11
 800735c:	3f90ad3a 	.word	0x3f90ad3a
 8007360:	24760deb 	.word	0x24760deb
 8007364:	3fa97b4b 	.word	0x3fa97b4b
 8007368:	a0d03d51 	.word	0xa0d03d51
 800736c:	3fb10d66 	.word	0x3fb10d66
 8007370:	c54c206e 	.word	0xc54c206e
 8007374:	3fb745cd 	.word	0x3fb745cd
 8007378:	920083ff 	.word	0x920083ff
 800737c:	3fc24924 	.word	0x3fc24924
 8007380:	5555550d 	.word	0x5555550d
 8007384:	3fd55555 	.word	0x3fd55555
 8007388:	2c6a6c2f 	.word	0x2c6a6c2f
 800738c:	bfa2b444 	.word	0xbfa2b444
 8007390:	52defd9a 	.word	0x52defd9a
 8007394:	3fadde2d 	.word	0x3fadde2d
 8007398:	af749a6d 	.word	0xaf749a6d
 800739c:	3fb3b0f2 	.word	0x3fb3b0f2
 80073a0:	fe231671 	.word	0xfe231671
 80073a4:	3fbc71c6 	.word	0x3fbc71c6
 80073a8:	9998ebc4 	.word	0x9998ebc4
 80073ac:	3fc99999 	.word	0x3fc99999
 80073b0:	440fffff 	.word	0x440fffff
 80073b4:	7ff00000 	.word	0x7ff00000
 80073b8:	54442d18 	.word	0x54442d18
 80073bc:	bff921fb 	.word	0xbff921fb
 80073c0:	3fdbffff 	.word	0x3fdbffff
 80073c4:	3ff00000 	.word	0x3ff00000
 80073c8:	3ff2ffff 	.word	0x3ff2ffff
 80073cc:	40037fff 	.word	0x40037fff
 80073d0:	3ff80000 	.word	0x3ff80000
 80073d4:	bff00000 	.word	0xbff00000
 80073d8:	08007758 	.word	0x08007758
 80073dc:	08007778 	.word	0x08007778
 80073e0:	3ff921fb 	.word	0x3ff921fb

080073e4 <fabs>:
 80073e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073e8:	4770      	bx	lr

080073ea <finite>:
 80073ea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80073ee:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80073f2:	0fc0      	lsrs	r0, r0, #31
 80073f4:	4770      	bx	lr

080073f6 <matherr>:
 80073f6:	2000      	movs	r0, #0
 80073f8:	4770      	bx	lr
	...

080073fc <nan>:
 80073fc:	2000      	movs	r0, #0
 80073fe:	4901      	ldr	r1, [pc, #4]	; (8007404 <nan+0x8>)
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	7ff80000 	.word	0x7ff80000

08007408 <rint>:
 8007408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800740e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8007412:	2f13      	cmp	r7, #19
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4684      	mov	ip, r0
 800741a:	460c      	mov	r4, r1
 800741c:	4605      	mov	r5, r0
 800741e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007422:	dc56      	bgt.n	80074d2 <rint+0xca>
 8007424:	2f00      	cmp	r7, #0
 8007426:	da29      	bge.n	800747c <rint+0x74>
 8007428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800742c:	4301      	orrs	r1, r0
 800742e:	d021      	beq.n	8007474 <rint+0x6c>
 8007430:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8007434:	4305      	orrs	r5, r0
 8007436:	426b      	negs	r3, r5
 8007438:	432b      	orrs	r3, r5
 800743a:	0b1b      	lsrs	r3, r3, #12
 800743c:	0c64      	lsrs	r4, r4, #17
 800743e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007442:	0464      	lsls	r4, r4, #17
 8007444:	ea43 0104 	orr.w	r1, r3, r4
 8007448:	4b31      	ldr	r3, [pc, #196]	; (8007510 <rint+0x108>)
 800744a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800744e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007452:	4622      	mov	r2, r4
 8007454:	462b      	mov	r3, r5
 8007456:	f7f8 fe89 	bl	800016c <__adddf3>
 800745a:	e9cd 0100 	strd	r0, r1, [sp]
 800745e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007462:	4622      	mov	r2, r4
 8007464:	462b      	mov	r3, r5
 8007466:	f7f8 fe7f 	bl	8000168 <__aeabi_dsub>
 800746a:	4602      	mov	r2, r0
 800746c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007470:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	b003      	add	sp, #12
 800747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747c:	4925      	ldr	r1, [pc, #148]	; (8007514 <rint+0x10c>)
 800747e:	4139      	asrs	r1, r7
 8007480:	ea03 0001 	and.w	r0, r3, r1
 8007484:	4310      	orrs	r0, r2
 8007486:	d0f5      	beq.n	8007474 <rint+0x6c>
 8007488:	084b      	lsrs	r3, r1, #1
 800748a:	ea04 0203 	and.w	r2, r4, r3
 800748e:	ea52 050c 	orrs.w	r5, r2, ip
 8007492:	d00a      	beq.n	80074aa <rint+0xa2>
 8007494:	ea24 0303 	bic.w	r3, r4, r3
 8007498:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800749c:	2f13      	cmp	r7, #19
 800749e:	bf0c      	ite	eq
 80074a0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80074a4:	2500      	movne	r5, #0
 80074a6:	413c      	asrs	r4, r7
 80074a8:	431c      	orrs	r4, r3
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <rint+0x108>)
 80074ac:	4621      	mov	r1, r4
 80074ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80074b2:	4628      	mov	r0, r5
 80074b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f8 fe56 	bl	800016c <__adddf3>
 80074c0:	e9cd 0100 	strd	r0, r1, [sp]
 80074c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c8:	4622      	mov	r2, r4
 80074ca:	462b      	mov	r3, r5
 80074cc:	f7f8 fe4c 	bl	8000168 <__aeabi_dsub>
 80074d0:	e006      	b.n	80074e0 <rint+0xd8>
 80074d2:	2f33      	cmp	r7, #51	; 0x33
 80074d4:	dd07      	ble.n	80074e6 <rint+0xde>
 80074d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80074da:	d1cb      	bne.n	8007474 <rint+0x6c>
 80074dc:	f7f8 fe46 	bl	800016c <__adddf3>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e7c6      	b.n	8007474 <rint+0x6c>
 80074e6:	f04f 31ff 	mov.w	r1, #4294967295
 80074ea:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80074ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80074f2:	4208      	tst	r0, r1
 80074f4:	d0be      	beq.n	8007474 <rint+0x6c>
 80074f6:	084b      	lsrs	r3, r1, #1
 80074f8:	4218      	tst	r0, r3
 80074fa:	bf1f      	itttt	ne
 80074fc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8007500:	ea20 0303 	bicne.w	r3, r0, r3
 8007504:	fa45 fe0e 	asrne.w	lr, r5, lr
 8007508:	ea4e 0503 	orrne.w	r5, lr, r3
 800750c:	e7cd      	b.n	80074aa <rint+0xa2>
 800750e:	bf00      	nop
 8007510:	08007798 	.word	0x08007798
 8007514:	000fffff 	.word	0x000fffff

08007518 <scalbn>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	4616      	mov	r6, r2
 800751c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	460b      	mov	r3, r1
 8007526:	b98a      	cbnz	r2, 800754c <scalbn+0x34>
 8007528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800752c:	4303      	orrs	r3, r0
 800752e:	d035      	beq.n	800759c <scalbn+0x84>
 8007530:	2200      	movs	r2, #0
 8007532:	4b2d      	ldr	r3, [pc, #180]	; (80075e8 <scalbn+0xd0>)
 8007534:	f7f8 ffcc 	bl	80004d0 <__aeabi_dmul>
 8007538:	4a2c      	ldr	r2, [pc, #176]	; (80075ec <scalbn+0xd4>)
 800753a:	4604      	mov	r4, r0
 800753c:	4296      	cmp	r6, r2
 800753e:	460d      	mov	r5, r1
 8007540:	460b      	mov	r3, r1
 8007542:	da0e      	bge.n	8007562 <scalbn+0x4a>
 8007544:	a324      	add	r3, pc, #144	; (adr r3, 80075d8 <scalbn+0xc0>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	e01c      	b.n	8007586 <scalbn+0x6e>
 800754c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007550:	42ba      	cmp	r2, r7
 8007552:	d109      	bne.n	8007568 <scalbn+0x50>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	f7f8 fe08 	bl	800016c <__adddf3>
 800755c:	4604      	mov	r4, r0
 800755e:	460d      	mov	r5, r1
 8007560:	e01c      	b.n	800759c <scalbn+0x84>
 8007562:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007566:	3a36      	subs	r2, #54	; 0x36
 8007568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800756c:	4432      	add	r2, r6
 800756e:	428a      	cmp	r2, r1
 8007570:	dd0c      	ble.n	800758c <scalbn+0x74>
 8007572:	4622      	mov	r2, r4
 8007574:	462b      	mov	r3, r5
 8007576:	a11a      	add	r1, pc, #104	; (adr r1, 80075e0 <scalbn+0xc8>)
 8007578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757c:	f000 f83a 	bl	80075f4 <copysign>
 8007580:	a317      	add	r3, pc, #92	; (adr r3, 80075e0 <scalbn+0xc8>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 ffa3 	bl	80004d0 <__aeabi_dmul>
 800758a:	e7e7      	b.n	800755c <scalbn+0x44>
 800758c:	2a00      	cmp	r2, #0
 800758e:	dd08      	ble.n	80075a2 <scalbn+0x8a>
 8007590:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007594:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075a6:	da0b      	bge.n	80075c0 <scalbn+0xa8>
 80075a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075ac:	429e      	cmp	r6, r3
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	dce0      	bgt.n	8007576 <scalbn+0x5e>
 80075b4:	a108      	add	r1, pc, #32	; (adr r1, 80075d8 <scalbn+0xc0>)
 80075b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ba:	f000 f81b 	bl	80075f4 <copysign>
 80075be:	e7c1      	b.n	8007544 <scalbn+0x2c>
 80075c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075c4:	3236      	adds	r2, #54	; 0x36
 80075c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	2200      	movs	r2, #0
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <scalbn+0xd8>)
 80075d6:	e7d6      	b.n	8007586 <scalbn+0x6e>
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	01a56e1f 	.word	0x01a56e1f
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	7e37e43c 	.word	0x7e37e43c
 80075e8:	43500000 	.word	0x43500000
 80075ec:	ffff3cb0 	.word	0xffff3cb0
 80075f0:	3c900000 	.word	0x3c900000

080075f4 <copysign>:
 80075f4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80075f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075fc:	ea42 0103 	orr.w	r1, r2, r3
 8007600:	4770      	bx	lr
	...

08007604 <__errno>:
 8007604:	4b01      	ldr	r3, [pc, #4]	; (800760c <__errno+0x8>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	200001c0 	.word	0x200001c0

08007610 <_sbrk>:
 8007610:	4b04      	ldr	r3, [pc, #16]	; (8007624 <_sbrk+0x14>)
 8007612:	4602      	mov	r2, r0
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	b909      	cbnz	r1, 800761c <_sbrk+0xc>
 8007618:	4903      	ldr	r1, [pc, #12]	; (8007628 <_sbrk+0x18>)
 800761a:	6019      	str	r1, [r3, #0]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	4402      	add	r2, r0
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	4770      	bx	lr
 8007624:	200002b0 	.word	0x200002b0
 8007628:	2000171c 	.word	0x2000171c

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
